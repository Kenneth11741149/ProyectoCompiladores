package codigo;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
        String error = "";
        if(s.value != null){
            error = "Error Sintactico en la linea "+s.right+ " Columna "+(s.left+1)+ ". No se esperaba esto: "+ "\""+ s.value+ "\""+ "\n" ;
           System.out.print(error);
        }
        //errores.add(error)
    }
    


    public Symbol getS(){
        return this.s;
    }
:};

terminal Linea, Comillas,Caracter, T_dato, Int,Character,OpenTest,CloseTest,Or,Then,OpenUntil,CloseUntil,Do,OpenFor,CloseFor,
    Igual, Suma, Resta, Multiplicacion, Division, Op_logico, Op_relacional,
    Op_atribucion, Op_incremento, Op_booleano, Parentesis_a, Parentesis_c,
    Llave_a, Llave_c, Corchete_a, Corchete_c, Main, P_coma, Identificador,
    Numero, ERROR,CloseMain,As,Define,L,Boolean,Eat,Throwln,THrow,OpenMatch,CloseMatch,When,Stop;
non terminal INICIO, SENTENCIA, DECLARACION, DECLARACION_FOR, IF, IF_ELSE,
    UNTIL,FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR,LECTURA,ESCRITURA,MATCH,CASE,Identificadoroletra;

start with INICIO;

INICIO ::= 

    Main Parentesis_a Parentesis_c SENTENCIA CloseMain|
    Main Parentesis_a Parentesis_c CloseMain|
    error SENTENCIA CloseMain|
    error CloseMain|
    

;

SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA UNTIL |
    UNTIL |
    SENTENCIA FOR |
    FOR |
    SENTENCIA LECTURA|
    LECTURA|
    SENTENCIA ESCRITURA|
    ESCRITURA|
    SENTENCIA MATCH|
    MATCH
    
    
    
;
Identificadoroletra ::= 
    Identificador|
    L
;
DECLARACION ::= 
    //Int
    Define Identificadoroletra As Int P_coma|
    Define Identificadoroletra As Int Igual Numero P_coma|

    // int array
    Define Identificadoroletra As Int Corchete_a Numero Corchete_c P_coma|
    // int matriz
    Define Identificadoroletra As Int Corchete_a Numero Corchete_c Corchete_a Numero Corchete_c P_coma|

   
    //Deprecated
    //Define L As Int P_coma|  
    //Define L As Int Igual Numero P_coma|
    


    //Char
    Define Identificadoroletra As Character P_coma|
    Define Identificadoroletra As Character Igual Caracter P_coma|
    
     // int array
    Define Identificadoroletra As Character Corchete_a Numero Corchete_c P_coma|
    // int matriz
    Define Identificadoroletra As Character Corchete_a Numero Corchete_c Corchete_a Numero Corchete_c P_coma|


    //Deprecated
    //Define L As Character P_coma|
    //Define L As Character Igual Comillas Identificador Comillas P_coma|

    //boolean
    Define Identificadoroletra As Boolean P_coma|
    Define Identificadoroletra As Boolean Igual Op_booleano P_coma|
    
    //Deprecated
    //Define L As Boolean P_coma|
    //Define L As Boolean Igual Op_booleano P_coma|

    /* ERROR HANDLING BLOCK FOR DECLARATIONS*/
    error P_coma

    


    /*Int Identificador P_coma | 
    Int Identificador Op_atribucion Numero P_coma |
    Int Identificador Igual Numero P_coma |
    Int Identificador Op_incremento P_coma | 
    Int Op_incremento Identificador P_coma | 
    T_dato Identificador P_coma | 
    T_dato Identificador Op_atribucion Numero P_coma |
    T_dato Identificador Igual Numero P_coma |
    T_dato Identificador Op_incremento P_coma | 
    T_dato Op_incremento Identificador P_coma | 
    Cadena Identificador Op_atribucion Comillas Comillas P_coma |
    Cadena Identificador Igual Comillas Comillas P_coma |
    Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma |
    Cadena Identificador Igual Comillas Identificador Comillas P_coma*/
;
IF ::= OpenTest Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Then SENTENCIA CloseTest
       // Errro handler OpenTest error CloseTest
;
SENTENCIA_BOOLEANA ::= 
    //Esta parte hace falta ajustarla para lo de recursividad y lo de operaciones con precedencia y asociatividad
    Op_booleano | 
    Identificador Op_relacional Op_booleano |
    Identificador Op_relacional Numero |
    Identificador Op_relacional Identificador |
    Identificador Op_relacional Comillas Comillas |
    Identificador Op_relacional Comillas Identificador Comillas
;
IF_ELSE ::= OpenTest Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Then SENTENCIA  Or SENTENCIA CloseTest 


    /*
            OpenTest error Then SENTENCIA error SENTENCIA CloseTest|
            OpenTest error Then SENTENCIA Or SENTENCIA CloseTest |
            OpenTest Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Then SENTENCIA error SENTENCIA CloseTest
    */
;
UNTIL ::= OpenUntil Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Do SENTENCIA CloseUntil 
         //Error Handling block OpenUntil error CloseUntil
;
FOR ::= OpenFor Parentesis_a SENTENCIA_FOR Parentesis_c  SENTENCIA CloseFor 
            // Error Handling Block | OpenFor error CloseFor
;
SENTENCIA_FOR ::=
    Int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR
;

LECTURA ::= Eat Identificadoroletra P_coma
            //Deprecation Eat L P_coma |
            //Error handling block Eat error
;
ESCRITURA ::= THrow Parentesis_a Identificador Parentesis_c P_coma |
              Throwln Parentesis_a Identificador Parentesis_c P_coma
              //Error handling block THrow error | Throwln error
              //Posible validacion de throw strings strings.
;
DECLARACION_FOR ::= 
    Identificador Op_atribucion Numero |
    Identificador Op_incremento | 
    Op_incremento Identificador
;

MATCH ::= 
    OpenMatch Parentesis_a Identificador Parentesis_c CASE CloseMatch  
    //Error Handling Block|OpenMatch Parentesis_a Identificador Parentesis_c error CloseMatch
;

CASE ::=
    //Might need some modification later
    CASE When Comillas Identificador Comillas Igual SENTENCIA Stop P_coma|
    When Comillas Identificador Comillas Igual SENTENCIA Stop P_coma
;