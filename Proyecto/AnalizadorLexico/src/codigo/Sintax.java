
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Sep 28 23:35:24 CST 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Sep 28 23:35:24 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\002\007\000\002\002" +
    "\006\000\002\002\010\000\002\002\005\000\002\002\004" +
    "\000\002\002\002\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\005\000\002\031" +
    "\005\000\002\031\002\000\002\030\004\000\002\030\006" +
    "\000\002\024\003\000\002\025\005\000\002\025\005\000" +
    "\002\025\003\000\002\026\005\000\002\026\005\000\002" +
    "\026\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\005\000\002\021\015\000\002\021\016\000\002\021\016" +
    "\000\002\021\017\000\002\020\003\000\002\020\003\000" +
    "\002\022\007\000\002\004\007\000\002\004\011\000\002" +
    "\004\006\000\002\004\012\000\002\004\015\000\002\004" +
    "\007\000\002\004\011\000\002\004\012\000\002\004\015" +
    "\000\002\004\007\000\002\004\011\000\002\004\004\000" +
    "\002\006\011\000\002\023\004\000\002\023\003\000\002" +
    "\012\005\000\002\012\005\000\002\012\004\000\002\012" +
    "\003\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\006\000\002\012\005\000" +
    "\002\007\013\000\002\010\011\000\002\011\010\000\002" +
    "\013\012\000\002\013\011\000\002\014\005\000\002\015" +
    "\007\000\002\015\007\000\002\005\005\000\002\005\004" +
    "\000\002\005\004\000\002\016\010\000\002\017\011\000" +
    "\002\017\010\000\002\017\011\000\002\017\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\010\002\ufffb\003\004\046\005\001\002\000" +
    "\032\003\025\012\013\016\031\021\036\050\017\054\370" +
    "\056\024\057\021\061\026\062\035\063\032\064\012\001" +
    "\002\000\004\036\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\037\011\001\002\000" +
    "\032\003\025\012\013\016\031\021\036\050\017\054\040" +
    "\056\024\057\021\061\026\062\035\063\032\064\012\001" +
    "\002\000\004\036\334\001\002\000\004\036\321\001\002" +
    "\000\046\003\ufff9\012\ufff9\013\ufff9\014\ufff9\016\ufff9\017" +
    "\ufff9\021\ufff9\022\ufff9\032\ufff9\050\ufff9\054\ufff9\056\ufff9" +
    "\057\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\067\ufff9\001" +
    "\002\000\032\003\025\012\013\016\031\021\036\050\017" +
    "\054\244\056\024\057\021\061\026\062\035\063\032\064" +
    "\012\001\002\000\046\003\uffef\012\uffef\013\uffef\014\uffef" +
    "\016\uffef\017\uffef\021\uffef\022\uffef\032\uffef\050\uffef\054" +
    "\uffef\056\uffef\057\uffef\061\uffef\062\uffef\063\uffef\064\uffef" +
    "\067\uffef\001\002\000\032\023\uffd3\024\uffd3\025\uffd3\026" +
    "\uffd3\027\uffd3\031\uffd3\033\uffd3\034\uffd3\036\uffd3\037\uffd3" +
    "\047\uffd3\055\uffd3\001\002\000\046\003\ufff7\012\ufff7\013" +
    "\ufff7\014\ufff7\016\ufff7\017\ufff7\021\ufff7\022\ufff7\032\ufff7" +
    "\050\ufff7\054\ufff7\056\ufff7\057\ufff7\061\ufff7\062\ufff7\063" +
    "\ufff7\064\ufff7\067\ufff7\001\002\000\032\023\uffd2\024\uffd2" +
    "\025\uffd2\026\uffd2\027\uffd2\031\uffd2\033\uffd2\034\uffd2\036" +
    "\uffd2\037\uffd2\047\uffd2\055\uffd2\001\002\000\046\003\ufff5" +
    "\012\ufff5\013\ufff5\014\ufff5\016\ufff5\017\ufff5\021\ufff5\022" +
    "\ufff5\032\ufff5\050\ufff5\054\ufff5\056\ufff5\057\ufff5\061\ufff5" +
    "\062\ufff5\063\ufff5\064\ufff5\067\ufff5\001\002\000\006\023" +
    "\231\036\230\001\002\000\006\050\017\057\021\001\002" +
    "\000\004\047\166\001\002\000\006\050\017\057\021\001" +
    "\002\000\046\003\ufff3\012\ufff3\013\ufff3\014\ufff3\016\ufff3" +
    "\017\ufff3\021\ufff3\022\ufff3\032\ufff3\050\ufff3\054\ufff3\056" +
    "\ufff3\057\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\067\ufff3" +
    "\001\002\000\046\003\uffed\012\uffed\013\uffed\014\uffed\016" +
    "\uffed\017\uffed\021\uffed\022\uffed\032\uffed\050\uffed\054\uffed" +
    "\056\uffed\057\uffed\061\uffed\062\uffed\063\uffed\064\uffed\067" +
    "\uffed\001\002\000\004\036\156\001\002\000\004\036\152" +
    "\001\002\000\046\003\uffe9\012\uffe9\013\uffe9\014\uffe9\016" +
    "\uffe9\017\uffe9\021\uffe9\022\uffe9\032\uffe9\050\uffe9\054\uffe9" +
    "\056\uffe9\057\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\067" +
    "\uffe9\001\002\000\046\003\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\016\ufff1\017\ufff1\021\ufff1\022\ufff1\032\ufff1\050\ufff1\054" +
    "\ufff1\056\ufff1\057\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1" +
    "\067\ufff1\001\002\000\004\036\146\001\002\000\004\036" +
    "\041\001\002\000\046\003\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\016\uffeb\017\uffeb\021\uffeb\022\uffeb\032\uffeb\050\uffeb\054" +
    "\uffeb\056\uffeb\057\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb" +
    "\067\uffeb\001\002\000\004\002\uffff\001\002\000\006\010" +
    "\044\050\043\001\002\000\004\037\132\001\002\000\004" +
    "\023\124\001\002\000\006\050\017\057\021\001\002\000" +
    "\004\023\046\001\002\000\004\052\047\001\002\000\004" +
    "\047\050\001\002\000\014\035\055\036\051\050\017\057" +
    "\021\072\054\001\002\000\014\035\055\036\051\050\017" +
    "\057\021\072\054\001\002\000\010\047\072\070\057\071" +
    "\060\001\002\000\004\031\063\001\002\000\014\035\055" +
    "\036\051\050\017\057\021\072\054\001\002\000\024\035" +
    "\uffbe\036\uffbe\037\uffbe\047\uffbe\050\uffbe\057\uffbe\070\uffbe" +
    "\071\uffbe\072\uffbe\001\002\000\024\035\uffbf\036\uffbf\037" +
    "\uffbf\047\uffbf\050\uffbf\057\uffbf\070\uffbf\071\uffbf\072\uffbf" +
    "\001\002\000\014\035\055\036\051\050\017\057\021\072" +
    "\054\001\002\000\014\035\055\036\051\050\017\057\021" +
    "\072\054\001\002\000\024\035\uffc0\036\uffc0\037\uffc0\047" +
    "\uffc0\050\uffc0\057\uffc0\070\057\071\uffc0\072\uffc0\001\002" +
    "\000\024\035\uffc1\036\uffc1\037\uffc1\047\uffc1\050\uffc1\057" +
    "\uffc1\070\uffc1\071\uffc1\072\uffc1\001\002\000\014\005\065" +
    "\006\066\035\067\050\070\052\064\001\002\000\024\035" +
    "\uffbb\036\uffbb\037\uffbb\047\uffbb\050\uffbb\057\uffbb\070\uffbb" +
    "\071\uffbb\072\uffbb\001\002\000\004\005\071\001\002\000" +
    "\024\035\uffb8\036\uffb8\037\uffb8\047\uffb8\050\uffb8\057\uffb8" +
    "\070\uffb8\071\uffb8\072\uffb8\001\002\000\024\035\uffbc\036" +
    "\uffbc\037\uffbc\047\uffbc\050\uffbc\057\uffbc\070\uffbc\071\uffbc" +
    "\072\uffbc\001\002\000\024\035\uffba\036\uffba\037\uffba\047" +
    "\uffba\050\uffba\057\uffba\070\uffba\071\uffba\072\uffba\001\002" +
    "\000\024\035\uffb9\036\uffb9\037\uffb9\047\uffb9\050\uffb9\057" +
    "\uffb9\070\uffb9\071\uffb9\072\uffb9\001\002\000\010\034\075" +
    "\050\017\057\021\001\002\000\004\037\uffb4\001\002\000" +
    "\006\033\077\034\100\001\002\000\006\050\017\057\021" +
    "\001\002\000\004\037\uffad\001\002\000\012\036\103\050" +
    "\017\052\104\057\021\001\002\000\004\037\uffae\001\002" +
    "\000\016\024\uffde\025\uffde\026\114\027\113\037\uffde\047" +
    "\uffde\001\002\000\016\024\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\037\uffd9\047\uffd9\001\002\000\012\036\103\050\017\052" +
    "\104\057\021\001\002\000\016\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\037\uffda\047\uffda\001\002\000\004\037\uffaf\001" +
    "\002\000\016\024\uffdb\025\uffdb\026\uffdb\027\uffdb\037\uffdb" +
    "\047\uffdb\001\002\000\012\024\111\025\110\037\uffe1\047" +
    "\uffe1\001\002\000\012\036\103\050\017\052\104\057\021" +
    "\001\002\000\012\036\103\050\017\052\104\057\021\001" +
    "\002\000\016\024\uffe0\025\uffe0\026\114\027\113\037\uffe0" +
    "\047\uffe0\001\002\000\012\036\103\050\017\052\104\057" +
    "\021\001\002\000\012\036\103\050\017\052\104\057\021" +
    "\001\002\000\016\024\uffdd\025\uffdd\026\uffdd\027\uffdd\037" +
    "\uffdd\047\uffdd\001\002\000\016\024\uffdc\025\uffdc\026\uffdc" +
    "\027\uffdc\037\uffdc\047\uffdc\001\002\000\016\024\uffdf\025" +
    "\uffdf\026\114\027\113\037\uffdf\047\uffdf\001\002\000\010" +
    "\024\111\025\110\037\121\001\002\000\016\024\uffd8\025" +
    "\uffd8\026\uffd8\027\uffd8\037\uffd8\047\uffd8\001\002\000\010" +
    "\037\123\070\057\071\060\001\002\000\024\035\uffbd\036" +
    "\uffbd\037\uffbd\047\uffbd\050\uffbd\057\uffbd\070\uffbd\071\uffbd" +
    "\072\uffbd\001\002\000\004\052\125\001\002\000\004\047" +
    "\126\001\002\000\014\035\055\036\051\050\017\057\021" +
    "\072\054\001\002\000\010\047\130\070\057\071\060\001" +
    "\002\000\010\034\075\050\017\057\021\001\002\000\004" +
    "\037\uffb3\001\002\000\030\003\025\012\013\016\031\021" +
    "\036\050\017\056\024\057\021\061\026\062\035\063\032" +
    "\064\012\001\002\000\032\003\025\012\013\016\031\021" +
    "\036\022\134\050\017\056\024\057\021\061\026\062\035" +
    "\063\032\064\012\001\002\000\046\003\uffb5\012\uffb5\013" +
    "\uffb5\014\uffb5\016\uffb5\017\uffb5\021\uffb5\022\uffb5\032\uffb5" +
    "\050\uffb5\054\uffb5\056\uffb5\057\uffb5\061\uffb5\062\uffb5\063" +
    "\uffb5\064\uffb5\067\uffb5\001\002\000\046\003\ufffa\012\ufffa" +
    "\013\ufffa\014\ufffa\016\ufffa\017\ufffa\021\ufffa\022\ufffa\032" +
    "\ufffa\050\ufffa\054\ufffa\056\ufffa\057\ufffa\061\ufffa\062\ufffa" +
    "\063\ufffa\064\ufffa\067\ufffa\001\002\000\046\003\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\016\ufff0\017\ufff0\021\ufff0\022\ufff0" +
    "\032\ufff0\050\ufff0\054\ufff0\056\ufff0\057\ufff0\061\ufff0\062" +
    "\ufff0\063\ufff0\064\ufff0\067\ufff0\001\002\000\046\003\ufff8" +
    "\012\ufff8\013\ufff8\014\ufff8\016\ufff8\017\ufff8\021\ufff8\022" +
    "\ufff8\032\ufff8\050\ufff8\054\ufff8\056\ufff8\057\ufff8\061\ufff8" +
    "\062\ufff8\063\ufff8\064\ufff8\067\ufff8\001\002\000\046\003" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\016\ufff6\017\ufff6\021\ufff6" +
    "\022\ufff6\032\ufff6\050\ufff6\054\ufff6\056\ufff6\057\ufff6\061" +
    "\ufff6\062\ufff6\063\ufff6\064\ufff6\067\ufff6\001\002\000\046" +
    "\003\ufff4\012\ufff4\013\ufff4\014\ufff4\016\ufff4\017\ufff4\021" +
    "\ufff4\022\ufff4\032\ufff4\050\ufff4\054\ufff4\056\ufff4\057\ufff4" +
    "\061\ufff4\062\ufff4\063\ufff4\064\ufff4\067\ufff4\001\002\000" +
    "\046\003\uffee\012\uffee\013\uffee\014\uffee\016\uffee\017\uffee" +
    "\021\uffee\022\uffee\032\uffee\050\uffee\054\uffee\056\uffee\057" +
    "\uffee\061\uffee\062\uffee\063\uffee\064\uffee\067\uffee\001\002" +
    "\000\046\003\ufff2\012\ufff2\013\ufff2\014\ufff2\016\ufff2\017" +
    "\ufff2\021\ufff2\022\ufff2\032\ufff2\050\ufff2\054\ufff2\056\ufff2" +
    "\057\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\067\ufff2\001" +
    "\002\000\046\003\uffea\012\uffea\013\uffea\014\uffea\016\uffea" +
    "\017\uffea\021\uffea\022\uffea\032\uffea\050\uffea\054\uffea\056" +
    "\uffea\057\uffea\061\uffea\062\uffea\063\uffea\064\uffea\067\uffea" +
    "\001\002\000\046\003\uffec\012\uffec\013\uffec\014\uffec\016" +
    "\uffec\017\uffec\021\uffec\022\uffec\032\uffec\050\uffec\054\uffec" +
    "\056\uffec\057\uffec\061\uffec\062\uffec\063\uffec\064\uffec\067" +
    "\uffec\001\002\000\006\050\017\057\021\001\002\000\004" +
    "\037\150\001\002\000\004\047\151\001\002\000\046\003" +
    "\uffb0\012\uffb0\013\uffb0\014\uffb0\016\uffb0\017\uffb0\021\uffb0" +
    "\022\uffb0\032\uffb0\050\uffb0\054\uffb0\056\uffb0\057\uffb0\061" +
    "\uffb0\062\uffb0\063\uffb0\064\uffb0\067\uffb0\001\002\000\006" +
    "\050\017\057\021\001\002\000\004\037\154\001\002\000" +
    "\004\047\155\001\002\000\046\003\uffb1\012\uffb1\013\uffb1" +
    "\014\uffb1\016\uffb1\017\uffb1\021\uffb1\022\uffb1\032\uffb1\050" +
    "\uffb1\054\uffb1\056\uffb1\057\uffb1\061\uffb1\062\uffb1\063\uffb1" +
    "\064\uffb1\067\uffb1\001\002\000\014\035\055\036\051\050" +
    "\017\057\021\072\054\001\002\000\010\037\160\070\057" +
    "\071\060\001\002\000\004\020\161\001\002\000\030\003" +
    "\025\012\013\016\031\021\036\050\017\056\024\057\021" +
    "\061\026\062\035\063\032\064\012\001\002\000\032\003" +
    "\025\012\013\016\031\017\163\021\036\050\017\056\024" +
    "\057\021\061\026\062\035\063\032\064\012\001\002\000" +
    "\046\003\uffb6\012\uffb6\013\uffb6\014\uffb6\016\uffb6\017\uffb6" +
    "\021\uffb6\022\uffb6\032\uffb6\050\uffb6\054\uffb6\056\uffb6\057" +
    "\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\067\uffb6\001\002" +
    "\000\004\047\165\001\002\000\046\003\uffb2\012\uffb2\013" +
    "\uffb2\014\uffb2\016\uffb2\017\uffb2\021\uffb2\022\uffb2\032\uffb2" +
    "\050\uffb2\054\uffb2\056\uffb2\057\uffb2\061\uffb2\062\uffb2\063" +
    "\uffb2\064\uffb2\067\uffb2\001\002\000\046\003\uffc5\012\uffc5" +
    "\013\uffc5\014\uffc5\016\uffc5\017\uffc5\021\uffc5\022\uffc5\032" +
    "\uffc5\050\uffc5\054\uffc5\056\uffc5\057\uffc5\061\uffc5\062\uffc5" +
    "\063\uffc5\064\uffc5\067\uffc5\001\002\000\004\055\170\001" +
    "\002\000\010\010\172\011\171\060\173\001\002\000\010" +
    "\023\216\044\215\047\214\001\002\000\010\023\202\044" +
    "\201\047\200\001\002\000\006\023\175\047\174\001\002" +
    "\000\046\003\uffc7\012\uffc7\013\uffc7\014\uffc7\016\uffc7\017" +
    "\uffc7\021\uffc7\022\uffc7\032\uffc7\050\uffc7\054\uffc7\056\uffc7" +
    "\057\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\067\uffc7\001" +
    "\002\000\004\035\176\001\002\000\004\047\177\001\002" +
    "\000\046\003\uffc6\012\uffc6\013\uffc6\014\uffc6\016\uffc6\017" +
    "\uffc6\021\uffc6\022\uffc6\032\uffc6\050\uffc6\054\uffc6\056\uffc6" +
    "\057\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\067\uffc6\001" +
    "\002\000\046\003\uffd0\012\uffd0\013\uffd0\014\uffd0\016\uffd0" +
    "\017\uffd0\021\uffd0\022\uffd0\032\uffd0\050\uffd0\054\uffd0\056" +
    "\uffd0\057\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\067\uffd0" +
    "\001\002\000\004\052\205\001\002\000\012\036\103\050" +
    "\017\052\104\057\021\001\002\000\004\047\204\001\002" +
    "\000\046\003\uffcf\012\uffcf\013\uffcf\014\uffcf\016\uffcf\017" +
    "\uffcf\021\uffcf\022\uffcf\032\uffcf\050\uffcf\054\uffcf\056\uffcf" +
    "\057\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\067\uffcf\001" +
    "\002\000\004\045\206\001\002\000\006\044\210\047\207" +
    "\001\002\000\046\003\uffcd\012\uffcd\013\uffcd\014\uffcd\016" +
    "\uffcd\017\uffcd\021\uffcd\022\uffcd\032\uffcd\050\uffcd\054\uffcd" +
    "\056\uffcd\057\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\067" +
    "\uffcd\001\002\000\004\052\211\001\002\000\004\045\212" +
    "\001\002\000\004\047\213\001\002\000\046\003\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\016\uffcc\017\uffcc\021\uffcc\022\uffcc" +
    "\032\uffcc\050\uffcc\054\uffcc\056\uffcc\057\uffcc\061\uffcc\062" +
    "\uffcc\063\uffcc\064\uffcc\067\uffcc\001\002\000\046\003\uffcb" +
    "\012\uffcb\013\uffcb\014\uffcb\016\uffcb\017\uffcb\021\uffcb\022" +
    "\uffcb\032\uffcb\050\uffcb\054\uffcb\056\uffcb\057\uffcb\061\uffcb" +
    "\062\uffcb\063\uffcb\064\uffcb\067\uffcb\001\002\000\004\052" +
    "\221\001\002\000\004\006\217\001\002\000\004\047\220" +
    "\001\002\000\046\003\uffca\012\uffca\013\uffca\014\uffca\016" +
    "\uffca\017\uffca\021\uffca\022\uffca\032\uffca\050\uffca\054\uffca" +
    "\056\uffca\057\uffca\061\uffca\062\uffca\063\uffca\064\uffca\067" +
    "\uffca\001\002\000\004\045\222\001\002\000\006\044\224" +
    "\047\223\001\002\000\046\003\uffc9\012\uffc9\013\uffc9\014" +
    "\uffc9\016\uffc9\017\uffc9\021\uffc9\022\uffc9\032\uffc9\050\uffc9" +
    "\054\uffc9\056\uffc9\057\uffc9\061\uffc9\062\uffc9\063\uffc9\064" +
    "\uffc9\067\uffc9\001\002\000\004\052\225\001\002\000\004" +
    "\045\226\001\002\000\004\047\227\001\002\000\046\003" +
    "\uffc8\012\uffc8\013\uffc8\014\uffc8\016\uffc8\017\uffc8\021\uffc8" +
    "\022\uffc8\032\uffc8\050\uffc8\054\uffc8\056\uffc8\057\uffc8\061" +
    "\uffc8\062\uffc8\063\uffc8\064\uffc8\067\uffc8\001\002\000\014" +
    "\037\uffe4\047\uffe4\050\017\052\234\057\021\001\002\000" +
    "\012\036\103\050\017\052\104\057\021\001\002\000\004" +
    "\047\233\001\002\000\046\003\uffce\012\uffce\013\uffce\014" +
    "\uffce\016\uffce\017\uffce\021\uffce\022\uffce\032\uffce\050\uffce" +
    "\054\uffce\056\uffce\057\uffce\061\uffce\062\uffce\063\uffce\064" +
    "\uffce\067\uffce\001\002\000\006\037\uffe7\047\uffe7\001\002" +
    "\000\006\037\uffe8\047\uffe8\001\002\000\006\037\240\047" +
    "\237\001\002\000\010\050\017\052\242\057\021\001\002" +
    "\000\004\047\241\001\002\000\046\003\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\016\uffd1\017\uffd1\021\uffd1\022\uffd1\032\uffd1" +
    "\050\uffd1\054\uffd1\056\uffd1\057\uffd1\061\uffd1\062\uffd1\063" +
    "\uffd1\064\uffd1\067\uffd1\001\002\000\006\037\uffe5\047\uffe5" +
    "\001\002\000\006\037\uffe6\047\uffe6\001\002\000\006\002" +
    "\000\040\245\001\002\000\004\010\277\001\002\000\006" +
    "\002\ufffe\040\247\001\002\000\004\010\250\001\002\000" +
    "\006\050\017\057\021\001\002\000\004\036\252\001\002" +
    "\000\006\010\254\037\255\001\002\000\006\037\266\047" +
    "\265\001\002\000\006\050\017\057\021\001\002\000\030" +
    "\003\025\012\013\016\031\021\036\050\017\056\024\057" +
    "\021\061\026\062\035\063\032\064\012\001\002\000\032" +
    "\003\025\012\013\016\031\021\036\032\257\050\017\056" +
    "\024\057\021\061\026\062\035\063\032\064\012\001\002" +
    "\000\004\023\260\001\002\000\006\050\017\057\021\001" +
    "\002\000\004\047\262\001\002\000\004\041\263\001\002" +
    "\000\006\002\uffd5\040\uffd5\001\002\000\006\037\uffe3\047" +
    "\uffe3\001\002\000\004\010\275\001\002\000\030\003\025" +
    "\012\013\016\031\021\036\050\017\056\024\057\021\061" +
    "\026\062\035\063\032\064\012\001\002\000\032\003\025" +
    "\012\013\016\031\021\036\032\270\050\017\056\024\057" +
    "\021\061\026\062\035\063\032\064\012\001\002\000\004" +
    "\023\271\001\002\000\006\050\017\057\021\001\002\000" +
    "\004\047\273\001\002\000\004\041\274\001\002\000\006" +
    "\002\uffd4\040\uffd4\001\002\000\006\050\017\057\021\001" +
    "\002\000\006\037\uffe2\047\uffe2\001\002\000\006\050\017" +
    "\057\021\001\002\000\004\036\301\001\002\000\006\010" +
    "\254\037\303\001\002\000\006\037\312\047\265\001\002" +
    "\000\030\003\025\012\013\016\031\021\036\050\017\056" +
    "\024\057\021\061\026\062\035\063\032\064\012\001\002" +
    "\000\032\003\025\012\013\016\031\021\036\032\305\050" +
    "\017\056\024\057\021\061\026\062\035\063\032\064\012" +
    "\001\002\000\004\023\306\001\002\000\006\050\017\057" +
    "\021\001\002\000\004\047\310\001\002\000\004\041\311" +
    "\001\002\000\006\002\uffd7\040\uffd7\001\002\000\030\003" +
    "\025\012\013\016\031\021\036\050\017\056\024\057\021" +
    "\061\026\062\035\063\032\064\012\001\002\000\032\003" +
    "\025\012\013\016\031\021\036\032\314\050\017\056\024" +
    "\057\021\061\026\062\035\063\032\064\012\001\002\000" +
    "\004\023\315\001\002\000\006\050\017\057\021\001\002" +
    "\000\004\047\317\001\002\000\004\041\320\001\002\000" +
    "\006\002\uffd6\040\uffd6\001\002\000\014\035\055\036\051" +
    "\050\017\057\021\072\054\001\002\000\022\035\uffc2\036" +
    "\uffc2\037\uffc2\050\uffc2\057\uffc2\070\057\071\060\072\uffc2" +
    "\001\002\000\016\035\055\036\051\037\325\050\017\057" +
    "\021\072\054\001\002\000\022\035\uffc3\036\uffc3\037\uffc3" +
    "\050\uffc3\057\uffc3\070\057\071\060\072\uffc3\001\002\000" +
    "\004\015\326\001\002\000\030\003\025\012\013\016\031" +
    "\021\036\050\017\056\024\057\021\061\026\062\035\063" +
    "\032\064\012\001\002\000\034\003\025\012\013\013\331" +
    "\014\330\016\031\021\036\050\017\056\024\057\021\061" +
    "\026\062\035\063\032\064\012\001\002\000\030\003\025" +
    "\012\013\016\031\021\036\050\017\056\024\057\021\061" +
    "\026\062\035\063\032\064\012\001\002\000\046\003\uffc4" +
    "\012\uffc4\013\uffc4\014\uffc4\016\uffc4\017\uffc4\021\uffc4\022" +
    "\uffc4\032\uffc4\050\uffc4\054\uffc4\056\uffc4\057\uffc4\061\uffc4" +
    "\062\uffc4\063\uffc4\064\uffc4\067\uffc4\001\002\000\032\003" +
    "\025\012\013\013\333\016\031\021\036\050\017\056\024" +
    "\057\021\061\026\062\035\063\032\064\012\001\002\000" +
    "\046\003\uffb7\012\uffb7\013\uffb7\014\uffb7\016\uffb7\017\uffb7" +
    "\021\uffb7\022\uffb7\032\uffb7\050\uffb7\054\uffb7\056\uffb7\057" +
    "\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\067\uffb7\001\002" +
    "\000\006\050\017\057\021\001\002\000\004\037\336\001" +
    "\002\000\004\066\337\001\002\000\010\006\355\050\017" +
    "\057\021\001\002\000\006\065\342\066\341\001\002\000" +
    "\010\006\343\050\017\057\021\001\002\000\046\003\uffac" +
    "\012\uffac\013\uffac\014\uffac\016\uffac\017\uffac\021\uffac\022" +
    "\uffac\032\uffac\050\uffac\054\uffac\056\uffac\057\uffac\061\uffac" +
    "\062\uffac\063\uffac\064\uffac\067\uffac\001\002\000\004\023" +
    "\351\001\002\000\004\023\345\001\002\000\030\003\025" +
    "\012\013\016\031\021\036\050\017\056\024\057\021\061" +
    "\026\062\035\063\032\064\012\001\002\000\032\003\025" +
    "\012\013\016\031\021\036\050\017\056\024\057\021\061" +
    "\026\062\035\063\032\064\012\067\347\001\002\000\004" +
    "\047\350\001\002\000\006\065\uffa9\066\uffa9\001\002\000" +
    "\030\003\025\012\013\016\031\021\036\050\017\056\024" +
    "\057\021\061\026\062\035\063\032\064\012\001\002\000" +
    "\032\003\025\012\013\016\031\021\036\050\017\056\024" +
    "\057\021\061\026\062\035\063\032\064\012\067\353\001" +
    "\002\000\004\047\354\001\002\000\006\065\uffab\066\uffab" +
    "\001\002\000\004\023\363\001\002\000\004\023\357\001" +
    "\002\000\030\003\025\012\013\016\031\021\036\050\017" +
    "\056\024\057\021\061\026\062\035\063\032\064\012\001" +
    "\002\000\032\003\025\012\013\016\031\021\036\050\017" +
    "\056\024\057\021\061\026\062\035\063\032\064\012\067" +
    "\361\001\002\000\004\047\362\001\002\000\006\065\uffa8" +
    "\066\uffa8\001\002\000\030\003\025\012\013\016\031\021" +
    "\036\050\017\056\024\057\021\061\026\062\035\063\032" +
    "\064\012\001\002\000\032\003\025\012\013\016\031\021" +
    "\036\050\017\056\024\057\021\061\026\062\035\063\032" +
    "\064\012\067\365\001\002\000\004\047\366\001\002\000" +
    "\006\065\uffaa\066\uffaa\001\002\000\032\003\025\012\013" +
    "\016\031\021\036\050\017\054\371\056\024\057\021\061" +
    "\026\062\035\063\032\064\012\001\002\000\004\002\ufffc" +
    "\001\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\004\002\005\001\001\000\030\003\366\004" +
    "\013\006\017\007\021\010\026\011\033\014\015\015\027" +
    "\016\036\020\022\022\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\014\004\013\006\017\007\021\010\026\011\033\014" +
    "\015\015\027\016\036\020\022\022\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\134\006\136\007\137\010\140\011\142\014\135\015\141" +
    "\016\144\020\022\022\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\166\001\001\000" +
    "\002\001\001\000\004\020\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\051\020\052\001\001\000\006" +
    "\012\121\020\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\055\020\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\061\020\052\001\001\000" +
    "\006\012\060\020\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\072\020\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\075\001\001" +
    "\000\002\001\001\000\014\020\101\024\104\025\106\026" +
    "\100\027\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\020\101\025\117\026\100\027" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\101\026\116\027" +
    "\105\001\001\000\010\020\101\026\111\027\105\001\001" +
    "\000\002\001\001\000\006\020\101\027\115\001\001\000" +
    "\006\020\101\027\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\126\020\052\001\001\000" +
    "\002\001\001\000\006\005\130\020\073\001\001\000\002" +
    "\001\001\000\030\003\132\004\013\006\017\007\021\010" +
    "\026\011\033\014\015\015\027\016\036\020\022\022\032" +
    "\001\001\000\026\004\134\006\136\007\137\010\140\011" +
    "\142\014\135\015\141\016\144\020\022\022\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\156\020\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\161\004\013\006\017\007\021\010\026" +
    "\011\033\014\015\015\027\016\036\020\022\022\032\001" +
    "\001\000\026\004\134\006\136\007\137\010\140\011\142" +
    "\014\135\015\141\016\144\020\022\022\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\020\101\024\202" +
    "\025\106\026\100\027\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\234\031\235\001\001\000\014\020\101" +
    "\024\231\025\106\026\100\027\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\250\001\001\000\002" +
    "\001\001\000\004\030\252\001\001\000\002\001\001\000" +
    "\004\020\263\001\001\000\030\003\255\004\013\006\017" +
    "\007\021\010\026\011\033\014\015\015\027\016\036\020" +
    "\022\022\032\001\001\000\026\004\134\006\136\007\137" +
    "\010\140\011\142\014\135\015\141\016\144\020\022\022" +
    "\143\001\001\000\002\001\001\000\004\020\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\266\004\013" +
    "\006\017\007\021\010\026\011\033\014\015\015\027\016" +
    "\036\020\022\022\032\001\001\000\026\004\134\006\136" +
    "\007\137\010\140\011\142\014\135\015\141\016\144\020" +
    "\022\022\143\001\001\000\002\001\001\000\004\020\271" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\275\001\001\000\002\001\001\000\004" +
    "\020\277\001\001\000\002\001\001\000\004\030\301\001" +
    "\001\000\002\001\001\000\030\003\303\004\013\006\017" +
    "\007\021\010\026\011\033\014\015\015\027\016\036\020" +
    "\022\022\032\001\001\000\026\004\134\006\136\007\137" +
    "\010\140\011\142\014\135\015\141\016\144\020\022\022" +
    "\143\001\001\000\002\001\001\000\004\020\306\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\312\004\013\006\017\007\021\010\026\011\033" +
    "\014\015\015\027\016\036\020\022\022\032\001\001\000" +
    "\026\004\134\006\136\007\137\010\140\011\142\014\135" +
    "\015\141\016\144\020\022\022\143\001\001\000\002\001" +
    "\001\000\004\020\315\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\321\020\052\023" +
    "\322\001\001\000\002\001\001\000\006\012\323\020\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\326\004\013\006\017\007\021\010\026\011\033\014\015" +
    "\015\027\016\036\020\022\022\032\001\001\000\026\004" +
    "\134\006\136\007\137\010\140\011\142\014\135\015\141" +
    "\016\144\020\022\022\143\001\001\000\030\003\331\004" +
    "\013\006\017\007\021\010\026\011\033\014\015\015\027" +
    "\016\036\020\022\022\032\001\001\000\002\001\001\000" +
    "\026\004\134\006\136\007\137\010\140\011\142\014\135" +
    "\015\141\016\144\020\022\022\143\001\001\000\002\001" +
    "\001\000\004\020\334\001\001\000\002\001\001\000\004" +
    "\017\337\001\001\000\004\020\355\001\001\000\002\001" +
    "\001\000\004\020\343\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\345\004\013\006" +
    "\017\007\021\010\026\011\033\014\015\015\027\016\036" +
    "\020\022\022\032\001\001\000\026\004\134\006\136\007" +
    "\137\010\140\011\142\014\135\015\141\016\144\020\022" +
    "\022\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\351\004\013\006\017\007\021\010\026\011\033" +
    "\014\015\015\027\016\036\020\022\022\032\001\001\000" +
    "\026\004\134\006\136\007\137\010\140\011\142\014\135" +
    "\015\141\016\144\020\022\022\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\357\004\013\006\017\007\021\010\026\011" +
    "\033\014\015\015\027\016\036\020\022\022\032\001\001" +
    "\000\026\004\134\006\136\007\137\010\140\011\142\014" +
    "\135\015\141\016\144\020\022\022\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\363\004\013\006" +
    "\017\007\021\010\026\011\033\014\015\015\027\016\036" +
    "\020\022\022\032\001\001\000\026\004\134\006\136\007" +
    "\137\010\140\011\142\014\135\015\141\016\144\020\022" +
    "\022\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\004\134\006\136\007\137\010\140\011\142\014\135" +
    "\015\141\016\144\020\022\022\143\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
        String error = "";
        if(s.value != null){
            error = "Error Sintactico en la linea "+s.right+ " Columna "+(s.left+1)+ ". No se esperaba esto: "+ "\""+ s.value+ "\""+ "\n" ;
           System.out.print(error);
        }
        //errores.add(error)
    }
    


    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CASE ::= When Identificadoroletra Igual SENTENCIA Stop P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                Node raiz = new Node("Raiz",false);
                Node x = new Node("CASE",false);
                x.addHijo((Node)h1);
                Node THEN = new Node("THEN",false);
                for(int i = 0;i<((Node)h2).getHijos().size();i++){
                THEN.addHijo(((Node)h2).getHijos().get(i));
                }
                x.addHijo(THEN);
                raiz.addHijo(x);
                RESULT = raiz;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CASE ::= CASE When Identificadoroletra Igual SENTENCIA Stop P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                
                Node raiz = new Node("ROOT",false);
                for(int i = 0;i<((Node)h1).getHijos().size();i++){
                raiz.addHijo(((Node)h1).getHijos().get(i));
                }
                Node x = new Node("CASE",false);
                x.addHijo((Node)h2);
                Node THEN = new Node("THEN",false);
                for(int i = 0;i<((Node)h3).getHijos().size();i++){
                THEN.addHijo(((Node)h3).getHijos().get(i));
                }
                x.addHijo(THEN);
                raiz.addHijo(x);
                RESULT = raiz;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CASE ::= When Caracter Igual SENTENCIA Stop P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                Node raiz = new Node("ROOT",false);
                Node x = new Node("CHAR-CASE",false);
                x.addHijo(new Node((h1.toString()).substring(1,2),false));
                Node THEN = new Node("THEN",false);
                for(int i = 0;i<((Node)h2).getHijos().size();i++){
                THEN.addHijo(((Node)h2).getHijos().get(i));
                }
                x.addHijo(THEN);
                raiz.addHijo(x);
                RESULT = raiz;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CASE ::= CASE When Caracter Igual SENTENCIA Stop P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                
                Node raiz = new Node("ROOT",false);
                for(int i = 0;i<((Node)h1).getHijos().size();i++){
                raiz.addHijo(((Node)h1).getHijos().get(i));
                }
                Node x = new Node("CHAR-CASE",false);
                x.addHijo(new Node((h2.toString()).substring(1,2),false));
                Node THEN = new Node("THEN",false);
                for(int i = 0;i<((Node)h3).getHijos().size();i++){
                THEN.addHijo(((Node)h3).getHijos().get(i));
                }
                x.addHijo(THEN);
                raiz.addHijo(x);
                RESULT = raiz;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // MATCH ::= OpenMatch Parentesis_a Identificadoroletra Parentesis_c CASE CloseMatch 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
          Node x = new Node("OPENMATCH",false);
          x.addHijo((Node)h1);
          for(int i = 0;i<((Node)h2).getHijos().size();i++){
                x.addHijo(((Node)h2).getHijos().get(i));
           }
          RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MATCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION_FOR ::= Op_incremento Identificadoroletra 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("FOR DECLARATION",false);
                x.addHijo((Node)h1);
                x.addHijo(new Node(h2.toString(),false));
                RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION_FOR ::= Identificadoroletra Op_incremento 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("FOR DECLARATION",false);
                x.addHijo((Node)h1);
                x.addHijo(new Node(h2.toString(),false));
                RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARACION_FOR ::= Identificadoroletra Op_atribucion EXP 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node x = new Node("FOR DECLARATION",false);
        x.addHijo((Node)h1);
        x.addHijo(new Node(h2.toString(),false));
        x.addHijo((Node)h3);
        RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ESCRITURA ::= Throwln Parentesis_a Identificadoroletra Parentesis_c P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    Node x = new Node("THROWLN",false);
                    x.addHijo((Node)h1);
                    RESULT = x;
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ESCRITURA ::= THrow Parentesis_a Identificadoroletra Parentesis_c P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    Node x = new Node("THROW",false);
                    x.addHijo((Node)h1);
                    RESULT = x;
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LECTURA ::= Eat Identificadoroletra P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                Node x = new Node("EAT",false);
                x.addHijo((Node)h1);
                RESULT = x;
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LECTURA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA_FOR ::= Int Identificadoroletra Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node raiz = new Node("ROOT",false);
            Node x = new Node("FOR STATEMENT",false);
            
            x.addHijo((Node)h1);
            x.addHijo(new Node(n.toString(),false));
            raiz.addHijo(x);
            raiz.addHijo((Node)h2);
            raiz.addHijo((Node)h3);
            RESULT = raiz;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FOR ::= OpenFor Parentesis_a SENTENCIA_FOR Parentesis_c SENTENCIA CloseFor 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                Node x = new Node("FOR",false);
                for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
                 }
           
                Node x2 = new Node("THEN",false);
                for(int i = 0;i<((Node)h2).getHijos().size();i++){
                x2.addHijo(((Node)h2).getHijos().get(i));
                }
                x.addHijo(x2);
                RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // UNTIL ::= OpenUntil Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Do SENTENCIA CloseUntil 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                Node x = new Node("UNTIL",false);
                x.addHijo((Node)h1);
                Node x2 = new Node("DO",false);
                for(int i = 0;i<((Node)h2).getHijos().size();i++){
                    x2.addHijo(((Node)h2).getHijos().get(i));
                }
                x.addHijo(x2);
                RESULT = x;

        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNTIL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IF_ELSE ::= OpenTest Parentesis_a LISTABOOL Parentesis_c Then SENTENCIA Or SENTENCIA CloseTest 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
           Node x = new Node("TEST",false);
           Node x2 = new Node("THEN",false);
           for(int i = 0;i<((Node)h2).getHijos().size();i++){
                x2.addHijo(((Node)h2).getHijos().get(i));
           }
            for(int i = 0;i<((Node)h1).getHijos().size();i++){
                        x.addHijo(((Node)h1).getHijos().get(i));
           }
           Node x3 = new Node("OR",false);
           for(int i = 0;i<((Node)h3).getHijos().size();i++){
                x3.addHijo(((Node)h3).getHijos().get(i));
           }
           x.addHijo(x2);
           x.addHijo(x3);
            RESULT = x;
            
           
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_BOOLEANA ::= Identificadoroletra Op_relacional Caracter 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
            Node x = new Node("BOOLEAN STATEMENT",false);
            
            Node x3 = new Node(h2.toString(),false);
            Node x4 = new Node(h3.toString(),false);
            x.addHijo((Node)h1);
            x.addHijo(x3);
            x.addHijo(x4);
            RESULT = x;
           
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_BOOLEANA ::= Identificadoroletra Op_relacional Comillas Comillas 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
            Node x = new Node("BOOLEAN STATEMENT",false);
            
            Node x3 = new Node(h2.toString(),false);
            Node x4 = new Node(" ",false);
            x.addHijo((Node)h1);
            x.addHijo(x3);
            x.addHijo(x4);
            RESULT = x;
           
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_BOOLEANA ::= Identificadoroletra Op_relacional Identificador 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                    Node x = new Node("BOOLEANA STATEMENT",false);
                    
                    Node x3 = new Node(h2.toString(),false);
                    Node x4 = new Node(h3.toString(),false);
                    x.addHijo((Node)h1);
                    x.addHijo(x3);
                    x.addHijo(x4);
                    RESULT = x;
           
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_BOOLEANA ::= Identificadoroletra Op_relacional Numero 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Node x = new Node("BOOLEAN STATEMENT",false);
                
                Node x3 = new Node(h2.toString(),false);
                Node x4 = new Node(h3.toString(),false);
                x.addHijo((Node)h1);
                x.addHijo(x3);
                x.addHijo(x4);
                RESULT = x;
           
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA_BOOLEANA ::= Identificadoroletra Op_relacional Op_booleano 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
            Node x = new Node("BOOLEAN STATEMENT",false);
            
            Node x3 = new Node(h2.toString(),false);
            Node x4 = new Node(h3.toString(),false);
            x.addHijo((Node)h1);
            x.addHijo(x3);
            x.addHijo(x4);
            RESULT = x;
           
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_BOOLEANA ::= Parentesis_a SENTENCIA_BOOLEANA Parentesis_c 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            
            RESULT = h1;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
            Node x = new Node("BOOLEAN SATEMENT",false);
            Node x2 = new Node(h2.toString(),false);
            x.addHijo(x2);
            RESULT = x;
           
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_BOOLEANA ::= NOT SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("BOOLEAN SATEMENT",false);
                Node not = new Node("!",false);
                for(int i = 0;i<((Node)h1).getHijos().size();i++){
                        not.addHijo(((Node)h1).getHijos().get(i));
                     }
                x.addHijo(not);
                RESULT = x;
                
              
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA OR SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("BOOLEAN SATEMENT",false);
                Node or = new Node("|",false);
                for(int i = 0;i<((Node)h1).getHijos().size();i++){
                        or.addHijo(((Node)h1).getHijos().get(i));
                     }
                for(int i = 0;i<((Node)h2).getHijos().size();i++){
                        or.addHijo(((Node)h2).getHijos().get(i));
                     }
                x.addHijo(or);
                RESULT = x;
              
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA AND SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("BOOLEAN SATEMENT",false);
                Node and = new Node("&",false);
                for(int i = 0;i<((Node)h1).getHijos().size();i++){
                        and.addHijo(((Node)h1).getHijos().get(i));
                     }
               
                
                for(int i = 0;i<((Node)h2).getHijos().size();i++){
                        and.addHijo(((Node)h2).getHijos().get(i));
                     }
                x.addHijo(and);
                RESULT = x;
              
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LISTABOOL ::= SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    Node Raiz = new Node("raiz",false);
                    Raiz.addHijo((Node)h1);
                    RESULT = Raiz;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTABOOL",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LISTABOOL ::= LISTABOOL SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    Node Raiz = new Node("raiz",false);
                    for(int i = 0;i<((Node)h1).getHijos().size();i++){
                        Raiz.addHijo(((Node)h1).getHijos().get(i));
                     }
                     for(int i = 0;i<((Node)h2).getHijos().size();i++){
                        Raiz.addHijo(((Node)h2).getHijos().get(i));
                     }
                     RESULT =Raiz;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTABOOL",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IF ::= OpenTest Parentesis_a LISTABOOL Parentesis_c Then SENTENCIA CloseTest 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
           Node x = new Node("TEST",false);
           Node x2 = new Node("THEN",false);
           for(int i = 0;i<((Node)h2).getHijos().size();i++){
                x2.addHijo(((Node)h2).getHijos().get(i));
           }
           for(int i = 0;i<((Node)h1).getHijos().size();i++){
                        x.addHijo(((Node)h1).getHijos().get(i));
           }
           
           x.addHijo(x2);
           RESULT = x;
            
           
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= error P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= Define Identificadoroletra As Boolean Igual Op_booleano P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
                Node x = new Node("DECLARATION",false);
                Node x2 = new Node("boolean",false);
                
                Node x4 = new Node(b1.toString(),false);
                x.addHijo(x2);
                x.addHijo((Node)h1);
                x.addHijo(x4);
                RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= Define Identificadoroletra As Boolean P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 
                Node x = new Node("DECLARATION",false);
                Node x2 = new Node("boolean",false);
               
                x.addHijo(x2);
                x.addHijo((Node)h1);
                RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= Define Identificadoroletra As Character Corchete_a Numero Corchete_c Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
              
                Node x = new Node("DECLARATION",false);
                Node x2 = new Node("character matrix",false);
                Node x4 = new Node("["+c1.toString()+"]"+"["+c2.toString()+"]",false);
                x.addHijo(x2);
                x.addHijo((Node)h1);
                x.addHijo(x4);
                RESULT = x;
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= Define Identificadoroletra As Character Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
              
                Node x = new Node("DECLARATION",false);
                Node x2 = new Node("character array",false);
                Node x4 = new Node("["+c1.toString()+"]",false);
                x.addHijo(x2);
                x.addHijo((Node)h1);
                x.addHijo(x4);
                RESULT = x;
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Define Identificadoroletra As Character Igual Caracter P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
            Node x = new Node("DECLARATION",false);
            Node x2 = new Node("character",false);
            Node x3 = new Node(c1.toString(),false);
            x.addHijo(x2);
            x.addHijo((Node)h1);
            x.addHijo(x3);
            RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= Define Identificadoroletra As Character P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 
            Node x = new Node("DECLARATION",false);
            Node x2 = new Node("character",false);
            x.addHijo(x2);
            x.addHijo((Node)h1);
            RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Define Identificadoroletra As Int Corchete_a Numero Corchete_c Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
              
                Node x = new Node("DECLARATION",false);
                Node x2 = new Node("integer matrix",false);
                Node x4 = new Node("["+n1.toString()+"]"+"["+n2.toString()+"]",false);
                x.addHijo(x2);
                x.addHijo((Node)h1);
                x.addHijo(x4);
                RESULT = x;
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= Define Identificadoroletra As Int Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
              
                Node x = new Node("DECLARATION",false);
                Node x2 = new Node("integer array",false);
                Node x4 = new Node("["+n.toString()+"]",false);
                x.addHijo(x2);
                x.addHijo((Node)h1);
                x.addHijo(x4);
                RESULT = x;
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= Identificadoroletra Igual EXP P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node x = new Node("ASSIGNMENT",false);
        x.addHijo((Node)h1);
        x.addHijo((Node)h2);
        RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= Define Identificadoroletra As Int Igual EXP P_coma 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Node x = new Node("DECLARATION",false);
        Node x2 = new Node("integer",false);
       
        x.addHijo(x2);
        x.addHijo((Node)h2);
        x.addHijo((Node)h1);
        RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= Define Identificadoroletra As Int P_coma 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 
        Node x = new Node("DECLARATION",false);
        Node x2 = new Node("integer",false);
        
        x.addHijo(x2);
        x.addHijo((Node)h2);
        RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CALLMETHOD ::= Identificadoroletra Parentesis_a PARAMETROS2 Parentesis_c P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node x = new Node("METHOD-CALL",true);
    x.addHijo((Node)h1);
    x.addHijo((Node)h2);
    RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALLMETHOD",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Identificadoroletra ::= L 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  Node x = new Node(h1.toString(),false);
            
            RESULT = x;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Identificadoroletra",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Identificadoroletra ::= Identificador 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  Node x = new Node(h1.toString(),false);
            
            RESULT = x;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Identificadoroletra",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // METHOD ::= METHOD OpenMethod Int Identificadoroletra Parentesis_a PARAMETROS Parentesis_c SENTENCIA Return Igual Identificadoroletra P_coma CloseMethod 
            {
              Object RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).right;
		Object m1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Node raiz = new Node("Raiz",false);
        for(int i = 0;i<((Node)m1).getHijos().size();i++){
                raiz.addHijo(((Node)m1).getHijos().get(i));
            }
        Node x = new Node("INTEGER METHOD",false);
        x.addHijo((Node)h1);
        for(int i = 0;i<((Node)params).getHijos().size();i++){
                x.addHijo(((Node)params).getHijos().get(i));
            }
        Node BLOCK = new Node("BLOQUE",false);
        for(int i = 0;i<((Node)h2).getHijos().size();i++){
                BLOCK.addHijo(((Node)h2).getHijos().get(i));
            }
        x.addHijo(BLOCK);
        Node RETURN = new Node("RETURN",false);
        RETURN.addHijo((Node)h3);
        x.addHijo(RETURN);
        raiz.addHijo(x);
        RESULT = raiz; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // METHOD ::= METHOD OpenMethod Int Identificadoroletra Parentesis_a Parentesis_c SENTENCIA Return Igual Identificadoroletra P_coma CloseMethod 
            {
              Object RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		Object m1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Node raiz = new Node("Raiz",false);
        for(int i = 0;i<((Node)m1).getHijos().size();i++){
                raiz.addHijo(((Node)m1).getHijos().get(i));
            }
        Node x = new Node("INTEGER METHOD",false);
        x.addHijo((Node)h1);
        
        Node BLOCK = new Node("BLOQUE",false);
        for(int i = 0;i<((Node)h2).getHijos().size();i++){
                BLOCK.addHijo(((Node)h2).getHijos().get(i));
            }
        x.addHijo(BLOCK);
        Node RETURN = new Node("RETURN",false);
        RETURN.addHijo((Node)h3);
        x.addHijo(RETURN);
        raiz.addHijo(x);
        RESULT = raiz; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // METHOD ::= OpenMethod Int Identificadoroletra Parentesis_a PARAMETROS Parentesis_c SENTENCIA Return Igual Identificadoroletra P_coma CloseMethod 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Node raiz = new Node("Raiz",false);
        Node x = new Node("INTEGER METHOD",false);
        x.addHijo((Node)h1);
        for(int i = 0;i<((Node)params).getHijos().size();i++){
                x.addHijo(((Node)params).getHijos().get(i));
            }
        Node BLOCK = new Node("BLOQUE",false);
        for(int i = 0;i<((Node)h2).getHijos().size();i++){
                BLOCK.addHijo(((Node)h2).getHijos().get(i));
            }
        x.addHijo(BLOCK);
        Node RETURN = new Node("RETURN",false);
        RETURN.addHijo((Node)h3);
        x.addHijo(RETURN);
        raiz.addHijo(x);
        RESULT =  raiz; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // METHOD ::= OpenMethod Int Identificadoroletra Parentesis_a Parentesis_c SENTENCIA Return Igual Identificadoroletra P_coma CloseMethod 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Node raiz = new Node("Raiz",false);
        Node x = new Node("INTEGER METHOD",false);
        x.addHijo((Node)h1);
        Node BLOCK = new Node("BLOQUE",false);
        for(int i = 0;i<((Node)h2).getHijos().size();i++){
                BLOCK.addHijo(((Node)h2).getHijos().get(i));
            }
        x.addHijo(BLOCK);
        Node RETURN = new Node("RETURN",false);
        RETURN.addHijo((Node)h3);
        x.addHijo(RETURN);
        raiz.addHijo(x);
        RESULT =  raiz; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // F ::= Parentesis_a E Parentesis_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            RESULT = e;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // F ::= Identificadoroletra 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = h1;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // F ::= Numero 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node x = new Node(h1.toString(),false);
            RESULT = x;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // T ::= F 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = f;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // T ::= T Division F 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node x = new Node("/",false);
        x.addHijo((Node)t);
        x.addHijo((Node)f);
        RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // T ::= T Multiplicacion F 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node x = new Node("*",false);
        x.addHijo((Node)t);
        x.addHijo((Node)f);
        RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E ::= T 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            RESULT = t;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E ::= E Resta T 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Node x = new Node("-",false);
        x.addHijo((Node)e);
        x.addHijo((Node)t);
        RESULT = x;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E ::= E Suma T 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Node x = new Node("+",false);
        x.addHijo((Node)e);
        x.addHijo((Node)t);
        RESULT = x;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXP ::= E 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = e;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMETROS ::= PARAMETROS P_coma Int Identificadoroletra 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node raiz = new Node("RAIZ",false);
        
        for(int i = 0;i<((Node)h1).getHijos().size();i++){
                raiz.addHijo(((Node)h1).getHijos().get(i));
                }
        raiz.addHijo(new Node("INTEGER",false));
           raiz.addHijo((Node)h2);
           RESULT = raiz;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARAMETROS ::= Int Identificadoroletra 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
           Node raiz = new Node("RAIZ",false);
           raiz.addHijo(new Node("INTEGER",false));
           raiz.addHijo((Node)h1);
           RESULT = raiz;
           
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARAMETROS2 ::= 
            {
              Object RESULT =null;
		
    Node raiz = new Node("PARAMETROS",false);
    RESULT = raiz;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARAMETROS2 ::= PARAMETROS2 P_coma Numero 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node raiz = new Node("PARAMETROS",false);
        
        for(int i = 0;i<((Node)h1).getHijos().size();i++){
                raiz.addHijo(((Node)h1).getHijos().get(i));
                }
           Node x = new Node(h2.toString(),false);
           raiz.addHijo(x);
           RESULT = raiz;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAMETROS2 ::= PARAMETROS2 P_coma Identificadoroletra 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node raiz = new Node("PARAMETROS",false);
        
        for(int i = 0;i<((Node)h1).getHijos().size();i++){
                raiz.addHijo(((Node)h1).getHijos().get(i));
                }
        
           raiz.addHijo((Node)h2);
           RESULT = raiz;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMETROS2 ::= Numero 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
           Node raiz = new Node("PARAMETROS",false);
           Node x = new Node(h1.toString(),false);
           raiz.addHijo(x);
           RESULT = raiz;
           
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMETROS2 ::= Identificadoroletra 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
           Node raiz = new Node("PARAMETROS",false);
           raiz.addHijo((Node)h1);
           RESULT = raiz;
           
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= CALLMETHOD 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node x = new Node("SENTENCIA",false);
            x.addHijo((Node)h2);
            RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SENTENCIA CALLMETHOD 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node x = new Node("SENTENCIA",false);
                 for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
                }
                
                x.addHijo((Node)h2);
                RESULT = x; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= MATCH 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node x = new Node("SENTENCIA",false);
            x.addHijo((Node)h2);
            RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SENTENCIA MATCH 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("SENTENCIA",false);
                 for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
                }
                
                x.addHijo((Node)h2);
                RESULT = x; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= ESCRITURA 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node x = new Node("SENTENCIA",false);
            
            x.addHijo((Node)h2);
            RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SENTENCIA ESCRITURA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("SENTENCIA",false);
                 for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
            }
                
                x.addHijo((Node)h2);
                RESULT = x; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= LECTURA 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node x = new Node("SENTENCIA",false);
            x.addHijo((Node)h2);
            RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA LECTURA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("SENTENCIA",false);
                 for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
                }
                
                x.addHijo((Node)h2);
                RESULT = x; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node x = new Node("SENTENCIA",false);
            x.addHijo((Node)h2);
            RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("SENTENCIA",false);
                for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
                }
               
                x.addHijo((Node)h2);
                RESULT = x; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= UNTIL 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node x = new Node("SENTENCIA",false);
            x.addHijo((Node)h2);
            RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA UNTIL 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("SENTENCIA",false);
                 for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
                }
               
                x.addHijo((Node)h2);
                RESULT = x; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node x = new Node("SENTENCIA",false);
            x.addHijo((Node)h2);
            RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("SENTENCIA",false);
                for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
                }
                x.addHijo((Node)h2);
                RESULT = x; 
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= IF 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  Node x = new Node("SENTENCIA",false);
            x.addHijo((Node)h2);
            RESULT = x;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
           Node x = new Node("SENTENCIA",false);
            for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
            }
           x.addHijo((Node)h2);
           RESULT = x; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Node x = new Node("SENTENCIA",false);
            x.addHijo((Node)h2);
            RESULT = x;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
           
           Node x = new Node("SENTENCIA",false);
           for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
            }
           x.addHijo((Node)h2);
           RESULT = x; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= error CloseMain 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= error SENTENCIA CloseMain 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Main Parentesis_a Parentesis_c SENTENCIA CloseMain METHOD 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
           Node raiz = new Node("ROOT",false);
           
           Node x = new Node("MAIN",false);
           for(int i = 0;i<((Node)h2).getHijos().size();i++){
                x.addHijo(((Node)h2).getHijos().get(i));
            }
           //x.addHijo((Node)h2);
           raiz.addHijo(x);
           for(int i = 0;i<((Node)h3).getHijos().size();i++){
                raiz.addHijo(((Node)h3).getHijos().get(i));
            }
           
           System.out.println(raiz.Imprimir(0));
           
          
          
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parentesis_a Parentesis_c CloseMain 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Main Parentesis_a Parentesis_c SENTENCIA CloseMain 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
           Node raiz = new Node("ROOT",false);
           Node x = new Node("MAIN",false);
           for(int i = 0;i<((Node)h2).getHijos().size();i++){
                x.addHijo(((Node)h2).getHijos().get(i));
            }
           //x.addHijo((Node)h2);
           raiz.addHijo(x);
           System.out.println(raiz.Imprimir(0)); 
          
          
          
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

