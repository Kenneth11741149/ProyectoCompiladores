
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Sep 14 20:54:29 CST 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Sep 14 20:54:29 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\005\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\007\000\002\004\011" +
    "\000\002\004\007\000\002\004\011\000\002\004\007\000" +
    "\002\004\013\000\002\004\007\000\002\004\013\000\002" +
    "\004\007\000\002\004\011\000\002\004\007\000\002\004" +
    "\011\000\002\006\011\000\002\013\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\006\000" +
    "\002\013\007\000\002\007\013\000\002\010\011\000\002" +
    "\011\013\000\002\012\011\000\002\014\012\000\002\014" +
    "\011\000\002\015\005\000\002\015\005\000\002\016\007" +
    "\000\002\016\007\000\002\005\005\000\002\005\004\000" +
    "\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\004\040\004\001\002\000\004\032\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\033\010\001\002\000\020\011\027\016\013\017" +
    "\025\047\020\052\015\053\014\054\022\001\002\000\032" +
    "\011\ufff8\012\ufff8\013\ufff8\015\ufff8\016\ufff8\017\ufff8\035" +
    "\ufff8\045\ufff8\047\ufff8\052\ufff8\053\ufff8\054\ufff8\001\002" +
    "\000\032\011\ufff5\012\ufff5\013\ufff5\015\ufff5\016\ufff5\017" +
    "\ufff5\035\ufff5\045\ufff5\047\ufff5\052\ufff5\053\ufff5\054\ufff5" +
    "\001\002\000\004\032\213\001\002\000\004\032\207\001" +
    "\002\000\006\042\204\050\203\001\002\000\032\011\ufffe" +
    "\012\ufffe\013\ufffe\015\ufffe\016\ufffe\017\ufffe\035\ufffe\045" +
    "\ufffe\047\ufffe\052\ufffe\053\ufffe\054\ufffe\001\002\000\032" +
    "\011\ufff1\012\ufff1\013\ufff1\015\ufff1\016\ufff1\017\ufff1\035" +
    "\ufff1\045\ufff1\047\ufff1\052\ufff1\053\ufff1\054\ufff1\001\002" +
    "\000\006\042\136\050\135\001\002\000\032\011\ufffa\012" +
    "\ufffa\013\ufffa\015\ufffa\016\ufffa\017\ufffa\035\ufffa\045\ufffa" +
    "\047\ufffa\052\ufffa\053\ufffa\054\ufffa\001\002\000\004\032" +
    "\131\001\002\000\032\011\ufffc\012\ufffc\013\ufffc\015\ufffc" +
    "\016\ufffc\017\ufffc\035\ufffc\045\ufffc\047\ufffc\052\ufffc\053" +
    "\ufffc\054\ufffc\001\002\000\024\011\027\015\057\016\013" +
    "\017\025\045\130\047\020\052\015\053\014\054\022\001" +
    "\002\000\004\032\075\001\002\000\032\011\ufff3\012\ufff3" +
    "\013\ufff3\015\ufff3\016\ufff3\017\ufff3\035\ufff3\045\ufff3\047" +
    "\ufff3\052\ufff3\053\ufff3\054\ufff3\001\002\000\004\032\030" +
    "\001\002\000\006\031\032\042\033\001\002\000\004\033" +
    "\044\001\002\000\006\033\uffe3\041\uffe3\001\002\000\004" +
    "\026\034\001\002\000\012\005\036\031\037\042\040\043" +
    "\035\001\002\000\006\033\uffe1\041\uffe1\001\002\000\006" +
    "\005\041\042\042\001\002\000\006\033\uffe2\041\uffe2\001" +
    "\002\000\006\033\uffe0\041\uffe0\001\002\000\006\033\uffdf" +
    "\041\uffdf\001\002\000\004\005\043\001\002\000\006\033" +
    "\uffde\041\uffde\001\002\000\004\014\045\001\002\000\020" +
    "\011\027\016\013\017\025\047\020\052\015\053\014\054" +
    "\022\001\002\000\026\011\027\012\055\013\054\015\057" +
    "\016\013\017\025\047\020\052\015\053\014\054\022\001" +
    "\002\000\032\011\ufff9\012\ufff9\013\ufff9\015\ufff9\016\ufff9" +
    "\017\ufff9\035\ufff9\045\ufff9\047\ufff9\052\ufff9\053\ufff9\054" +
    "\ufff9\001\002\000\032\011\uffff\012\uffff\013\uffff\015\uffff" +
    "\016\uffff\017\uffff\035\uffff\045\uffff\047\uffff\052\uffff\053" +
    "\uffff\054\uffff\001\002\000\032\011\ufff4\012\ufff4\013\ufff4" +
    "\015\ufff4\016\ufff4\017\ufff4\035\ufff4\045\ufff4\047\ufff4\052" +
    "\ufff4\053\ufff4\054\ufff4\001\002\000\032\011\ufffd\012\ufffd" +
    "\013\ufffd\015\ufffd\016\ufffd\017\ufffd\035\ufffd\045\ufffd\047" +
    "\ufffd\052\ufffd\053\ufffd\054\ufffd\001\002\000\032\011\ufffb" +
    "\012\ufffb\013\ufffb\015\ufffb\016\ufffb\017\ufffb\035\ufffb\045" +
    "\ufffb\047\ufffb\052\ufffb\053\ufffb\054\ufffb\001\002\000\020" +
    "\011\027\016\013\017\025\047\020\052\015\053\014\054" +
    "\022\001\002\000\032\011\uffe4\012\uffe4\013\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\035\uffe4\045\uffe4\047\uffe4\052\uffe4\053" +
    "\uffe4\054\uffe4\001\002\000\004\015\057\001\002\000\004" +
    "\034\062\001\002\000\032\011\ufff2\012\ufff2\013\ufff2\015" +
    "\ufff2\016\ufff2\017\ufff2\035\ufff2\045\ufff2\047\ufff2\052\ufff2" +
    "\053\ufff2\054\ufff2\001\002\000\032\011\ufff6\012\ufff6\013" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\035\ufff6\045\ufff6\047\ufff6" +
    "\052\ufff6\053\ufff6\054\ufff6\001\002\000\020\011\027\016" +
    "\013\017\025\047\020\052\015\053\014\054\022\001\002" +
    "\000\024\011\027\015\057\016\013\017\025\035\064\047" +
    "\020\052\015\053\014\054\022\001\002\000\004\016\065" +
    "\001\002\000\004\032\066\001\002\000\006\031\032\042" +
    "\033\001\002\000\004\033\070\001\002\000\004\041\071" +
    "\001\002\000\032\011\uffdb\012\uffdb\013\uffdb\015\uffdb\016" +
    "\uffdb\017\uffdb\035\uffdb\045\uffdb\047\uffdb\052\uffdb\053\uffdb" +
    "\054\uffdb\001\002\000\032\011\ufff7\012\ufff7\013\ufff7\015" +
    "\ufff7\016\ufff7\017\ufff7\035\ufff7\045\ufff7\047\ufff7\052\ufff7" +
    "\053\ufff7\054\ufff7\001\002\000\024\011\027\012\074\015" +
    "\057\016\013\017\025\047\020\052\015\053\014\054\022" +
    "\001\002\000\032\011\uffdd\012\uffdd\013\uffdd\015\uffdd\016" +
    "\uffdd\017\uffdd\035\uffdd\045\uffdd\047\uffdd\052\uffdd\053\uffdd" +
    "\054\uffdd\001\002\000\006\006\077\042\100\001\002\000" +
    "\004\033\124\001\002\000\004\042\115\001\002\000\004" +
    "\020\101\001\002\000\004\043\102\001\002\000\004\041" +
    "\103\001\002\000\006\031\032\042\033\001\002\000\004" +
    "\041\105\001\002\000\006\030\107\042\110\001\002\000" +
    "\004\033\uffd8\001\002\000\004\042\114\001\002\000\006" +
    "\027\111\030\112\001\002\000\004\043\113\001\002\000" +
    "\004\033\uffd2\001\002\000\004\033\uffd3\001\002\000\004" +
    "\033\uffd1\001\002\000\004\020\116\001\002\000\004\043" +
    "\117\001\002\000\004\041\120\001\002\000\006\031\032" +
    "\042\033\001\002\000\004\041\122\001\002\000\006\030" +
    "\107\042\110\001\002\000\004\033\uffd9\001\002\000\004" +
    "\034\125\001\002\000\020\011\027\016\013\017\025\047" +
    "\020\052\015\053\014\054\022\001\002\000\024\011\027" +
    "\015\057\016\013\017\025\035\127\047\020\052\015\053" +
    "\014\054\022\001\002\000\032\011\uffda\012\uffda\013\uffda" +
    "\015\uffda\016\uffda\017\uffda\035\uffda\045\uffda\047\uffda\052" +
    "\uffda\053\uffda\054\uffda\001\002\000\004\002\000\001\002" +
    "\000\004\042\132\001\002\000\004\033\133\001\002\000" +
    "\004\041\134\001\002\000\032\011\uffd5\012\uffd5\013\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\035\uffd5\045\uffd5\047\uffd5\052" +
    "\uffd5\053\uffd5\054\uffd5\001\002\000\004\046\161\001\002" +
    "\000\004\046\137\001\002\000\010\007\141\010\140\051" +
    "\142\001\002\000\006\020\154\041\153\001\002\000\006" +
    "\020\150\041\147\001\002\000\006\020\144\041\143\001" +
    "\002\000\032\011\uffe8\012\uffe8\013\uffe8\015\uffe8\016\uffe8" +
    "\017\uffe8\035\uffe8\045\uffe8\047\uffe8\052\uffe8\053\uffe8\054" +
    "\uffe8\001\002\000\004\031\145\001\002\000\004\041\146" +
    "\001\002\000\032\011\uffe7\012\uffe7\013\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\035\uffe7\045\uffe7\047\uffe7\052\uffe7\053\uffe7" +
    "\054\uffe7\001\002\000\032\011\ufff0\012\ufff0\013\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\035\ufff0\045\ufff0\047\ufff0\052\ufff0" +
    "\053\ufff0\054\ufff0\001\002\000\004\043\151\001\002\000" +
    "\004\041\152\001\002\000\032\011\uffef\012\uffef\013\uffef" +
    "\015\uffef\016\uffef\017\uffef\035\uffef\045\uffef\047\uffef\052" +
    "\uffef\053\uffef\054\uffef\001\002\000\032\011\uffec\012\uffec" +
    "\013\uffec\015\uffec\016\uffec\017\uffec\035\uffec\045\uffec\047" +
    "\uffec\052\uffec\053\uffec\054\uffec\001\002\000\004\005\155" +
    "\001\002\000\004\042\156\001\002\000\004\005\157\001" +
    "\002\000\004\041\160\001\002\000\032\011\uffeb\012\uffeb" +
    "\013\uffeb\015\uffeb\016\uffeb\017\uffeb\035\uffeb\045\uffeb\047" +
    "\uffeb\052\uffeb\053\uffeb\054\uffeb\001\002\000\010\007\163" +
    "\010\162\051\164\001\002\000\006\020\176\041\175\001" +
    "\002\000\006\020\172\041\171\001\002\000\006\020\166" +
    "\041\165\001\002\000\032\011\uffe6\012\uffe6\013\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\035\uffe6\045\uffe6\047\uffe6\052\uffe6" +
    "\053\uffe6\054\uffe6\001\002\000\004\031\167\001\002\000" +
    "\004\041\170\001\002\000\032\011\uffe5\012\uffe5\013\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\035\uffe5\045\uffe5\047\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\001\002\000\032\011\uffee\012\uffee" +
    "\013\uffee\015\uffee\016\uffee\017\uffee\035\uffee\045\uffee\047" +
    "\uffee\052\uffee\053\uffee\054\uffee\001\002\000\004\043\173" +
    "\001\002\000\004\041\174\001\002\000\032\011\uffed\012" +
    "\uffed\013\uffed\015\uffed\016\uffed\017\uffed\035\uffed\045\uffed" +
    "\047\uffed\052\uffed\053\uffed\054\uffed\001\002\000\032\011" +
    "\uffea\012\uffea\013\uffea\015\uffea\016\uffea\017\uffea\035\uffea" +
    "\045\uffea\047\uffea\052\uffea\053\uffea\054\uffea\001\002\000" +
    "\004\005\177\001\002\000\004\042\200\001\002\000\004" +
    "\005\201\001\002\000\004\041\202\001\002\000\032\011" +
    "\uffe9\012\uffe9\013\uffe9\015\uffe9\016\uffe9\017\uffe9\035\uffe9" +
    "\045\uffe9\047\uffe9\052\uffe9\053\uffe9\054\uffe9\001\002\000" +
    "\004\041\206\001\002\000\004\041\205\001\002\000\032" +
    "\011\uffd7\012\uffd7\013\uffd7\015\uffd7\016\uffd7\017\uffd7\035" +
    "\uffd7\045\uffd7\047\uffd7\052\uffd7\053\uffd7\054\uffd7\001\002" +
    "\000\032\011\uffd6\012\uffd6\013\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\035\uffd6\045\uffd6\047\uffd6\052\uffd6\053\uffd6\054\uffd6" +
    "\001\002\000\004\042\210\001\002\000\004\033\211\001" +
    "\002\000\004\041\212\001\002\000\032\011\uffd4\012\uffd4" +
    "\013\uffd4\015\uffd4\016\uffd4\017\uffd4\035\uffd4\045\uffd4\047" +
    "\uffd4\052\uffd4\053\uffd4\054\uffd4\001\002\000\006\031\032" +
    "\042\033\001\002\000\004\033\215\001\002\000\004\034" +
    "\216\001\002\000\020\011\027\016\013\017\025\047\020" +
    "\052\015\053\014\054\022\001\002\000\024\011\027\015" +
    "\057\016\013\017\025\035\220\047\020\052\015\053\014" +
    "\054\022\001\002\000\032\011\uffdc\012\uffdc\013\uffdc\015" +
    "\uffdc\016\uffdc\017\uffdc\035\uffdc\045\uffdc\047\uffdc\052\uffdc" +
    "\053\uffdc\054\uffdc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\023\004\015\006\022\007\020\010\010\012\011\015" +
    "\025\016\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\047\006\051\007\052\010\046\011\055\012\060\015\050" +
    "\016\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\045\004\015\006\022" +
    "\007\020\010\010\012\011\015\025\016\016\001\001\000" +
    "\022\004\047\006\051\007\052\010\046\011\055\012\060" +
    "\015\050\016\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\072\004\015\006\022\007\020\010\010\012" +
    "\011\015\025\016\016\001\001\000\002\001\001\000\004" +
    "\011\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\062\004\015\006\022\007\020" +
    "\010\010\012\011\015\025\016\016\001\001\000\022\004" +
    "\047\006\051\007\052\010\046\011\055\012\060\015\050" +
    "\016\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\047\006" +
    "\051\007\052\010\046\011\055\012\060\015\050\016\057" +
    "\001\001\000\002\001\001\000\004\014\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\103\001\001\000" +
    "\002\001\001\000\004\005\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\120\001\001\000\002\001\001\000\004\005\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\125\004" +
    "\015\006\022\007\020\010\010\012\011\015\025\016\016" +
    "\001\001\000\022\004\047\006\051\007\052\010\046\011" +
    "\055\012\060\015\050\016\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\216\004\015\006\022\007\020\010\010\012\011\015\025" +
    "\016\016\001\001\000\022\004\047\006\051\007\052\010" +
    "\046\011\055\012\060\015\050\016\057\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ESCRITURA ::= Throwln Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ESCRITURA ::= Throw Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LECTURA ::= Eat L P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LECTURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LECTURA ::= Eat Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LECTURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IF_ELSE ::= OpenTest Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Then SENTENCIA Or SENTENCIA CloseTest 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IF ::= OpenTest Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Then SENTENCIA CloseTest 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Define L As Boolean Igual Op_booleano P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Define L As Boolean P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Define Identificador As Boolean Igual Op_booleano P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Define Identificador As Boolean P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Define L As Character Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Define L As Character P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Define Identificador As Character Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Define Identificador As Character P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Define L As Int Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Define L As Int P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Define Identificador As Int Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= Define Identificador As Int P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= LECTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA LECTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Main Parentesis_a Parentesis_c SENTENCIA CloseMain 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

