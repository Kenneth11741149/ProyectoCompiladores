
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Sep 18 23:07:19 CST 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Sep 18 23:07:19 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\007\000\002\002" +
    "\006\000\002\002\005\000\002\002\004\000\002\002\002" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\004\007\000\002\004\011\000\002\004\007\000\002" +
    "\004\011\000\002\004\007\000\002\004\013\000\002\004" +
    "\007\000\002\004\013\000\002\004\007\000\002\004\011" +
    "\000\002\004\007\000\002\004\011\000\002\004\004\000" +
    "\002\006\011\000\002\006\005\000\002\012\003\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\006\000\002\012\007\000\002\007\013\000\002\007\011" +
    "\000\002\007\011\000\002\007\013\000\002\010\011\000" +
    "\002\010\005\000\002\011\010\000\002\011\005\000\002" +
    "\013\012\000\002\013\011\000\002\014\005\000\002\014" +
    "\005\000\002\014\004\000\002\015\007\000\002\015\007" +
    "\000\002\015\004\000\002\015\004\000\002\005\005\000" +
    "\002\005\004\000\002\005\004\000\002\016\010\000\002" +
    "\016\010\000\002\017\013\000\002\017\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\010\002\ufffc\003\004\042\005\001\002\000" +
    "\026\003\022\011\012\015\026\020\031\047\270\051\021" +
    "\054\023\055\032\056\027\057\013\001\002\000\004\034" +
    "\010\001\002\000\004\002\007\001\002\000\004\002\001" +
    "\001\002\000\004\035\011\001\002\000\026\003\022\011" +
    "\012\015\026\020\031\047\034\051\021\054\023\055\032" +
    "\056\027\057\013\001\002\000\006\003\242\034\241\001" +
    "\002\000\004\034\212\001\002\000\026\003\022\011\012" +
    "\015\026\020\031\047\211\051\021\054\023\055\032\056" +
    "\027\057\013\001\002\000\040\003\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\015\ufffa\016\ufffa\020\ufffa\021\ufffa\047\ufffa\051" +
    "\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\062\ufffa\001\002" +
    "\000\040\003\ufff0\011\ufff0\012\ufff0\013\ufff0\015\ufff0\016" +
    "\ufff0\020\ufff0\021\ufff0\047\ufff0\051\ufff0\054\ufff0\055\ufff0" +
    "\056\ufff0\057\ufff0\062\ufff0\001\002\000\040\003\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\015\ufff8\016\ufff8\020\ufff8\021\ufff8" +
    "\047\ufff8\051\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\062" +
    "\ufff8\001\002\000\040\003\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\015\ufff6\016\ufff6\020\ufff6\021\ufff6\047\ufff6\051\ufff6\054" +
    "\ufff6\055\ufff6\056\ufff6\057\ufff6\062\ufff6\001\002\000\006" +
    "\044\144\052\143\001\002\000\004\043\142\001\002\000" +
    "\010\003\136\044\137\052\135\001\002\000\040\003\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\015\ufff4\016\ufff4\020\ufff4\021" +
    "\ufff4\047\ufff4\051\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4" +
    "\062\ufff4\001\002\000\040\003\uffee\011\uffee\012\uffee\013" +
    "\uffee\015\uffee\016\uffee\020\uffee\021\uffee\047\uffee\051\uffee" +
    "\054\uffee\055\uffee\056\uffee\057\uffee\062\uffee\001\002\000" +
    "\006\003\126\034\125\001\002\000\006\003\121\034\120" +
    "\001\002\000\040\003\ufff2\011\ufff2\012\ufff2\013\ufff2\015" +
    "\ufff2\016\ufff2\020\ufff2\021\ufff2\047\ufff2\051\ufff2\054\ufff2" +
    "\055\ufff2\056\ufff2\057\ufff2\062\ufff2\001\002\000\006\003" +
    "\043\034\042\001\002\000\006\003\036\034\035\001\002" +
    "\000\040\003\uffec\011\uffec\012\uffec\013\uffec\015\uffec\016" +
    "\uffec\020\uffec\021\uffec\047\uffec\051\uffec\054\uffec\055\uffec" +
    "\056\uffec\057\uffec\062\uffec\001\002\000\004\002\uffff\001" +
    "\002\000\004\044\037\001\002\000\040\003\uffc6\011\uffc6" +
    "\012\uffc6\013\uffc6\015\uffc6\016\uffc6\020\uffc6\021\uffc6\047" +
    "\uffc6\051\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\062\uffc6" +
    "\001\002\000\004\035\040\001\002\000\004\043\041\001" +
    "\002\000\040\003\uffc8\011\uffc8\012\uffc8\013\uffc8\015\uffc8" +
    "\016\uffc8\020\uffc8\021\uffc8\047\uffc8\051\uffc8\054\uffc8\055" +
    "\uffc8\056\uffc8\057\uffc8\062\uffc8\001\002\000\006\007\047" +
    "\044\046\001\002\000\004\021\044\001\002\000\040\003" +
    "\uffcf\011\uffcf\012\uffcf\013\uffcf\015\uffcf\016\uffcf\020\uffcf" +
    "\021\uffcf\047\uffcf\051\uffcf\054\uffcf\055\uffcf\056\uffcf\057" +
    "\uffcf\062\uffcf\001\002\000\004\035\105\001\002\000\004" +
    "\022\077\001\002\000\004\044\050\001\002\000\004\022" +
    "\051\001\002\000\004\045\052\001\002\000\004\043\053" +
    "\001\002\000\006\033\055\044\056\001\002\000\004\043" +
    "\067\001\002\000\006\035\uffdc\043\uffdc\001\002\000\004" +
    "\030\057\001\002\000\012\005\061\033\062\044\063\045" +
    "\060\001\002\000\006\035\uffda\043\uffda\001\002\000\006" +
    "\005\064\044\065\001\002\000\006\035\uffdb\043\uffdb\001" +
    "\002\000\006\035\uffd9\043\uffd9\001\002\000\006\035\uffd8" +
    "\043\uffd8\001\002\000\004\005\066\001\002\000\006\035" +
    "\uffd7\043\uffd7\001\002\000\006\032\071\044\072\001\002" +
    "\000\004\035\uffce\001\002\000\004\044\076\001\002\000" +
    "\006\031\073\032\074\001\002\000\004\045\075\001\002" +
    "\000\004\035\uffc4\001\002\000\004\035\uffc5\001\002\000" +
    "\004\035\uffc3\001\002\000\004\045\100\001\002\000\004" +
    "\043\101\001\002\000\006\033\055\044\056\001\002\000" +
    "\004\043\103\001\002\000\006\032\071\044\072\001\002" +
    "\000\004\035\uffcd\001\002\000\024\003\022\011\012\015" +
    "\026\020\031\051\021\054\023\055\032\056\027\057\013" +
    "\001\002\000\026\003\022\011\012\015\026\020\031\021" +
    "\107\051\021\054\023\055\032\056\027\057\013\001\002" +
    "\000\040\003\uffd0\011\uffd0\012\uffd0\013\uffd0\015\uffd0\016" +
    "\uffd0\020\uffd0\021\uffd0\047\uffd0\051\uffd0\054\uffd0\055\uffd0" +
    "\056\uffd0\057\uffd0\062\uffd0\001\002\000\040\003\ufffb\011" +
    "\ufffb\012\ufffb\013\ufffb\015\ufffb\016\ufffb\020\ufffb\021\ufffb" +
    "\047\ufffb\051\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\062" +
    "\ufffb\001\002\000\040\003\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\015\ufff1\016\ufff1\020\ufff1\021\ufff1\047\ufff1\051\ufff1\054" +
    "\ufff1\055\ufff1\056\ufff1\057\ufff1\062\ufff1\001\002\000\040" +
    "\003\ufff9\011\ufff9\012\ufff9\013\ufff9\015\ufff9\016\ufff9\020" +
    "\ufff9\021\ufff9\047\ufff9\051\ufff9\054\ufff9\055\ufff9\056\ufff9" +
    "\057\ufff9\062\ufff9\001\002\000\040\003\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\015\ufff7\016\ufff7\020\ufff7\021\ufff7\047\ufff7" +
    "\051\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\062\ufff7\001" +
    "\002\000\040\003\ufff5\011\ufff5\012\ufff5\013\ufff5\015\ufff5" +
    "\016\ufff5\020\ufff5\021\ufff5\047\ufff5\051\ufff5\054\ufff5\055" +
    "\ufff5\056\ufff5\057\ufff5\062\ufff5\001\002\000\040\003\uffef" +
    "\011\uffef\012\uffef\013\uffef\015\uffef\016\uffef\020\uffef\021" +
    "\uffef\047\uffef\051\uffef\054\uffef\055\uffef\056\uffef\057\uffef" +
    "\062\uffef\001\002\000\040\003\ufff3\011\ufff3\012\ufff3\013" +
    "\ufff3\015\ufff3\016\ufff3\020\ufff3\021\ufff3\047\ufff3\051\ufff3" +
    "\054\ufff3\055\ufff3\056\ufff3\057\ufff3\062\ufff3\001\002\000" +
    "\040\003\uffed\011\uffed\012\uffed\013\uffed\015\uffed\016\uffed" +
    "\020\uffed\021\uffed\047\uffed\051\uffed\054\uffed\055\uffed\056" +
    "\uffed\057\uffed\062\uffed\001\002\000\004\044\122\001\002" +
    "\000\040\003\uffc7\011\uffc7\012\uffc7\013\uffc7\015\uffc7\016" +
    "\uffc7\020\uffc7\021\uffc7\047\uffc7\051\uffc7\054\uffc7\055\uffc7" +
    "\056\uffc7\057\uffc7\062\uffc7\001\002\000\004\035\123\001" +
    "\002\000\004\043\124\001\002\000\040\003\uffc9\011\uffc9" +
    "\012\uffc9\013\uffc9\015\uffc9\016\uffc9\020\uffc9\021\uffc9\047" +
    "\uffc9\051\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\062\uffc9" +
    "\001\002\000\006\033\055\044\056\001\002\000\004\016" +
    "\127\001\002\000\040\003\uffd1\011\uffd1\012\uffd1\013\uffd1" +
    "\015\uffd1\016\uffd1\020\uffd1\021\uffd1\047\uffd1\051\uffd1\054" +
    "\uffd1\055\uffd1\056\uffd1\057\uffd1\062\uffd1\001\002\000\004" +
    "\035\131\001\002\000\004\017\132\001\002\000\024\003" +
    "\022\011\012\015\026\020\031\051\021\054\023\055\032" +
    "\056\027\057\013\001\002\000\026\003\022\011\012\015" +
    "\026\016\134\020\031\051\021\054\023\055\032\056\027" +
    "\057\013\001\002\000\040\003\uffd2\011\uffd2\012\uffd2\013" +
    "\uffd2\015\uffd2\016\uffd2\020\uffd2\021\uffd2\047\uffd2\051\uffd2" +
    "\054\uffd2\055\uffd2\056\uffd2\057\uffd2\062\uffd2\001\002\000" +
    "\004\043\141\001\002\000\040\003\uffca\011\uffca\012\uffca" +
    "\013\uffca\015\uffca\016\uffca\020\uffca\021\uffca\047\uffca\051" +
    "\uffca\054\uffca\055\uffca\056\uffca\057\uffca\062\uffca\001\002" +
    "\000\004\043\140\001\002\000\040\003\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\015\uffcc\016\uffcc\020\uffcc\021\uffcc\047\uffcc" +
    "\051\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\062\uffcc\001" +
    "\002\000\040\003\uffcb\011\uffcb\012\uffcb\013\uffcb\015\uffcb" +
    "\016\uffcb\020\uffcb\021\uffcb\047\uffcb\051\uffcb\054\uffcb\055" +
    "\uffcb\056\uffcb\057\uffcb\062\uffcb\001\002\000\040\003\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\015\uffdf\016\uffdf\020\uffdf\021" +
    "\uffdf\047\uffdf\051\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf" +
    "\062\uffdf\001\002\000\004\050\167\001\002\000\004\050" +
    "\145\001\002\000\010\007\147\010\146\053\150\001\002" +
    "\000\006\022\162\043\161\001\002\000\006\022\156\043" +
    "\155\001\002\000\006\022\152\043\151\001\002\000\040" +
    "\003\uffe3\011\uffe3\012\uffe3\013\uffe3\015\uffe3\016\uffe3\020" +
    "\uffe3\021\uffe3\047\uffe3\051\uffe3\054\uffe3\055\uffe3\056\uffe3" +
    "\057\uffe3\062\uffe3\001\002\000\004\033\153\001\002\000" +
    "\004\043\154\001\002\000\040\003\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\015\uffe2\016\uffe2\020\uffe2\021\uffe2\047\uffe2\051" +
    "\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\062\uffe2\001\002" +
    "\000\040\003\uffeb\011\uffeb\012\uffeb\013\uffeb\015\uffeb\016" +
    "\uffeb\020\uffeb\021\uffeb\047\uffeb\051\uffeb\054\uffeb\055\uffeb" +
    "\056\uffeb\057\uffeb\062\uffeb\001\002\000\004\045\157\001" +
    "\002\000\004\043\160\001\002\000\040\003\uffea\011\uffea" +
    "\012\uffea\013\uffea\015\uffea\016\uffea\020\uffea\021\uffea\047" +
    "\uffea\051\uffea\054\uffea\055\uffea\056\uffea\057\uffea\062\uffea" +
    "\001\002\000\040\003\uffe7\011\uffe7\012\uffe7\013\uffe7\015" +
    "\uffe7\016\uffe7\020\uffe7\021\uffe7\047\uffe7\051\uffe7\054\uffe7" +
    "\055\uffe7\056\uffe7\057\uffe7\062\uffe7\001\002\000\004\005" +
    "\163\001\002\000\004\044\164\001\002\000\004\005\165" +
    "\001\002\000\004\043\166\001\002\000\040\003\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\015\uffe6\016\uffe6\020\uffe6\021\uffe6" +
    "\047\uffe6\051\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\062" +
    "\uffe6\001\002\000\010\007\171\010\170\053\172\001\002" +
    "\000\006\022\204\043\203\001\002\000\006\022\200\043" +
    "\177\001\002\000\006\022\174\043\173\001\002\000\040" +
    "\003\uffe1\011\uffe1\012\uffe1\013\uffe1\015\uffe1\016\uffe1\020" +
    "\uffe1\021\uffe1\047\uffe1\051\uffe1\054\uffe1\055\uffe1\056\uffe1" +
    "\057\uffe1\062\uffe1\001\002\000\004\033\175\001\002\000" +
    "\004\043\176\001\002\000\040\003\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\015\uffe0\016\uffe0\020\uffe0\021\uffe0\047\uffe0\051" +
    "\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\062\uffe0\001\002" +
    "\000\040\003\uffe9\011\uffe9\012\uffe9\013\uffe9\015\uffe9\016" +
    "\uffe9\020\uffe9\021\uffe9\047\uffe9\051\uffe9\054\uffe9\055\uffe9" +
    "\056\uffe9\057\uffe9\062\uffe9\001\002\000\004\045\201\001" +
    "\002\000\004\043\202\001\002\000\040\003\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\015\uffe8\016\uffe8\020\uffe8\021\uffe8\047" +
    "\uffe8\051\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\062\uffe8" +
    "\001\002\000\040\003\uffe5\011\uffe5\012\uffe5\013\uffe5\015" +
    "\uffe5\016\uffe5\020\uffe5\021\uffe5\047\uffe5\051\uffe5\054\uffe5" +
    "\055\uffe5\056\uffe5\057\uffe5\062\uffe5\001\002\000\004\005" +
    "\205\001\002\000\004\044\206\001\002\000\004\005\207" +
    "\001\002\000\004\043\210\001\002\000\040\003\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\015\uffe4\016\uffe4\020\uffe4\021\uffe4" +
    "\047\uffe4\051\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\062" +
    "\uffe4\001\002\000\004\002\000\001\002\000\004\044\213" +
    "\001\002\000\004\035\214\001\002\000\006\003\215\061" +
    "\216\001\002\000\004\060\240\001\002\000\004\005\231" +
    "\001\002\000\006\060\220\061\221\001\002\000\040\003" +
    "\uffc2\011\uffc2\012\uffc2\013\uffc2\015\uffc2\016\uffc2\020\uffc2" +
    "\021\uffc2\047\uffc2\051\uffc2\054\uffc2\055\uffc2\056\uffc2\057" +
    "\uffc2\062\uffc2\001\002\000\004\005\222\001\002\000\004" +
    "\044\223\001\002\000\004\005\224\001\002\000\004\022" +
    "\225\001\002\000\024\003\022\011\012\015\026\020\031" +
    "\051\021\054\023\055\032\056\027\057\013\001\002\000" +
    "\026\003\022\011\012\015\026\020\031\051\021\054\023" +
    "\055\032\056\027\057\013\062\227\001\002\000\004\043" +
    "\230\001\002\000\006\060\uffc0\061\uffc0\001\002\000\004" +
    "\044\232\001\002\000\004\005\233\001\002\000\004\022" +
    "\234\001\002\000\024\003\022\011\012\015\026\020\031" +
    "\051\021\054\023\055\032\056\027\057\013\001\002\000" +
    "\026\003\022\011\012\015\026\020\031\051\021\054\023" +
    "\055\032\056\027\057\013\062\236\001\002\000\004\043" +
    "\237\001\002\000\006\060\uffbf\061\uffbf\001\002\000\040" +
    "\003\uffc1\011\uffc1\012\uffc1\013\uffc1\015\uffc1\016\uffc1\020" +
    "\uffc1\021\uffc1\047\uffc1\051\uffc1\054\uffc1\055\uffc1\056\uffc1" +
    "\057\uffc1\062\uffc1\001\002\000\006\033\055\044\056\001" +
    "\002\000\006\012\243\014\244\001\002\000\040\003\uffdd" +
    "\011\uffdd\012\uffdd\013\uffdd\015\uffdd\016\uffdd\020\uffdd\021" +
    "\uffdd\047\uffdd\051\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd" +
    "\062\uffdd\001\002\000\024\003\022\011\012\015\026\020" +
    "\031\051\021\054\023\055\032\056\027\057\013\001\002" +
    "\000\026\003\247\011\012\013\246\015\026\020\031\051" +
    "\021\054\023\055\032\056\027\057\013\001\002\000\024" +
    "\003\022\011\012\015\026\020\031\051\021\054\023\055" +
    "\032\056\027\057\013\001\002\000\026\003\022\011\012" +
    "\015\026\020\031\043\142\051\021\054\023\055\032\056" +
    "\027\057\013\001\002\000\026\003\022\011\012\012\251" +
    "\015\026\020\031\051\021\054\023\055\032\056\027\057" +
    "\013\001\002\000\040\003\uffd5\011\uffd5\012\uffd5\013\uffd5" +
    "\015\uffd5\016\uffd5\020\uffd5\021\uffd5\047\uffd5\051\uffd5\054" +
    "\uffd5\055\uffd5\056\uffd5\057\uffd5\062\uffd5\001\002\000\026" +
    "\003\022\011\012\012\253\015\026\020\031\051\021\054" +
    "\023\055\032\056\027\057\013\001\002\000\040\003\uffd4" +
    "\011\uffd4\012\uffd4\013\uffd4\015\uffd4\016\uffd4\020\uffd4\021" +
    "\uffd4\047\uffd4\051\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4" +
    "\062\uffd4\001\002\000\004\035\255\001\002\000\004\014" +
    "\256\001\002\000\024\003\022\011\012\015\026\020\031" +
    "\051\021\054\023\055\032\056\027\057\013\001\002\000" +
    "\030\003\262\011\012\012\261\013\260\015\026\020\031" +
    "\051\021\054\023\055\032\056\027\057\013\001\002\000" +
    "\024\003\022\011\012\015\026\020\031\051\021\054\023" +
    "\055\032\056\027\057\013\001\002\000\040\003\uffde\011" +
    "\uffde\012\uffde\013\uffde\015\uffde\016\uffde\020\uffde\021\uffde" +
    "\047\uffde\051\uffde\054\uffde\055\uffde\056\uffde\057\uffde\062" +
    "\uffde\001\002\000\026\003\022\011\012\015\026\020\031" +
    "\043\142\051\021\054\023\055\032\056\027\057\013\001" +
    "\002\000\026\003\022\011\012\012\264\015\026\020\031" +
    "\051\021\054\023\055\032\056\027\057\013\001\002\000" +
    "\040\003\uffd3\011\uffd3\012\uffd3\013\uffd3\015\uffd3\016\uffd3" +
    "\020\uffd3\021\uffd3\047\uffd3\051\uffd3\054\uffd3\055\uffd3\056" +
    "\uffd3\057\uffd3\062\uffd3\001\002\000\026\003\022\011\012" +
    "\012\266\015\026\020\031\051\021\054\023\055\032\056" +
    "\027\057\013\001\002\000\040\003\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\015\uffd6\016\uffd6\020\uffd6\021\uffd6\047\uffd6\051" +
    "\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\062\uffd6\001\002" +
    "\000\026\003\022\011\012\015\026\020\031\047\271\051" +
    "\021\054\023\055\032\056\027\057\013\001\002\000\004" +
    "\002\ufffd\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\004\002\005\001\001\000\024\003\266\004" +
    "\014\006\016\007\017\010\023\011\027\014\015\015\024" +
    "\016\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\013\004\014" +
    "\006\016\007\017\010\023\011\027\014\015\015\024\016" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\107\006\111\007\112\010\113\011\115\014\110\015" +
    "\114\016\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\101\001\001\000\002\001\001\000\004\005\103\001" +
    "\001\000\002\001\001\000\024\003\105\004\014\006\016" +
    "\007\017\010\023\011\027\014\015\015\024\016\032\001" +
    "\001\000\022\004\107\006\111\007\112\010\113\011\115" +
    "\014\110\015\114\016\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\132\004" +
    "\014\006\016\007\017\010\023\011\027\014\015\015\024" +
    "\016\032\001\001\000\022\004\107\006\111\007\112\010" +
    "\113\011\115\014\110\015\114\016\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\225\004\014" +
    "\006\016\007\017\010\023\011\027\014\015\015\024\016" +
    "\032\001\001\000\022\004\107\006\111\007\112\010\113" +
    "\011\115\014\110\015\114\016\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\234\004\014\006\016\007" +
    "\017\010\023\011\027\014\015\015\024\016\032\001\001" +
    "\000\022\004\107\006\111\007\112\010\113\011\115\014" +
    "\110\015\114\016\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\244\004\014" +
    "\006\016\007\017\010\023\011\027\014\015\015\024\016" +
    "\032\001\001\000\022\004\107\006\111\007\112\010\113" +
    "\011\115\014\110\015\114\016\116\001\001\000\024\003" +
    "\251\004\014\006\016\007\017\010\023\011\027\014\015" +
    "\015\024\016\032\001\001\000\024\003\247\004\014\006" +
    "\016\007\017\010\023\011\027\014\015\015\024\016\032" +
    "\001\001\000\022\004\107\006\111\007\112\010\113\011" +
    "\115\014\110\015\114\016\116\001\001\000\002\001\001" +
    "\000\022\004\107\006\111\007\112\010\113\011\115\014" +
    "\110\015\114\016\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\256\004\014\006" +
    "\016\007\017\010\023\011\027\014\015\015\024\016\032" +
    "\001\001\000\022\004\107\006\111\007\112\010\113\011" +
    "\115\014\110\015\114\016\116\001\001\000\024\003\264" +
    "\004\014\006\016\007\017\010\023\011\027\014\015\015" +
    "\024\016\032\001\001\000\002\001\001\000\024\003\262" +
    "\004\014\006\016\007\017\010\023\011\027\014\015\015" +
    "\024\016\032\001\001\000\022\004\107\006\111\007\112" +
    "\010\113\011\115\014\110\015\114\016\116\001\001\000" +
    "\002\001\001\000\022\004\107\006\111\007\112\010\113" +
    "\011\115\014\110\015\114\016\116\001\001\000\002\001" +
    "\001\000\022\004\107\006\111\007\112\010\113\011\115" +
    "\014\110\015\114\016\116\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
        String error = "";
        if(s.value != null){
            error = "Error Sintactico en la linea "+s.right+ " Columna "+(s.left+1)+ ". No se esperaba esto: "+ "\""+ s.value+ "\""+ "\n" ;
           System.out.print(error);
        }
        //errores.add(error)
    }
    


    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CASE ::= When Comillas Identificador Comillas Igual SENTENCIA Stop P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CASE ::= CASE When Comillas Identificador Comillas Igual SENTENCIA Stop P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MATCH ::= OpenMatch Parentesis_a Identificador Parentesis_c error CloseMatch 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MATCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // MATCH ::= OpenMatch Parentesis_a Identificador Parentesis_c CASE CloseMatch 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MATCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ESCRITURA ::= Throwln error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ESCRITURA ::= THrow error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ESCRITURA ::= Throwln Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ESCRITURA ::= THrow Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LECTURA ::= Eat error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LECTURA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LECTURA ::= Eat L P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LECTURA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LECTURA ::= Eat Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LECTURA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_FOR ::= Int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FOR ::= OpenFor error CloseFor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FOR ::= OpenFor Parentesis_a SENTENCIA_FOR Parentesis_c SENTENCIA CloseFor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // UNTIL ::= OpenUntil error CloseUntil 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNTIL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // UNTIL ::= OpenUntil Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Do SENTENCIA CloseUntil 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNTIL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF_ELSE ::= OpenTest Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Then SENTENCIA error SENTENCIA CloseTest 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IF_ELSE ::= OpenTest error Then SENTENCIA Or SENTENCIA CloseTest 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IF_ELSE ::= OpenTest error Then SENTENCIA error SENTENCIA CloseTest 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IF_ELSE ::= OpenTest Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Then SENTENCIA Or SENTENCIA CloseTest 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IF ::= OpenTest error CloseTest 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IF ::= OpenTest Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Then SENTENCIA CloseTest 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= error P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Define L As Boolean Igual Op_booleano P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Define L As Boolean P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Define Identificador As Boolean Igual Op_booleano P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Define Identificador As Boolean P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Define L As Character Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Define L As Character P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Define Identificador As Character Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Define Identificador As Character P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Define L As Int Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Define L As Int P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Define Identificador As Int Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Define Identificador As Int P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= MATCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA MATCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= LECTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA LECTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= UNTIL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA UNTIL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= error CloseMain 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= error SENTENCIA CloseMain 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parentesis_a Parentesis_c CloseMain 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Main Parentesis_a Parentesis_c SENTENCIA CloseMain 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

