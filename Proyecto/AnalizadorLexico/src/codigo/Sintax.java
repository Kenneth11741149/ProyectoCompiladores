
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 29 08:59:01 CST 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 29 08:59:01 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\002\007\000\002\002" +
    "\006\000\002\002\010\000\002\002\007\000\002\002\005" +
    "\000\002\002\004\000\002\002\003\000\002\002\004\000" +
    "\002\002\002\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\005\000\002\031\005" +
    "\000\002\031\002\000\002\030\004\000\002\030\006\000" +
    "\002\024\003\000\002\025\005\000\002\025\005\000\002" +
    "\025\003\000\002\026\005\000\002\026\005\000\002\026" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\005" +
    "\000\002\021\015\000\002\021\016\000\002\021\016\000" +
    "\002\021\017\000\002\020\003\000\002\020\003\000\002" +
    "\022\007\000\002\004\007\000\002\004\011\000\002\004" +
    "\006\000\002\004\005\000\002\004\012\000\002\004\015" +
    "\000\002\004\007\000\002\004\011\000\002\004\012\000" +
    "\002\004\015\000\002\004\007\000\002\004\011\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\006\000\002\004\010\000\002\004\005\000" +
    "\002\004\011\000\002\004\014\000\002\004\006\000\002" +
    "\004\010\000\002\004\011\000\002\004\014\000\002\004" +
    "\006\000\002\004\010\000\002\006\011\000\002\006\011" +
    "\000\002\006\010\000\002\006\010\000\002\006\007\000" +
    "\002\006\007\000\002\006\007\000\002\006\006\000\002" +
    "\006\005\000\002\006\006\000\002\023\004\000\002\023" +
    "\003\000\002\012\005\000\002\012\005\000\002\012\004" +
    "\000\002\012\003\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\006\000\002" +
    "\012\005\000\002\007\013\000\002\010\011\000\002\011" +
    "\010\000\002\013\012\000\002\013\011\000\002\014\005" +
    "\000\002\015\007\000\002\015\007\000\002\015\007\000" +
    "\002\015\007\000\002\005\005\000\002\005\004\000\002" +
    "\005\004\000\002\016\010\000\002\017\011\000\002\017" +
    "\010\000\002\017\011\000\002\017\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011d\000\010\002\ufff8\003\004\046\005\001\002\000" +
    "\034\002\ufffa\003\135\012\013\016\032\021\037\050\020" +
    "\054\u011e\056\025\057\022\061\027\062\036\063\033\064" +
    "\014\001\002\000\006\003\011\036\010\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\004\037" +
    "\012\001\002\000\004\002\ufff9\001\002\000\032\003\026" +
    "\012\013\016\032\021\037\050\020\054\041\056\025\057" +
    "\022\061\027\062\036\063\033\064\014\001\002\000\006" +
    "\003\u0103\036\u0102\001\002\000\004\036\347\001\002\000" +
    "\032\003\135\012\013\016\032\021\037\050\020\054\272" +
    "\056\025\057\022\061\027\062\036\063\033\064\014\001" +
    "\002\000\050\003\ufff6\012\ufff6\013\ufff6\014\ufff6\016\ufff6" +
    "\017\ufff6\021\ufff6\022\ufff6\032\ufff6\037\ufff6\050\ufff6\054" +
    "\ufff6\056\ufff6\057\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6" +
    "\067\ufff6\001\002\000\050\003\uffec\012\uffec\013\uffec\014" +
    "\uffec\016\uffec\017\uffec\021\uffec\022\uffec\032\uffec\037\uffec" +
    "\050\uffec\054\uffec\056\uffec\057\uffec\061\uffec\062\uffec\063" +
    "\uffec\064\uffec\067\uffec\001\002\000\076\003\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\016\uffd0\017\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\031\uffd0\032\uffd0" +
    "\033\uffd0\034\uffd0\036\uffd0\037\uffd0\047\uffd0\050\uffd0\054" +
    "\uffd0\055\uffd0\056\uffd0\057\uffd0\061\uffd0\062\uffd0\063\uffd0" +
    "\064\uffd0\067\uffd0\001\002\000\050\003\ufff4\012\ufff4\013" +
    "\ufff4\014\ufff4\016\ufff4\017\ufff4\021\ufff4\022\ufff4\032\ufff4" +
    "\037\ufff4\050\ufff4\054\ufff4\056\ufff4\057\ufff4\061\ufff4\062" +
    "\ufff4\063\ufff4\064\ufff4\067\ufff4\001\002\000\076\003\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\016\uffcf\017\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\036\uffcf\037\uffcf\047\uffcf\050" +
    "\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\061\uffcf\062\uffcf" +
    "\063\uffcf\064\uffcf\067\uffcf\001\002\000\050\003\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\016\ufff2\017\ufff2\021\ufff2\022\ufff2" +
    "\032\ufff2\037\ufff2\050\ufff2\054\ufff2\056\ufff2\057\ufff2\061" +
    "\ufff2\062\ufff2\063\ufff2\064\ufff2\067\ufff2\001\002\000\006" +
    "\023\163\036\170\001\002\000\006\050\020\057\022\001" +
    "\002\000\026\003\135\012\013\015\144\016\032\021\037" +
    "\047\142\050\020\054\230\056\025\057\022\001\002\000" +
    "\006\050\020\057\022\001\002\000\050\003\ufff0\012\ufff0" +
    "\013\ufff0\014\ufff0\016\ufff0\017\ufff0\021\ufff0\022\ufff0\032" +
    "\ufff0\037\ufff0\050\ufff0\054\ufff0\056\ufff0\057\ufff0\061\ufff0" +
    "\062\ufff0\063\ufff0\064\ufff0\067\ufff0\001\002\000\050\003" +
    "\uffea\012\uffea\013\uffea\014\uffea\016\uffea\017\uffea\021\uffea" +
    "\022\uffea\032\uffea\037\uffea\050\uffea\054\uffea\056\uffea\057" +
    "\uffea\061\uffea\062\uffea\063\uffea\064\uffea\067\uffea\001\002" +
    "\000\004\036\220\001\002\000\004\036\211\001\002\000" +
    "\050\003\uffee\012\uffee\013\uffee\014\uffee\016\uffee\017\uffee" +
    "\021\uffee\022\uffee\032\uffee\037\uffee\050\uffee\054\uffee\056" +
    "\uffee\057\uffee\061\uffee\062\uffee\063\uffee\064\uffee\067\uffee" +
    "\001\002\000\050\003\uffe6\012\uffe6\013\uffe6\014\uffe6\016" +
    "\uffe6\017\uffe6\021\uffe6\022\uffe6\032\uffe6\037\uffe6\050\uffe6" +
    "\054\uffe6\056\uffe6\057\uffe6\061\uffe6\062\uffe6\063\uffe6\064" +
    "\uffe6\067\uffe6\001\002\000\004\036\202\001\002\000\004" +
    "\036\042\001\002\000\050\003\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\016\uffe8\017\uffe8\021\uffe8\022\uffe8\032\uffe8\037\uffe8" +
    "\050\uffe8\054\uffe8\056\uffe8\057\uffe8\061\uffe8\062\uffe8\063" +
    "\uffe8\064\uffe8\067\uffe8\001\002\000\004\002\uffff\001\002" +
    "\000\006\010\045\050\044\001\002\000\004\037\133\001" +
    "\002\000\004\023\125\001\002\000\006\050\020\057\022" +
    "\001\002\000\004\023\047\001\002\000\004\052\050\001" +
    "\002\000\004\047\051\001\002\000\014\035\056\036\052" +
    "\050\020\057\022\072\054\001\002\000\014\035\056\036" +
    "\052\050\020\057\022\072\054\001\002\000\010\047\073" +
    "\070\067\071\070\001\002\000\014\035\056\036\052\050" +
    "\020\057\022\072\054\001\002\000\004\031\057\001\002" +
    "\000\024\035\uffa0\036\uffa0\037\uffa0\047\uffa0\050\uffa0\057" +
    "\uffa0\070\uffa0\071\uffa0\072\uffa0\001\002\000\014\005\061" +
    "\006\062\035\063\050\064\052\060\001\002\000\024\035" +
    "\uff9d\036\uff9d\037\uff9d\047\uff9d\050\uff9d\057\uff9d\070\uff9d" +
    "\071\uff9d\072\uff9d\001\002\000\004\005\065\001\002\000" +
    "\024\035\uff9a\036\uff9a\037\uff9a\047\uff9a\050\uff9a\057\uff9a" +
    "\070\uff9a\071\uff9a\072\uff9a\001\002\000\024\035\uff9e\036" +
    "\uff9e\037\uff9e\047\uff9e\050\uff9e\057\uff9e\070\uff9e\071\uff9e" +
    "\072\uff9e\001\002\000\024\035\uff9c\036\uff9c\037\uff9c\047" +
    "\uff9c\050\uff9c\057\uff9c\070\uff9c\071\uff9c\072\uff9c\001\002" +
    "\000\024\035\uff9b\036\uff9b\037\uff9b\047\uff9b\050\uff9b\057" +
    "\uff9b\070\uff9b\071\uff9b\072\uff9b\001\002\000\024\035\uffa1" +
    "\036\uffa1\037\uffa1\047\uffa1\050\uffa1\057\uffa1\070\uffa1\071" +
    "\uffa1\072\uffa1\001\002\000\014\035\056\036\052\050\020" +
    "\057\022\072\054\001\002\000\014\035\056\036\052\050" +
    "\020\057\022\072\054\001\002\000\024\035\uffa2\036\uffa2" +
    "\037\uffa2\047\uffa2\050\uffa2\057\uffa2\070\067\071\uffa2\072" +
    "\uffa2\001\002\000\024\035\uffa3\036\uffa3\037\uffa3\047\uffa3" +
    "\050\uffa3\057\uffa3\070\uffa3\071\uffa3\072\uffa3\001\002\000" +
    "\010\034\076\050\020\057\022\001\002\000\004\037\uff96" +
    "\001\002\000\006\033\100\034\101\001\002\000\006\050" +
    "\020\057\022\001\002\000\004\037\uff8d\001\002\000\012" +
    "\036\104\050\020\052\105\057\022\001\002\000\004\037" +
    "\uff8e\001\002\000\062\003\uffdb\012\uffdb\013\uffdb\014\uffdb" +
    "\016\uffdb\017\uffdb\021\uffdb\022\uffdb\024\uffdb\025\uffdb\026" +
    "\115\027\114\032\uffdb\037\uffdb\047\uffdb\050\uffdb\054\uffdb" +
    "\056\uffdb\057\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\067" +
    "\uffdb\001\002\000\062\003\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\016\uffd6\017\uffd6\021\uffd6\022\uffd6\024\uffd6\025\uffd6\026" +
    "\uffd6\027\uffd6\032\uffd6\037\uffd6\047\uffd6\050\uffd6\054\uffd6" +
    "\056\uffd6\057\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6\067" +
    "\uffd6\001\002\000\012\036\104\050\020\052\105\057\022" +
    "\001\002\000\062\003\uffd7\012\uffd7\013\uffd7\014\uffd7\016" +
    "\uffd7\017\uffd7\021\uffd7\022\uffd7\024\uffd7\025\uffd7\026\uffd7" +
    "\027\uffd7\032\uffd7\037\uffd7\047\uffd7\050\uffd7\054\uffd7\056" +
    "\uffd7\057\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\067\uffd7" +
    "\001\002\000\004\037\uff8f\001\002\000\062\003\uffd8\012" +
    "\uffd8\013\uffd8\014\uffd8\016\uffd8\017\uffd8\021\uffd8\022\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\032\uffd8\037\uffd8\047" +
    "\uffd8\050\uffd8\054\uffd8\056\uffd8\057\uffd8\061\uffd8\062\uffd8" +
    "\063\uffd8\064\uffd8\067\uffd8\001\002\000\056\003\uffde\012" +
    "\uffde\013\uffde\014\uffde\016\uffde\017\uffde\021\uffde\022\uffde" +
    "\024\112\025\111\032\uffde\037\uffde\047\uffde\050\uffde\054" +
    "\uffde\056\uffde\057\uffde\061\uffde\062\uffde\063\uffde\064\uffde" +
    "\067\uffde\001\002\000\012\036\104\050\020\052\105\057" +
    "\022\001\002\000\012\036\104\050\020\052\105\057\022" +
    "\001\002\000\062\003\uffdd\012\uffdd\013\uffdd\014\uffdd\016" +
    "\uffdd\017\uffdd\021\uffdd\022\uffdd\024\uffdd\025\uffdd\026\115" +
    "\027\114\032\uffdd\037\uffdd\047\uffdd\050\uffdd\054\uffdd\056" +
    "\uffdd\057\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\067\uffdd" +
    "\001\002\000\012\036\104\050\020\052\105\057\022\001" +
    "\002\000\012\036\104\050\020\052\105\057\022\001\002" +
    "\000\062\003\uffda\012\uffda\013\uffda\014\uffda\016\uffda\017" +
    "\uffda\021\uffda\022\uffda\024\uffda\025\uffda\026\uffda\027\uffda" +
    "\032\uffda\037\uffda\047\uffda\050\uffda\054\uffda\056\uffda\057" +
    "\uffda\061\uffda\062\uffda\063\uffda\064\uffda\067\uffda\001\002" +
    "\000\062\003\uffd9\012\uffd9\013\uffd9\014\uffd9\016\uffd9\017" +
    "\uffd9\021\uffd9\022\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\032\uffd9\037\uffd9\047\uffd9\050\uffd9\054\uffd9\056\uffd9\057" +
    "\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\067\uffd9\001\002" +
    "\000\062\003\uffdc\012\uffdc\013\uffdc\014\uffdc\016\uffdc\017" +
    "\uffdc\021\uffdc\022\uffdc\024\uffdc\025\uffdc\026\115\027\114" +
    "\032\uffdc\037\uffdc\047\uffdc\050\uffdc\054\uffdc\056\uffdc\057" +
    "\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\067\uffdc\001\002" +
    "\000\010\024\112\025\111\037\122\001\002\000\062\003" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\016\uffd5\017\uffd5\021\uffd5" +
    "\022\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\032\uffd5\037" +
    "\uffd5\047\uffd5\050\uffd5\054\uffd5\056\uffd5\057\uffd5\061\uffd5" +
    "\062\uffd5\063\uffd5\064\uffd5\067\uffd5\001\002\000\010\037" +
    "\124\070\067\071\070\001\002\000\024\035\uff9f\036\uff9f" +
    "\037\uff9f\047\uff9f\050\uff9f\057\uff9f\070\uff9f\071\uff9f\072" +
    "\uff9f\001\002\000\004\052\126\001\002\000\004\047\127" +
    "\001\002\000\014\035\056\036\052\050\020\057\022\072" +
    "\054\001\002\000\010\047\131\070\067\071\070\001\002" +
    "\000\010\034\076\050\020\057\022\001\002\000\004\037" +
    "\uff95\001\002\000\030\003\135\012\013\016\032\021\037" +
    "\050\020\056\025\057\022\061\027\062\036\063\033\064" +
    "\014\001\002\000\032\003\135\012\013\016\032\021\037" +
    "\022\201\050\020\056\025\057\022\061\027\062\036\063" +
    "\033\064\014\001\002\000\026\003\135\012\013\015\144" +
    "\016\032\021\037\047\142\050\020\054\146\056\025\057" +
    "\022\001\002\000\050\003\uffbb\012\uffbb\013\uffbb\014\uffbb" +
    "\016\uffbb\017\uffbb\021\uffbb\022\uffbb\032\uffbb\037\uffbb\050" +
    "\uffbb\054\uffbb\056\uffbb\057\uffbb\061\uffbb\062\uffbb\063\uffbb" +
    "\064\uffbb\067\uffbb\001\002\000\050\003\uffc0\012\uffc0\013" +
    "\uffc0\014\uffc0\016\uffc0\017\uffc0\021\uffc0\022\uffc0\032\uffc0" +
    "\037\uffc0\050\uffc0\054\uffc0\056\uffc0\057\uffc0\061\uffc0\062" +
    "\uffc0\063\uffc0\064\uffc0\067\uffc0\001\002\000\004\023\163" +
    "\001\002\000\050\003\uffbf\012\uffbf\013\uffbf\014\uffbf\016" +
    "\uffbf\017\uffbf\021\uffbf\022\uffbf\032\uffbf\037\uffbf\050\uffbf" +
    "\054\uffbf\056\uffbf\057\uffbf\061\uffbf\062\uffbf\063\uffbf\064" +
    "\uffbf\067\uffbf\001\002\000\050\003\uffc1\012\uffc1\013\uffc1" +
    "\014\uffc1\016\uffc1\017\uffc1\021\uffc1\022\uffc1\032\uffc1\037" +
    "\uffc1\050\uffc1\054\uffc1\056\uffc1\057\uffc1\061\uffc1\062\uffc1" +
    "\063\uffc1\064\uffc1\067\uffc1\001\002\000\050\003\uffbc\012" +
    "\uffbc\013\uffbc\014\uffbc\016\uffbc\017\uffbc\021\uffbc\022\uffbc" +
    "\032\uffbc\037\uffbc\050\uffbc\054\uffbc\056\uffbc\057\uffbc\061" +
    "\uffbc\062\uffbc\063\uffbc\064\uffbc\067\uffbc\001\002\000\032" +
    "\003\135\012\013\013\150\016\032\021\037\050\020\056" +
    "\025\057\022\061\027\062\036\063\033\064\014\001\002" +
    "\000\050\003\uffbe\012\uffbe\013\uffbe\014\uffbe\016\uffbe\017" +
    "\uffbe\021\uffbe\022\uffbe\032\uffbe\037\uffbe\050\uffbe\054\uffbe" +
    "\056\uffbe\057\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\067" +
    "\uffbe\001\002\000\050\003\uffbd\012\uffbd\013\uffbd\014\uffbd" +
    "\016\uffbd\017\uffbd\021\uffbd\022\uffbd\032\uffbd\037\uffbd\050" +
    "\uffbd\054\uffbd\056\uffbd\057\uffbd\061\uffbd\062\uffbd\063\uffbd" +
    "\064\uffbd\067\uffbd\001\002\000\032\003\135\012\013\013" +
    "\155\016\032\021\037\050\020\056\025\057\022\061\027" +
    "\062\036\063\033\064\014\001\002\000\050\003\uffa7\012" +
    "\uffa7\013\uffa7\014\uffa7\016\uffa7\017\uffa7\021\uffa7\022\uffa7" +
    "\032\uffa7\037\uffa7\050\uffa7\054\uffa7\056\uffa7\057\uffa7\061" +
    "\uffa7\062\uffa7\063\uffa7\064\uffa7\067\uffa7\001\002\000\050" +
    "\003\ufff7\012\ufff7\013\ufff7\014\ufff7\016\ufff7\017\ufff7\021" +
    "\ufff7\022\ufff7\032\ufff7\037\ufff7\050\ufff7\054\ufff7\056\ufff7" +
    "\057\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\067\ufff7\001" +
    "\002\000\050\003\uffed\012\uffed\013\uffed\014\uffed\016\uffed" +
    "\017\uffed\021\uffed\022\uffed\032\uffed\037\uffed\050\uffed\054" +
    "\uffed\056\uffed\057\uffed\061\uffed\062\uffed\063\uffed\064\uffed" +
    "\067\uffed\001\002\000\050\003\ufff5\012\ufff5\013\ufff5\014" +
    "\ufff5\016\ufff5\017\ufff5\021\ufff5\022\ufff5\032\ufff5\037\ufff5" +
    "\050\ufff5\054\ufff5\056\ufff5\057\ufff5\061\ufff5\062\ufff5\063" +
    "\ufff5\064\ufff5\067\ufff5\001\002\000\050\003\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\016\ufff3\017\ufff3\021\ufff3\022\ufff3\032" +
    "\ufff3\037\ufff3\050\ufff3\054\ufff3\056\ufff3\057\ufff3\061\ufff3" +
    "\062\ufff3\063\ufff3\064\ufff3\067\ufff3\001\002\000\050\003" +
    "\uffa6\012\uffa6\013\uffa6\014\uffa6\016\uffa6\017\uffa6\021\uffa6" +
    "\022\uffa6\032\uffa6\037\uffa6\050\uffa6\054\uffa6\056\uffa6\057" +
    "\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\067\uffa6\001\002" +
    "\000\050\003\ufff1\012\ufff1\013\ufff1\014\ufff1\016\ufff1\017" +
    "\ufff1\021\ufff1\022\ufff1\032\ufff1\037\ufff1\050\ufff1\054\ufff1" +
    "\056\ufff1\057\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\067" +
    "\ufff1\001\002\000\050\003\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\016\uffeb\017\uffeb\021\uffeb\022\uffeb\032\uffeb\037\uffeb\050" +
    "\uffeb\054\uffeb\056\uffeb\057\uffeb\061\uffeb\062\uffeb\063\uffeb" +
    "\064\uffeb\067\uffeb\001\002\000\050\003\uffef\012\uffef\013" +
    "\uffef\014\uffef\016\uffef\017\uffef\021\uffef\022\uffef\032\uffef" +
    "\037\uffef\050\uffef\054\uffef\056\uffef\057\uffef\061\uffef\062" +
    "\uffef\063\uffef\064\uffef\067\uffef\001\002\000\050\003\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\016\uffe7\017\uffe7\021\uffe7\022" +
    "\uffe7\032\uffe7\037\uffe7\050\uffe7\054\uffe7\056\uffe7\057\uffe7" +
    "\061\uffe7\062\uffe7\063\uffe7\064\uffe7\067\uffe7\001\002\000" +
    "\050\003\uffe9\012\uffe9\013\uffe9\014\uffe9\016\uffe9\017\uffe9" +
    "\021\uffe9\022\uffe9\032\uffe9\037\uffe9\050\uffe9\054\uffe9\056" +
    "\uffe9\057\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\067\uffe9" +
    "\001\002\000\012\036\104\050\020\052\105\057\022\001" +
    "\002\000\050\003\uffca\012\uffca\013\uffca\014\uffca\016\uffca" +
    "\017\uffca\021\uffca\022\uffca\032\uffca\037\uffca\050\uffca\054" +
    "\uffca\056\uffca\057\uffca\061\uffca\062\uffca\063\uffca\064\uffca" +
    "\067\uffca\001\002\000\064\003\uffd6\012\uffd6\013\uffd6\014" +
    "\uffd6\016\uffd6\017\uffd6\021\uffd6\022\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\027\uffd6\032\uffd6\036\170\037\uffd6\047\uffd6\050" +
    "\uffd6\054\uffd6\056\uffd6\057\uffd6\061\uffd6\062\uffd6\063\uffd6" +
    "\064\uffd6\067\uffd6\001\002\000\052\003\uffb8\012\uffb8\013" +
    "\uffb8\014\uffb8\016\uffb8\017\uffb8\021\uffb8\022\uffb8\032\uffb8" +
    "\037\uffb8\047\167\050\uffb8\054\uffb8\056\uffb8\057\uffb8\061" +
    "\uffb8\062\uffb8\063\uffb8\064\uffb8\067\uffb8\001\002\000\050" +
    "\003\uffcb\012\uffcb\013\uffcb\014\uffcb\016\uffcb\017\uffcb\021" +
    "\uffcb\022\uffcb\032\uffcb\037\uffcb\050\uffcb\054\uffcb\056\uffcb" +
    "\057\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\067\uffcb\001" +
    "\002\000\014\037\uffe1\047\uffe1\050\020\052\171\057\022" +
    "\001\002\000\006\037\uffe4\047\uffe4\001\002\000\006\037" +
    "\uffe5\047\uffe5\001\002\000\006\037\175\047\174\001\002" +
    "\000\010\050\020\052\177\057\022\001\002\000\004\047" +
    "\176\001\002\000\050\003\uffce\012\uffce\013\uffce\014\uffce" +
    "\016\uffce\017\uffce\021\uffce\022\uffce\032\uffce\037\uffce\050" +
    "\uffce\054\uffce\056\uffce\057\uffce\061\uffce\062\uffce\063\uffce" +
    "\064\uffce\067\uffce\001\002\000\006\037\uffe2\047\uffe2\001" +
    "\002\000\006\037\uffe3\047\uffe3\001\002\000\050\003\uff97" +
    "\012\uff97\013\uff97\014\uff97\016\uff97\017\uff97\021\uff97\022" +
    "\uff97\032\uff97\037\uff97\050\uff97\054\uff97\056\uff97\057\uff97" +
    "\061\uff97\062\uff97\063\uff97\064\uff97\067\uff97\001\002\000" +
    "\030\003\135\012\013\016\032\021\037\050\020\056\025" +
    "\057\022\061\027\062\036\063\033\064\014\001\002\000" +
    "\032\003\135\012\013\016\032\021\037\037\207\050\020" +
    "\056\025\057\022\061\027\062\036\063\033\064\014\001" +
    "\002\000\010\023\163\036\170\037\205\001\002\000\004" +
    "\047\206\001\002\000\050\003\uff92\012\uff92\013\uff92\014" +
    "\uff92\016\uff92\017\uff92\021\uff92\022\uff92\032\uff92\037\uff92" +
    "\050\uff92\054\uff92\056\uff92\057\uff92\061\uff92\062\uff92\063" +
    "\uff92\064\uff92\067\uff92\001\002\000\004\047\210\001\002" +
    "\000\050\003\uff91\012\uff91\013\uff91\014\uff91\016\uff91\017" +
    "\uff91\021\uff91\022\uff91\032\uff91\037\uff91\050\uff91\054\uff91" +
    "\056\uff91\057\uff91\061\uff91\062\uff91\063\uff91\064\uff91\067" +
    "\uff91\001\002\000\030\003\135\012\013\016\032\021\037" +
    "\050\020\056\025\057\022\061\027\062\036\063\033\064" +
    "\014\001\002\000\032\003\135\012\013\016\032\021\037" +
    "\037\216\050\020\056\025\057\022\061\027\062\036\063" +
    "\033\064\014\001\002\000\010\023\163\036\170\037\214" +
    "\001\002\000\004\047\215\001\002\000\050\003\uff93\012" +
    "\uff93\013\uff93\014\uff93\016\uff93\017\uff93\021\uff93\022\uff93" +
    "\032\uff93\037\uff93\050\uff93\054\uff93\056\uff93\057\uff93\061" +
    "\uff93\062\uff93\063\uff93\064\uff93\067\uff93\001\002\000\004" +
    "\047\217\001\002\000\050\003\uff90\012\uff90\013\uff90\014" +
    "\uff90\016\uff90\017\uff90\021\uff90\022\uff90\032\uff90\037\uff90" +
    "\050\uff90\054\uff90\056\uff90\057\uff90\061\uff90\062\uff90\063" +
    "\uff90\064\uff90\067\uff90\001\002\000\014\035\056\036\052" +
    "\050\020\057\022\072\054\001\002\000\010\037\222\070" +
    "\067\071\070\001\002\000\004\020\223\001\002\000\030" +
    "\003\135\012\013\016\032\021\037\050\020\056\025\057" +
    "\022\061\027\062\036\063\033\064\014\001\002\000\032" +
    "\003\135\012\013\016\032\017\225\021\037\050\020\056" +
    "\025\057\022\061\027\062\036\063\033\064\014\001\002" +
    "\000\050\003\uff98\012\uff98\013\uff98\014\uff98\016\uff98\017" +
    "\uff98\021\uff98\022\uff98\032\uff98\037\uff98\050\uff98\054\uff98" +
    "\056\uff98\057\uff98\061\uff98\062\uff98\063\uff98\064\uff98\067" +
    "\uff98\001\002\000\004\047\227\001\002\000\050\003\uff94" +
    "\012\uff94\013\uff94\014\uff94\016\uff94\017\uff94\021\uff94\022" +
    "\uff94\032\uff94\037\uff94\050\uff94\054\uff94\056\uff94\057\uff94" +
    "\061\uff94\062\uff94\063\uff94\064\uff94\067\uff94\001\002\000" +
    "\034\002\ufffd\003\uffbd\012\uffbd\016\uffbd\021\uffbd\050\uffbd" +
    "\054\uffbd\056\uffbd\057\uffbd\061\uffbd\062\uffbd\063\uffbd\064" +
    "\uffbd\001\002\000\004\055\232\001\002\000\010\010\234" +
    "\011\233\060\235\001\002\000\056\003\uffb5\012\uffb5\013" +
    "\uffb5\014\uffb5\016\uffb5\017\uffb5\021\uffb5\022\uffb5\023\260" +
    "\032\uffb5\037\uffb5\044\257\047\256\050\uffb5\054\uffb5\056" +
    "\uffb5\057\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\067\uffb5" +
    "\001\002\000\056\003\uffba\012\uffba\013\uffba\014\uffba\016" +
    "\uffba\017\uffba\021\uffba\022\uffba\023\244\032\uffba\037\uffba" +
    "\044\243\047\242\050\uffba\054\uffba\056\uffba\057\uffba\061" +
    "\uffba\062\uffba\063\uffba\064\uffba\067\uffba\001\002\000\054" +
    "\003\uffb1\012\uffb1\013\uffb1\014\uffb1\016\uffb1\017\uffb1\021" +
    "\uffb1\022\uffb1\023\237\032\uffb1\037\uffb1\047\236\050\uffb1" +
    "\054\uffb1\056\uffb1\057\uffb1\061\uffb1\062\uffb1\063\uffb1\064" +
    "\uffb1\067\uffb1\001\002\000\050\003\uffc3\012\uffc3\013\uffc3" +
    "\014\uffc3\016\uffc3\017\uffc3\021\uffc3\022\uffc3\032\uffc3\037" +
    "\uffc3\050\uffc3\054\uffc3\056\uffc3\057\uffc3\061\uffc3\062\uffc3" +
    "\063\uffc3\064\uffc3\067\uffc3\001\002\000\004\035\240\001" +
    "\002\000\052\003\uffb0\012\uffb0\013\uffb0\014\uffb0\016\uffb0" +
    "\017\uffb0\021\uffb0\022\uffb0\032\uffb0\037\uffb0\047\241\050" +
    "\uffb0\054\uffb0\056\uffb0\057\uffb0\061\uffb0\062\uffb0\063\uffb0" +
    "\064\uffb0\067\uffb0\001\002\000\050\003\uffc2\012\uffc2\013" +
    "\uffc2\014\uffc2\016\uffc2\017\uffc2\021\uffc2\022\uffc2\032\uffc2" +
    "\037\uffc2\050\uffc2\054\uffc2\056\uffc2\057\uffc2\061\uffc2\062" +
    "\uffc2\063\uffc2\064\uffc2\067\uffc2\001\002\000\050\003\uffcd" +
    "\012\uffcd\013\uffcd\014\uffcd\016\uffcd\017\uffcd\021\uffcd\022" +
    "\uffcd\032\uffcd\037\uffcd\050\uffcd\054\uffcd\056\uffcd\057\uffcd" +
    "\061\uffcd\062\uffcd\063\uffcd\064\uffcd\067\uffcd\001\002\000" +
    "\004\052\247\001\002\000\012\036\104\050\020\052\105" +
    "\057\022\001\002\000\052\003\uffb9\012\uffb9\013\uffb9\014" +
    "\uffb9\016\uffb9\017\uffb9\021\uffb9\022\uffb9\032\uffb9\037\uffb9" +
    "\047\246\050\uffb9\054\uffb9\056\uffb9\057\uffb9\061\uffb9\062" +
    "\uffb9\063\uffb9\064\uffb9\067\uffb9\001\002\000\050\003\uffcc" +
    "\012\uffcc\013\uffcc\014\uffcc\016\uffcc\017\uffcc\021\uffcc\022" +
    "\uffcc\032\uffcc\037\uffcc\050\uffcc\054\uffcc\056\uffcc\057\uffcc" +
    "\061\uffcc\062\uffcc\063\uffcc\064\uffcc\067\uffcc\001\002\000" +
    "\004\045\250\001\002\000\054\003\uffb7\012\uffb7\013\uffb7" +
    "\014\uffb7\016\uffb7\017\uffb7\021\uffb7\022\uffb7\032\uffb7\037" +
    "\uffb7\044\252\047\251\050\uffb7\054\uffb7\056\uffb7\057\uffb7" +
    "\061\uffb7\062\uffb7\063\uffb7\064\uffb7\067\uffb7\001\002\000" +
    "\050\003\uffc9\012\uffc9\013\uffc9\014\uffc9\016\uffc9\017\uffc9" +
    "\021\uffc9\022\uffc9\032\uffc9\037\uffc9\050\uffc9\054\uffc9\056" +
    "\uffc9\057\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\067\uffc9" +
    "\001\002\000\004\052\253\001\002\000\004\045\254\001" +
    "\002\000\052\003\uffb6\012\uffb6\013\uffb6\014\uffb6\016\uffb6" +
    "\017\uffb6\021\uffb6\022\uffb6\032\uffb6\037\uffb6\047\255\050" +
    "\uffb6\054\uffb6\056\uffb6\057\uffb6\061\uffb6\062\uffb6\063\uffb6" +
    "\064\uffb6\067\uffb6\001\002\000\050\003\uffc8\012\uffc8\013" +
    "\uffc8\014\uffc8\016\uffc8\017\uffc8\021\uffc8\022\uffc8\032\uffc8" +
    "\037\uffc8\050\uffc8\054\uffc8\056\uffc8\057\uffc8\061\uffc8\062" +
    "\uffc8\063\uffc8\064\uffc8\067\uffc8\001\002\000\050\003\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\016\uffc7\017\uffc7\021\uffc7\022" +
    "\uffc7\032\uffc7\037\uffc7\050\uffc7\054\uffc7\056\uffc7\057\uffc7" +
    "\061\uffc7\062\uffc7\063\uffc7\064\uffc7\067\uffc7\001\002\000" +
    "\004\052\263\001\002\000\004\006\261\001\002\000\052" +
    "\003\uffb4\012\uffb4\013\uffb4\014\uffb4\016\uffb4\017\uffb4\021" +
    "\uffb4\022\uffb4\032\uffb4\037\uffb4\047\262\050\uffb4\054\uffb4" +
    "\056\uffb4\057\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\067" +
    "\uffb4\001\002\000\050\003\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\016\uffc6\017\uffc6\021\uffc6\022\uffc6\032\uffc6\037\uffc6\050" +
    "\uffc6\054\uffc6\056\uffc6\057\uffc6\061\uffc6\062\uffc6\063\uffc6" +
    "\064\uffc6\067\uffc6\001\002\000\004\045\264\001\002\000" +
    "\054\003\uffb3\012\uffb3\013\uffb3\014\uffb3\016\uffb3\017\uffb3" +
    "\021\uffb3\022\uffb3\032\uffb3\037\uffb3\044\266\047\265\050" +
    "\uffb3\054\uffb3\056\uffb3\057\uffb3\061\uffb3\062\uffb3\063\uffb3" +
    "\064\uffb3\067\uffb3\001\002\000\050\003\uffc5\012\uffc5\013" +
    "\uffc5\014\uffc5\016\uffc5\017\uffc5\021\uffc5\022\uffc5\032\uffc5" +
    "\037\uffc5\050\uffc5\054\uffc5\056\uffc5\057\uffc5\061\uffc5\062" +
    "\uffc5\063\uffc5\064\uffc5\067\uffc5\001\002\000\004\052\267" +
    "\001\002\000\004\045\270\001\002\000\052\003\uffb2\012" +
    "\uffb2\013\uffb2\014\uffb2\016\uffb2\017\uffb2\021\uffb2\022\uffb2" +
    "\032\uffb2\037\uffb2\047\271\050\uffb2\054\uffb2\056\uffb2\057" +
    "\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\067\uffb2\001\002" +
    "\000\050\003\uffc4\012\uffc4\013\uffc4\014\uffc4\016\uffc4\017" +
    "\uffc4\021\uffc4\022\uffc4\032\uffc4\037\uffc4\050\uffc4\054\uffc4" +
    "\056\uffc4\057\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\067" +
    "\uffc4\001\002\000\006\002\000\040\273\001\002\000\004" +
    "\010\325\001\002\000\006\002\ufffe\040\275\001\002\000" +
    "\004\010\276\001\002\000\006\050\020\057\022\001\002" +
    "\000\004\036\300\001\002\000\006\010\302\037\303\001" +
    "\002\000\006\037\314\047\313\001\002\000\006\050\020" +
    "\057\022\001\002\000\030\003\135\012\013\016\032\021" +
    "\037\050\020\056\025\057\022\061\027\062\036\063\033" +
    "\064\014\001\002\000\032\003\135\012\013\016\032\021" +
    "\037\032\305\050\020\056\025\057\022\061\027\062\036" +
    "\063\033\064\014\001\002\000\004\023\306\001\002\000" +
    "\006\050\020\057\022\001\002\000\004\047\310\001\002" +
    "\000\004\041\311\001\002\000\006\002\uffd2\040\uffd2\001" +
    "\002\000\006\037\uffe0\047\uffe0\001\002\000\004\010\323" +
    "\001\002\000\030\003\135\012\013\016\032\021\037\050" +
    "\020\056\025\057\022\061\027\062\036\063\033\064\014" +
    "\001\002\000\032\003\135\012\013\016\032\021\037\032" +
    "\316\050\020\056\025\057\022\061\027\062\036\063\033" +
    "\064\014\001\002\000\004\023\317\001\002\000\006\050" +
    "\020\057\022\001\002\000\004\047\321\001\002\000\004" +
    "\041\322\001\002\000\006\002\uffd1\040\uffd1\001\002\000" +
    "\006\050\020\057\022\001\002\000\006\037\uffdf\047\uffdf" +
    "\001\002\000\006\050\020\057\022\001\002\000\004\036" +
    "\327\001\002\000\006\010\302\037\331\001\002\000\006" +
    "\037\340\047\313\001\002\000\030\003\135\012\013\016" +
    "\032\021\037\050\020\056\025\057\022\061\027\062\036" +
    "\063\033\064\014\001\002\000\032\003\135\012\013\016" +
    "\032\021\037\032\333\050\020\056\025\057\022\061\027" +
    "\062\036\063\033\064\014\001\002\000\004\023\334\001" +
    "\002\000\006\050\020\057\022\001\002\000\004\047\336" +
    "\001\002\000\004\041\337\001\002\000\006\002\uffd4\040" +
    "\uffd4\001\002\000\030\003\135\012\013\016\032\021\037" +
    "\050\020\056\025\057\022\061\027\062\036\063\033\064" +
    "\014\001\002\000\032\003\135\012\013\016\032\021\037" +
    "\032\342\050\020\056\025\057\022\061\027\062\036\063" +
    "\033\064\014\001\002\000\004\023\343\001\002\000\006" +
    "\050\020\057\022\001\002\000\004\047\345\001\002\000" +
    "\004\041\346\001\002\000\006\002\uffd3\040\uffd3\001\002" +
    "\000\006\050\020\057\022\001\002\000\004\037\351\001" +
    "\002\000\004\066\352\001\002\000\010\006\370\050\020" +
    "\057\022\001\002\000\006\065\354\066\355\001\002\000" +
    "\050\003\uff8c\012\uff8c\013\uff8c\014\uff8c\016\uff8c\017\uff8c" +
    "\021\uff8c\022\uff8c\032\uff8c\037\uff8c\050\uff8c\054\uff8c\056" +
    "\uff8c\057\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c\067\uff8c" +
    "\001\002\000\010\006\356\050\020\057\022\001\002\000" +
    "\004\023\364\001\002\000\004\023\360\001\002\000\030" +
    "\003\135\012\013\016\032\021\037\050\020\056\025\057" +
    "\022\061\027\062\036\063\033\064\014\001\002\000\032" +
    "\003\135\012\013\016\032\021\037\050\020\056\025\057" +
    "\022\061\027\062\036\063\033\064\014\067\362\001\002" +
    "\000\004\047\363\001\002\000\006\065\uff89\066\uff89\001" +
    "\002\000\030\003\135\012\013\016\032\021\037\050\020" +
    "\056\025\057\022\061\027\062\036\063\033\064\014\001" +
    "\002\000\032\003\135\012\013\016\032\021\037\050\020" +
    "\056\025\057\022\061\027\062\036\063\033\064\014\067" +
    "\366\001\002\000\004\047\367\001\002\000\006\065\uff8b" +
    "\066\uff8b\001\002\000\004\023\376\001\002\000\004\023" +
    "\372\001\002\000\030\003\135\012\013\016\032\021\037" +
    "\050\020\056\025\057\022\061\027\062\036\063\033\064" +
    "\014\001\002\000\032\003\135\012\013\016\032\021\037" +
    "\050\020\056\025\057\022\061\027\062\036\063\033\064" +
    "\014\067\374\001\002\000\004\047\375\001\002\000\006" +
    "\065\uff88\066\uff88\001\002\000\030\003\135\012\013\016" +
    "\032\021\037\050\020\056\025\057\022\061\027\062\036" +
    "\063\033\064\014\001\002\000\032\003\135\012\013\016" +
    "\032\021\037\050\020\056\025\057\022\061\027\062\036" +
    "\063\033\064\014\067\u0100\001\002\000\004\047\u0101\001" +
    "\002\000\006\065\uff8a\066\uff8a\001\002\000\016\035\056" +
    "\036\052\037\u010a\050\020\057\022\072\054\001\002\000" +
    "\004\015\u0104\001\002\000\032\003\u0107\012\013\013\u0106" +
    "\016\032\021\037\050\020\056\025\057\022\061\027\062" +
    "\036\063\033\064\014\001\002\000\032\003\135\012\013" +
    "\013\u0109\016\032\021\037\050\020\056\025\057\022\061" +
    "\027\062\036\063\033\064\014\001\002\000\050\003\uffa8" +
    "\012\uffa8\013\uffa8\014\uffa8\016\uffa8\017\uffa8\021\uffa8\022" +
    "\uffa8\032\uffa8\037\uffa8\050\uffa8\054\uffa8\056\uffa8\057\uffa8" +
    "\061\uffa8\062\uffa8\063\uffa8\064\uffa8\067\uffa8\001\002\000" +
    "\030\003\135\012\013\013\u0108\015\144\016\032\021\037" +
    "\047\142\050\020\054\146\056\025\057\022\001\002\000" +
    "\050\003\uffa9\012\uffa9\013\uffa9\014\uffa9\016\uffa9\017\uffa9" +
    "\021\uffa9\022\uffa9\032\uffa9\037\uffa9\050\uffa9\054\uffa9\056" +
    "\uffa9\057\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9\067\uffa9" +
    "\001\002\000\050\003\uffaa\012\uffaa\013\uffaa\014\uffaa\016" +
    "\uffaa\017\uffaa\021\uffaa\022\uffaa\032\uffaa\037\uffaa\050\uffaa" +
    "\054\uffaa\056\uffaa\057\uffaa\061\uffaa\062\uffaa\063\uffaa\064" +
    "\uffaa\067\uffaa\001\002\000\004\015\u0119\001\002\000\022" +
    "\035\uffa4\036\uffa4\037\uffa4\050\uffa4\057\uffa4\070\067\071" +
    "\070\072\uffa4\001\002\000\016\035\056\036\052\037\u010e" +
    "\050\020\057\022\072\054\001\002\000\022\035\uffa5\036" +
    "\uffa5\037\uffa5\050\uffa5\057\uffa5\070\067\071\070\072\uffa5" +
    "\001\002\000\006\003\u010f\015\u0110\001\002\000\032\003" +
    "\135\012\013\013\u0117\016\032\021\037\050\020\056\025" +
    "\057\022\061\027\062\036\063\033\064\014\001\002\000" +
    "\030\003\135\012\013\016\032\021\037\050\020\056\025" +
    "\057\022\061\027\062\036\063\033\064\014\001\002\000" +
    "\034\003\135\012\013\013\u0113\014\u0112\016\032\021\037" +
    "\050\020\056\025\057\022\061\027\062\036\063\033\064" +
    "\014\001\002\000\030\003\135\012\013\016\032\021\037" +
    "\050\020\056\025\057\022\061\027\062\036\063\033\064" +
    "\014\001\002\000\050\003\uffaf\012\uffaf\013\uffaf\014\uffaf" +
    "\016\uffaf\017\uffaf\021\uffaf\022\uffaf\032\uffaf\037\uffaf\050" +
    "\uffaf\054\uffaf\056\uffaf\057\uffaf\061\uffaf\062\uffaf\063\uffaf" +
    "\064\uffaf\067\uffaf\001\002\000\032\003\135\012\013\013" +
    "\u0115\016\032\021\037\050\020\056\025\057\022\061\027" +
    "\062\036\063\033\064\014\001\002\000\050\003\uff99\012" +
    "\uff99\013\uff99\014\uff99\016\uff99\017\uff99\021\uff99\022\uff99" +
    "\032\uff99\037\uff99\050\uff99\054\uff99\056\uff99\057\uff99\061" +
    "\uff99\062\uff99\063\uff99\064\uff99\067\uff99\001\002\000\032" +
    "\003\135\012\013\013\u0118\016\032\021\037\050\020\056" +
    "\025\057\022\061\027\062\036\063\033\064\014\001\002" +
    "\000\050\003\uffad\012\uffad\013\uffad\014\uffad\016\uffad\017" +
    "\uffad\021\uffad\022\uffad\032\uffad\037\uffad\050\uffad\054\uffad" +
    "\056\uffad\057\uffad\061\uffad\062\uffad\063\uffad\064\uffad\067" +
    "\uffad\001\002\000\050\003\uffae\012\uffae\013\uffae\014\uffae" +
    "\016\uffae\017\uffae\021\uffae\022\uffae\032\uffae\037\uffae\050" +
    "\uffae\054\uffae\056\uffae\057\uffae\061\uffae\062\uffae\063\uffae" +
    "\064\uffae\067\uffae\001\002\000\032\003\135\012\013\013" +
    "\u011b\016\032\021\037\050\020\056\025\057\022\061\027" +
    "\062\036\063\033\064\014\001\002\000\032\003\135\012" +
    "\013\013\u011c\016\032\021\037\050\020\056\025\057\022" +
    "\061\027\062\036\063\033\064\014\001\002\000\050\003" +
    "\uffab\012\uffab\013\uffab\014\uffab\016\uffab\017\uffab\021\uffab" +
    "\022\uffab\032\uffab\037\uffab\050\uffab\054\uffab\056\uffab\057" +
    "\uffab\061\uffab\062\uffab\063\uffab\064\uffab\067\uffab\001\002" +
    "\000\050\003\uffac\012\uffac\013\uffac\014\uffac\016\uffac\017" +
    "\uffac\021\uffac\022\uffac\032\uffac\037\uffac\050\uffac\054\uffac" +
    "\056\uffac\057\uffac\061\uffac\062\uffac\063\uffac\064\uffac\067" +
    "\uffac\001\002\000\032\003\135\012\013\016\032\021\037" +
    "\050\020\054\u011f\056\025\057\022\061\027\062\036\063" +
    "\033\064\014\001\002\000\004\002\ufffb\001\002\000\004" +
    "\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011d\000\004\002\005\001\001\000\030\003\u011c\004" +
    "\015\006\020\007\022\010\027\011\033\014\016\015\030" +
    "\016\037\020\023\022\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\014\004\015\006\020\007\022\010" +
    "\027\011\033\014\016\015\030\016\037\020\023\022\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\150\006\152\007\153\010\155\011\157\014\151\015\156" +
    "\016\161\020\023\022\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\230\001\001\000\016\004\136\006\142\007\140\010\144" +
    "\011\135\020\137\001\001\000\004\020\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\052\020\054\001" +
    "\001\000\006\012\122\020\054\001\001\000\002\001\001" +
    "\000\006\012\065\020\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\071" +
    "\020\054\001\001\000\006\012\070\020\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\073\020\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\076\001\001\000\002\001\001\000\014\020\102\024\105" +
    "\025\107\026\101\027\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\102\025\120" +
    "\026\101\027\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\102" +
    "\026\117\027\106\001\001\000\010\020\102\026\112\027" +
    "\106\001\001\000\002\001\001\000\006\020\102\027\116" +
    "\001\001\000\006\020\102\027\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\127\020\054" +
    "\001\001\000\002\001\001\000\006\005\131\020\074\001" +
    "\001\000\002\001\001\000\030\003\133\004\015\006\020" +
    "\007\022\010\027\011\033\014\016\015\030\016\037\020" +
    "\023\022\034\001\001\000\026\004\150\006\152\007\153" +
    "\010\155\011\157\014\151\015\156\016\161\020\023\022" +
    "\160\001\001\000\016\004\136\006\142\007\140\010\144" +
    "\011\135\020\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\146\004\015\006\020\007" +
    "\022\010\027\011\033\014\016\015\030\016\037\020\023" +
    "\022\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\004\150\006\152\007\153\010\155\011\157\014\151" +
    "\015\156\016\161\020\023\022\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\020\164\022\163\024\165\025\107\026" +
    "\101\027\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\171\031" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\202\004\015\006\020\007\022\010" +
    "\027\011\033\014\016\015\030\016\037\020\203\022\034" +
    "\001\001\000\026\004\150\006\152\007\153\010\155\011" +
    "\157\014\151\015\156\016\161\020\023\022\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\211\004\015" +
    "\006\020\007\022\010\027\011\033\014\016\015\030\016" +
    "\037\020\212\022\034\001\001\000\026\004\150\006\152" +
    "\007\153\010\155\011\157\014\151\015\156\016\161\020" +
    "\023\022\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\220\020\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\223\004\015\006\020\007\022\010" +
    "\027\011\033\014\016\015\030\016\037\020\023\022\034" +
    "\001\001\000\026\004\150\006\152\007\153\010\155\011" +
    "\157\014\151\015\156\016\161\020\023\022\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\020\102\024" +
    "\244\025\107\026\101\027\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\273\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\276\001\001" +
    "\000\002\001\001\000\004\030\300\001\001\000\002\001" +
    "\001\000\004\020\311\001\001\000\030\003\303\004\015" +
    "\006\020\007\022\010\027\011\033\014\016\015\030\016" +
    "\037\020\023\022\034\001\001\000\026\004\150\006\152" +
    "\007\153\010\155\011\157\014\151\015\156\016\161\020" +
    "\023\022\160\001\001\000\002\001\001\000\004\020\306" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\314" +
    "\004\015\006\020\007\022\010\027\011\033\014\016\015" +
    "\030\016\037\020\023\022\034\001\001\000\026\004\150" +
    "\006\152\007\153\010\155\011\157\014\151\015\156\016" +
    "\161\020\023\022\160\001\001\000\002\001\001\000\004" +
    "\020\317\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\323\001\001\000\002\001\001" +
    "\000\004\020\325\001\001\000\002\001\001\000\004\030" +
    "\327\001\001\000\002\001\001\000\030\003\331\004\015" +
    "\006\020\007\022\010\027\011\033\014\016\015\030\016" +
    "\037\020\023\022\034\001\001\000\026\004\150\006\152" +
    "\007\153\010\155\011\157\014\151\015\156\016\161\020" +
    "\023\022\160\001\001\000\002\001\001\000\004\020\334" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\340\004\015\006\020\007\022\010\027" +
    "\011\033\014\016\015\030\016\037\020\023\022\034\001" +
    "\001\000\026\004\150\006\152\007\153\010\155\011\157" +
    "\014\151\015\156\016\161\020\023\022\160\001\001\000" +
    "\002\001\001\000\004\020\343\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\347\001" +
    "\001\000\002\001\001\000\004\017\352\001\001\000\004" +
    "\020\370\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\356\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\360\004\015\006\020\007\022\010\027\011" +
    "\033\014\016\015\030\016\037\020\023\022\034\001\001" +
    "\000\026\004\150\006\152\007\153\010\155\011\157\014" +
    "\151\015\156\016\161\020\023\022\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\364\004\015\006" +
    "\020\007\022\010\027\011\033\014\016\015\030\016\037" +
    "\020\023\022\034\001\001\000\026\004\150\006\152\007" +
    "\153\010\155\011\157\014\151\015\156\016\161\020\023" +
    "\022\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\372\004\015" +
    "\006\020\007\022\010\027\011\033\014\016\015\030\016" +
    "\037\020\023\022\034\001\001\000\026\004\150\006\152" +
    "\007\153\010\155\011\157\014\151\015\156\016\161\020" +
    "\023\022\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\376\004\015\006\020\007\022\010\027\011" +
    "\033\014\016\015\030\016\037\020\023\022\034\001\001" +
    "\000\026\004\150\006\152\007\153\010\155\011\157\014" +
    "\151\015\156\016\161\020\023\022\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\u010a\020\054\023" +
    "\u010b\001\001\000\002\001\001\000\030\003\u0104\004\015" +
    "\006\020\007\022\010\027\011\033\014\016\015\030\016" +
    "\037\020\023\022\034\001\001\000\026\004\150\006\152" +
    "\007\153\010\155\011\157\014\151\015\156\016\161\020" +
    "\023\022\160\001\001\000\002\001\001\000\016\004\136" +
    "\006\142\007\140\010\144\011\135\020\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\u010c\020\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\u0115\004\015\006\020" +
    "\007\022\010\027\011\033\014\016\015\030\016\037\020" +
    "\023\022\034\001\001\000\030\003\u0110\004\015\006\020" +
    "\007\022\010\027\011\033\014\016\015\030\016\037\020" +
    "\023\022\034\001\001\000\026\004\150\006\152\007\153" +
    "\010\155\011\157\014\151\015\156\016\161\020\023\022" +
    "\160\001\001\000\030\003\u0113\004\015\006\020\007\022" +
    "\010\027\011\033\014\016\015\030\016\037\020\023\022" +
    "\034\001\001\000\002\001\001\000\026\004\150\006\152" +
    "\007\153\010\155\011\157\014\151\015\156\016\161\020" +
    "\023\022\160\001\001\000\002\001\001\000\026\004\150" +
    "\006\152\007\153\010\155\011\157\014\151\015\156\016" +
    "\161\020\023\022\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\u0119\004\015\006\020\007\022\010" +
    "\027\011\033\014\016\015\030\016\037\020\023\022\034" +
    "\001\001\000\026\004\150\006\152\007\153\010\155\011" +
    "\157\014\151\015\156\016\161\020\023\022\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\150\006" +
    "\152\007\153\010\155\011\157\014\151\015\156\016\161" +
    "\020\023\022\160\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
        String error = "";
        if(s.value != null){
            error = "Error Sintactico en la linea "+s.right+ " Columna "+(s.left+1)+ ". No se esperaba esto: "+ "\""+ s.value+ "\""+ "\n" ;
           System.out.print(error);
        }
        //errores.add(error)
    }
    
    protected int error_sync_size(){
        return 2;
    }
    


    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CASE ::= When Identificadoroletra Igual SENTENCIA Stop P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                Node raiz = new Node("Raiz",false);
                Node x = new Node("CASE",false);
                x.addHijo((Node)h1);
                Node THEN = new Node("THEN",false);
                for(int i = 0;i<((Node)h2).getHijos().size();i++){
                THEN.addHijo(((Node)h2).getHijos().get(i));
                }
                x.addHijo(THEN);
                raiz.addHijo(x);
                RESULT = raiz;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CASE ::= CASE When Identificadoroletra Igual SENTENCIA Stop P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                
                Node raiz = new Node("ROOT",false);
                for(int i = 0;i<((Node)h1).getHijos().size();i++){
                raiz.addHijo(((Node)h1).getHijos().get(i));
                }
                Node x = new Node("CASE",false);
                x.addHijo((Node)h2);
                Node THEN = new Node("THEN",false);
                for(int i = 0;i<((Node)h3).getHijos().size();i++){
                THEN.addHijo(((Node)h3).getHijos().get(i));
                }
                x.addHijo(THEN);
                raiz.addHijo(x);
                RESULT = raiz;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CASE ::= When Caracter Igual SENTENCIA Stop P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                Node raiz = new Node("ROOT",false);
                Node x = new Node("CHAR-CASE",false);
                x.addHijo(new Node((h1.toString()).substring(1,2),false));
                Node THEN = new Node("THEN",false);
                for(int i = 0;i<((Node)h2).getHijos().size();i++){
                THEN.addHijo(((Node)h2).getHijos().get(i));
                }
                x.addHijo(THEN);
                raiz.addHijo(x);
                RESULT = raiz;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CASE ::= CASE When Caracter Igual SENTENCIA Stop P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                
                Node raiz = new Node("ROOT",false);
                for(int i = 0;i<((Node)h1).getHijos().size();i++){
                raiz.addHijo(((Node)h1).getHijos().get(i));
                }
                Node x = new Node("CHAR-CASE",false);
                x.addHijo(new Node((h2.toString()).substring(1,2),false));
                Node THEN = new Node("THEN",false);
                for(int i = 0;i<((Node)h3).getHijos().size();i++){
                THEN.addHijo(((Node)h3).getHijos().get(i));
                }
                x.addHijo(THEN);
                raiz.addHijo(x);
                RESULT = raiz;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // MATCH ::= OpenMatch Parentesis_a Identificadoroletra Parentesis_c CASE CloseMatch 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
          Node x = new Node("OPENMATCH",false);
          x.addHijo((Node)h1);
          for(int i = 0;i<((Node)h2).getHijos().size();i++){
                x.addHijo(((Node)h2).getHijos().get(i));
           }
          RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MATCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DECLARACION_FOR ::= Op_incremento Identificadoroletra 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("FOR DECLARATION",false);
                x.addHijo((Node)h1);
                x.addHijo(new Node(h2.toString(),false));
                RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DECLARACION_FOR ::= Identificadoroletra Op_incremento 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("FOR DECLARATION",false);
                x.addHijo((Node)h1);
                x.addHijo(new Node(h2.toString(),false));
                RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DECLARACION_FOR ::= Identificadoroletra Op_atribucion EXP 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node x = new Node("FOR DECLARATION",false);
        x.addHijo((Node)h1);
        x.addHijo(new Node(h2.toString(),false));
        x.addHijo((Node)h3);
        RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ESCRITURA ::= THrow Parentesis_a SENTENCIA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    Node x = new Node("THROW",false);
                    for(int i = 0;i<((Node)h1).getHijos().size();i++){
                            x.addHijo(((Node)h1).getHijos().get(i));
                        }
                    RESULT = x;
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ESCRITURA ::= Throwln Parentesis_a SENTENCIA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    Node x = new Node("THROWLN",false);
                    for(int i = 0;i<((Node)h1).getHijos().size();i++){
                            x.addHijo(((Node)h1).getHijos().get(i));
                        }
                    RESULT = x;
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ESCRITURA ::= Throwln Parentesis_a Identificadoroletra Parentesis_c P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    Node x = new Node("THROWLN",false);
                    x.addHijo((Node)h1);
                    RESULT = x;
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ESCRITURA ::= THrow Parentesis_a Identificadoroletra Parentesis_c P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    Node x = new Node("THROW",false);
                    x.addHijo((Node)h1);
                    RESULT = x;
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LECTURA ::= Eat Identificadoroletra P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                Node x = new Node("EAT",false);
                x.addHijo((Node)h1);
                RESULT = x;
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LECTURA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENTENCIA_FOR ::= Int Identificadoroletra Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node raiz = new Node("ROOT",false);
            Node x = new Node("FOR STATEMENT",false);
            
            x.addHijo((Node)h1);
            x.addHijo(new Node(n.toString(),false));
            raiz.addHijo(x);
            raiz.addHijo((Node)h2);
            raiz.addHijo((Node)h3);
            RESULT = raiz;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FOR ::= OpenFor Parentesis_a SENTENCIA_FOR Parentesis_c SENTENCIA CloseFor 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                Node x = new Node("FOR",false);
                for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
                 }
           
                Node x2 = new Node("THEN",false);
                for(int i = 0;i<((Node)h2).getHijos().size();i++){
                x2.addHijo(((Node)h2).getHijos().get(i));
                }
                x.addHijo(x2);
                RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // UNTIL ::= OpenUntil Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Do SENTENCIA CloseUntil 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                Node x = new Node("UNTIL",false);
                x.addHijo((Node)h1);
                Node x2 = new Node("DO",false);
                for(int i = 0;i<((Node)h2).getHijos().size();i++){
                    x2.addHijo(((Node)h2).getHijos().get(i));
                }
                x.addHijo(x2);
                RESULT = x;

        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNTIL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // IF_ELSE ::= OpenTest Parentesis_a LISTABOOL Parentesis_c Then SENTENCIA Or SENTENCIA CloseTest 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
           Node x = new Node("TEST",false);
           Node x2 = new Node("THEN",false);
           for(int i = 0;i<((Node)h2).getHijos().size();i++){
                x2.addHijo(((Node)h2).getHijos().get(i));
           }
            for(int i = 0;i<((Node)h1).getHijos().size();i++){
                        x.addHijo(((Node)h1).getHijos().get(i));
           }
           Node x3 = new Node("OR",false);
           for(int i = 0;i<((Node)h3).getHijos().size();i++){
                x3.addHijo(((Node)h3).getHijos().get(i));
           }
           x.addHijo(x2);
           x.addHijo(x3);
            RESULT = x;
            
           
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIA_BOOLEANA ::= Identificadoroletra Op_relacional Caracter 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
            Node x = new Node("BOOLEAN STATEMENT",false);
            
            Node x3 = new Node(h2.toString(),false);
            Node x4 = new Node(h3.toString(),false);
            x.addHijo((Node)h1);
            x.addHijo(x3);
            x.addHijo(x4);
            RESULT = x;
           
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTENCIA_BOOLEANA ::= Identificadoroletra Op_relacional Comillas Comillas 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
            Node x = new Node("BOOLEAN STATEMENT",false);
            
            Node x3 = new Node(h2.toString(),false);
            Node x4 = new Node(" ",false);
            x.addHijo((Node)h1);
            x.addHijo(x3);
            x.addHijo(x4);
            RESULT = x;
           
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTENCIA_BOOLEANA ::= Identificadoroletra Op_relacional Identificador 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                    Node x = new Node("BOOLEANA STATEMENT",false);
                    
                    Node x3 = new Node(h2.toString(),false);
                    Node x4 = new Node(h3.toString(),false);
                    x.addHijo((Node)h1);
                    x.addHijo(x3);
                    x.addHijo(x4);
                    RESULT = x;
           
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIA_BOOLEANA ::= Identificadoroletra Op_relacional Numero 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Node x = new Node("BOOLEAN STATEMENT",false);
                
                Node x3 = new Node(h2.toString(),false);
                Node x4 = new Node(h3.toString(),false);
                x.addHijo((Node)h1);
                x.addHijo(x3);
                x.addHijo(x4);
                RESULT = x;
           
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA_BOOLEANA ::= Identificadoroletra Op_relacional Op_booleano 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
            Node x = new Node("BOOLEAN STATEMENT",false);
            
            Node x3 = new Node(h2.toString(),false);
            Node x4 = new Node(h3.toString(),false);
            x.addHijo((Node)h1);
            x.addHijo(x3);
            x.addHijo(x4);
            RESULT = x;
           
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIA_BOOLEANA ::= Parentesis_a SENTENCIA_BOOLEANA Parentesis_c 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            
            RESULT = h1;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
            Node x = new Node("BOOLEAN SATEMENT",false);
            Node x2 = new Node(h2.toString(),false);
            x.addHijo(x2);
            RESULT = x;
           
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA_BOOLEANA ::= NOT SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("BOOLEAN SATEMENT",false);
                Node not = new Node("!",false);
                for(int i = 0;i<((Node)h1).getHijos().size();i++){
                        not.addHijo(((Node)h1).getHijos().get(i));
                     }
                x.addHijo(not);
                RESULT = x;
                
              
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA OR SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("BOOLEAN SATEMENT",false);
                Node or = new Node("|",false);
                for(int i = 0;i<((Node)h1).getHijos().size();i++){
                        or.addHijo(((Node)h1).getHijos().get(i));
                     }
                for(int i = 0;i<((Node)h2).getHijos().size();i++){
                        or.addHijo(((Node)h2).getHijos().get(i));
                     }
                x.addHijo(or);
                RESULT = x;
              
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA AND SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("BOOLEAN SATEMENT",false);
                Node and = new Node("&",false);
                for(int i = 0;i<((Node)h1).getHijos().size();i++){
                        and.addHijo(((Node)h1).getHijos().get(i));
                     }
               
                
                for(int i = 0;i<((Node)h2).getHijos().size();i++){
                        and.addHijo(((Node)h2).getHijos().get(i));
                     }
                x.addHijo(and);
                RESULT = x;
              
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LISTABOOL ::= SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    Node Raiz = new Node("raiz",false);
                    Raiz.addHijo((Node)h1);
                    RESULT = Raiz;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTABOOL",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LISTABOOL ::= LISTABOOL SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    Node Raiz = new Node("raiz",false);
                    for(int i = 0;i<((Node)h1).getHijos().size();i++){
                        Raiz.addHijo(((Node)h1).getHijos().get(i));
                     }
                     for(int i = 0;i<((Node)h2).getHijos().size();i++){
                        Raiz.addHijo(((Node)h2).getHijos().get(i));
                     }
                     RESULT =Raiz;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTABOOL",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // IF ::= error Then SENTENCIA CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("Error en la condicion del If"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"ERROR THEN SENTENCIA CLOSETEST. No open-main Closetest")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // IF ::= error Then CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("Error en la condicion del If. if con sentencia vacia"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"ERROR THEN CLOSETEST If sin opentest con error en condicion. If con sentencia vacia")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // IF ::= OpenTest error Then CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("Error en la condicion del If. if con sentencia vacia"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"OPENTEST ERROR THEN CLOSETEST If con error en condicion. If con sentencia vacia")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // IF ::= OpenTest error Then error CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("Error en la condicion del If"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"OPENTEST ERROR THEN SENTENCIA CLOSETEST If con error en condicion")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // IF ::= OpenTest error Then SENTENCIA CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("Error en la condicion del If"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"OPENTEST ERROR THEN SENTENCIA CLOSETEST If con error en condicion")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IF ::= OpenTest Parentesis_a Parentesis_c Then CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("If sin condicion y sentencia vacia"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"If sin condicion y sentencia vacia.")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IF ::= OpenTest Parentesis_a Parentesis_c Then SENTENCIA CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("If sin condicion"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"If sin condicion")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IF ::= OpenTest Parentesis_a LISTABOOL Parentesis_c error CloseTest 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        //System.out.println("open-test con error de sentencia-then"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"If con sentencia-then incorrecta.")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IF ::= OpenTest Parentesis_a LISTABOOL Parentesis_c error SENTENCIA CloseTest 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
        //System.out.println("open-test con error de sentencia"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"If con sentencia incorrecta.")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IF ::= OpenTest Parentesis_a LISTABOOL Parentesis_c Then SENTENCIA CloseTest 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
           Node x = new Node("TEST",false);
           Node x2 = new Node("THEN",false);
           for(int i = 0;i<((Node)h2).getHijos().size();i++){
                x2.addHijo(((Node)h2).getHijos().get(i));
           }
           for(int i = 0;i<((Node)h1).getHijos().size();i++){
                        x.addHijo(((Node)h1).getHijos().get(i));
           }
           
           x.addHijo(x2);
           RESULT = x;
            
           
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION ::= Define Identificadoroletra As Boolean Igual Op_booleano 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("error NO PCOMA ISSUE"); 
            parser.syntax_error(new Symbol(sym.error,0,0,"Sentencia sin PComa"));
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION ::= Define Identificadoroletra As Boolean 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 System.out.println("error NO PCOMA ISSUE"); 
            parser.syntax_error(new Symbol(sym.error,0,0,"Sentencia sin PComa"));
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION ::= Define Identificadoroletra As Character Corchete_a Numero Corchete_c Corchete_a Numero Corchete_c 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 System.out.println("error NO PCOMA ISSUE"); 
            parser.syntax_error(new Symbol(sym.error,0,0,"Sentencia sin PComa"));
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION ::= Define Identificadoroletra As Character Corchete_a Numero Corchete_c 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 System.out.println("error NO PCOMA ISSUE"); 
            parser.syntax_error(new Symbol(sym.error,0,0,"Sentencia sin PComa"));
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION ::= Define Identificadoroletra As Character Igual Caracter 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 System.out.println("error NO PCOMA ISSUE"); 
            parser.syntax_error(new Symbol(sym.error,0,0,"Sentencia sin PComa"));
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION ::= Define Identificadoroletra As Character 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 System.out.println("error NO PCOMA ISSUE"); 
            parser.syntax_error(new Symbol(sym.error,0,0,"Sentencia sin PComa"));
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION ::= Define Identificadoroletra As Int Corchete_a Numero Corchete_c Corchete_a Numero Corchete_c 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 System.out.println("error NO PCOMA ISSUE"); 
            parser.syntax_error(new Symbol(sym.error,0,0,"Sentencia sin PComa"));
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= Define Identificadoroletra As Int Corchete_a Numero Corchete_c 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 System.out.println("error NO PCOMA ISSUE"); 
            parser.syntax_error(new Symbol(sym.error,0,0,"Sentencia sin PComa"));
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= Identificadoroletra Igual EXP 
            {
              Object RESULT =null;
		 System.out.println("error NO PCOMA EXP ISSUE"); 
            parser.syntax_error(new Symbol(sym.error,0,0,"Sentencia sin PComa"));
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= Define Identificadoroletra As Int Igual EXP 
            {
              Object RESULT =null;
		 System.out.println("error NO PCOMA EXP ISSUE"); 
            parser.syntax_error(new Symbol(sym.error,0,0,"Sentencia sin PComa"));
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= Define Identificadoroletra As Int 
            {
              Object RESULT =null;
		 // System.out.println("error NO PCOMA ISSUE"); 
            parser.syntax_error(new Symbol(sym.error,0,0,"Sentencia sin PComa"));
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= error FOR 
            {
              Object RESULT =null;
		 System.out.println("error FOr en Declaracion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= error IF 
            {
              Object RESULT =null;
		 System.out.println("error IF en Declaracion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= error CloseMain 
            {
              Object RESULT =null;
		 System.out.println("error CloseMain en Declaracion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= error UNTIL 
            {
              Object RESULT =null;
		 System.out.println("error UNTIL en Declaracion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= error IF_ELSE 
            {
              Object RESULT =null;
		 System.out.println("error IF_ELSE en Declaracion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= error DECLARACION 
            {
              Object RESULT =null;
		 System.out.println("error DECLARACION en Declaracion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= error P_coma 
            {
              Object RESULT =null;
		 System.out.println("error P_Coma en Declaracion de sentencia"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= Define Identificadoroletra As Boolean Igual Op_booleano P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
                Node x = new Node("DECLARATION",false);
                Node x2 = new Node("boolean",false);
                
                Node x4 = new Node(b1.toString(),false);
                x.addHijo(x2);
                x.addHijo((Node)h1);
                x.addHijo(x4);
                RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= Define Identificadoroletra As Boolean P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 
                Node x = new Node("DECLARATION",false);
                Node x2 = new Node("boolean",false);
               
                x.addHijo(x2);
                x.addHijo((Node)h1);
                RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= Define Identificadoroletra As Character Corchete_a Numero Corchete_c Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
              
                Node x = new Node("DECLARATION",false);
                Node x2 = new Node("character matrix",false);
                Node x4 = new Node("["+c1.toString()+"]"+"["+c2.toString()+"]",false);
                x.addHijo(x2);
                x.addHijo((Node)h1);
                x.addHijo(x4);
                RESULT = x;
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= Define Identificadoroletra As Character Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
              
                Node x = new Node("DECLARATION",false);
                Node x2 = new Node("character array",false);
                Node x4 = new Node("["+c1.toString()+"]",false);
                x.addHijo(x2);
                x.addHijo((Node)h1);
                x.addHijo(x4);
                RESULT = x;
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= Define Identificadoroletra As Character Igual Caracter P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
            Node x = new Node("DECLARATION",false);
            Node x2 = new Node("character",false);
            Node x3 = new Node(c1.toString(),false);
            x.addHijo(x2);
            x.addHijo((Node)h1);
            x.addHijo(x3);
            RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= Define Identificadoroletra As Character P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 
            Node x = new Node("DECLARATION",false);
            Node x2 = new Node("character",false);
            x.addHijo(x2);
            x.addHijo((Node)h1);
            RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= Define Identificadoroletra As Int Corchete_a Numero Corchete_c Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
              
                Node x = new Node("DECLARATION",false);
                Node x2 = new Node("integer matrix",false);
                Node x4 = new Node("["+n1.toString()+"]"+"["+n2.toString()+"]",false);
                x.addHijo(x2);
                x.addHijo((Node)h1);
                x.addHijo(x4);
                RESULT = x;
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= Define Identificadoroletra As Int Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
              
                Node x = new Node("DECLARATION",false);
                Node x2 = new Node("integer array",false);
                Node x4 = new Node("["+n.toString()+"]",false);
                x.addHijo(x2);
                x.addHijo((Node)h1);
                x.addHijo(x4);
                RESULT = x;
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Identificadoroletra Igual CALLMETHOD 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node x = new Node("ASSIGNMENT",false);
        x.addHijo((Node)h1);
        x.addHijo((Node)h2);
        RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= Identificadoroletra Igual EXP P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node x = new Node("ASSIGNMENT",false);
        x.addHijo((Node)h1);
        x.addHijo((Node)h2);
        RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Define Identificadoroletra As Int Igual EXP P_coma 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Node x = new Node("DECLARATION",false);
        Node x2 = new Node("integer",false);
       
        x.addHijo(x2);
        x.addHijo((Node)h2);
        x.addHijo((Node)h1);
        RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= Define Identificadoroletra As Int P_coma 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 
        Node x = new Node("DECLARATION",false);
        Node x2 = new Node("integer",false);
        
        x.addHijo(x2);
        x.addHijo((Node)h2);
        RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CALLMETHOD ::= Identificadoroletra Parentesis_a PARAMETROS2 Parentesis_c P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node x = new Node("METHOD-CALL",true);
    x.addHijo((Node)h1);
    x.addHijo((Node)h2);
    RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALLMETHOD",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Identificadoroletra ::= L 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  Node x = new Node(h1.toString(),false);
            
            RESULT = x;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Identificadoroletra",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Identificadoroletra ::= Identificador 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  Node x = new Node(h1.toString(),false);
            
            RESULT = x;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Identificadoroletra",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // METHOD ::= METHOD OpenMethod Int Identificadoroletra Parentesis_a PARAMETROS Parentesis_c SENTENCIA Return Igual Identificadoroletra P_coma CloseMethod 
            {
              Object RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).right;
		Object m1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Node raiz = new Node("Raiz",false);
        for(int i = 0;i<((Node)m1).getHijos().size();i++){
                raiz.addHijo(((Node)m1).getHijos().get(i));
            }
        Node x = new Node("INTEGER METHOD",false);
        x.addHijo((Node)h1);
        for(int i = 0;i<((Node)params).getHijos().size();i++){
                x.addHijo(((Node)params).getHijos().get(i));
            }
        Node BLOCK = new Node("BLOQUE",false);
        for(int i = 0;i<((Node)h2).getHijos().size();i++){
                BLOCK.addHijo(((Node)h2).getHijos().get(i));
            }
        x.addHijo(BLOCK);
        Node RETURN = new Node("RETURN",false);
        RETURN.addHijo((Node)h3);
        x.addHijo(RETURN);
        raiz.addHijo(x);
        RESULT = raiz; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // METHOD ::= METHOD OpenMethod Int Identificadoroletra Parentesis_a Parentesis_c SENTENCIA Return Igual Identificadoroletra P_coma CloseMethod 
            {
              Object RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		Object m1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Node raiz = new Node("Raiz",false);
        for(int i = 0;i<((Node)m1).getHijos().size();i++){
                raiz.addHijo(((Node)m1).getHijos().get(i));
            }
        Node x = new Node("INTEGER METHOD",false);
        x.addHijo((Node)h1);
        
        Node BLOCK = new Node("BLOQUE",false);
        for(int i = 0;i<((Node)h2).getHijos().size();i++){
                BLOCK.addHijo(((Node)h2).getHijos().get(i));
            }
        x.addHijo(BLOCK);
        Node RETURN = new Node("RETURN",false);
        RETURN.addHijo((Node)h3);
        x.addHijo(RETURN);
        raiz.addHijo(x);
        RESULT = raiz; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // METHOD ::= OpenMethod Int Identificadoroletra Parentesis_a PARAMETROS Parentesis_c SENTENCIA Return Igual Identificadoroletra P_coma CloseMethod 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Node raiz = new Node("Raiz",false);
        Node x = new Node("INTEGER METHOD",false);
        x.addHijo((Node)h1);
        for(int i = 0;i<((Node)params).getHijos().size();i++){
                x.addHijo(((Node)params).getHijos().get(i));
            }
        Node BLOCK = new Node("BLOQUE",false);
        for(int i = 0;i<((Node)h2).getHijos().size();i++){
                BLOCK.addHijo(((Node)h2).getHijos().get(i));
            }
        x.addHijo(BLOCK);
        Node RETURN = new Node("RETURN",false);
        RETURN.addHijo((Node)h3);
        x.addHijo(RETURN);
        raiz.addHijo(x);
        RESULT =  raiz; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // METHOD ::= OpenMethod Int Identificadoroletra Parentesis_a Parentesis_c SENTENCIA Return Igual Identificadoroletra P_coma CloseMethod 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Node raiz = new Node("Raiz",false);
        Node x = new Node("INTEGER METHOD",false);
        x.addHijo((Node)h1);
        Node BLOCK = new Node("BLOQUE",false);
        for(int i = 0;i<((Node)h2).getHijos().size();i++){
                BLOCK.addHijo(((Node)h2).getHijos().get(i));
            }
        x.addHijo(BLOCK);
        Node RETURN = new Node("RETURN",false);
        RETURN.addHijo((Node)h3);
        x.addHijo(RETURN);
        raiz.addHijo(x);
        RESULT =  raiz; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // F ::= Parentesis_a E Parentesis_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            RESULT = e;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // F ::= Identificadoroletra 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = h1;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // F ::= Numero 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node x = new Node(h1.toString(),false);
            RESULT = x;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // T ::= F 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = f;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // T ::= T Division F 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node x = new Node("/",false);
        x.addHijo((Node)t);
        x.addHijo((Node)f);
        RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // T ::= T Multiplicacion F 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node x = new Node("*",false);
        x.addHijo((Node)t);
        x.addHijo((Node)f);
        RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E ::= T 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            RESULT = t;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E ::= E Resta T 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Node x = new Node("-",false);
        x.addHijo((Node)e);
        x.addHijo((Node)t);
        RESULT = x;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= E Suma T 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Node x = new Node("+",false);
        x.addHijo((Node)e);
        x.addHijo((Node)t);
        RESULT = x;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXP ::= E 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = e;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMETROS ::= PARAMETROS P_coma Int Identificadoroletra 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node raiz = new Node("RAIZ",false);
        
        for(int i = 0;i<((Node)h1).getHijos().size();i++){
                raiz.addHijo(((Node)h1).getHijos().get(i));
                }
        raiz.addHijo(new Node("INTEGER",false));
           raiz.addHijo((Node)h2);
           RESULT = raiz;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMETROS ::= Int Identificadoroletra 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
           Node raiz = new Node("RAIZ",false);
           raiz.addHijo(new Node("INTEGER",false));
           raiz.addHijo((Node)h1);
           RESULT = raiz;
           
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMETROS2 ::= 
            {
              Object RESULT =null;
		
    Node raiz = new Node("PARAMETROS",false);
    RESULT = raiz;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMETROS2 ::= PARAMETROS2 P_coma Numero 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node raiz = new Node("PARAMETROS",false);
        
        for(int i = 0;i<((Node)h1).getHijos().size();i++){
                raiz.addHijo(((Node)h1).getHijos().get(i));
                }
           Node x = new Node(h2.toString(),false);
           raiz.addHijo(x);
           RESULT = raiz;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARAMETROS2 ::= PARAMETROS2 P_coma Identificadoroletra 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node raiz = new Node("PARAMETROS",false);
        
        for(int i = 0;i<((Node)h1).getHijos().size();i++){
                raiz.addHijo(((Node)h1).getHijos().get(i));
                }
        
           raiz.addHijo((Node)h2);
           RESULT = raiz;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARAMETROS2 ::= Numero 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
           Node raiz = new Node("PARAMETROS",false);
           Node x = new Node(h1.toString(),false);
           raiz.addHijo(x);
           RESULT = raiz;
           
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARAMETROS2 ::= Identificadoroletra 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
           Node raiz = new Node("PARAMETROS",false);
           raiz.addHijo((Node)h1);
           RESULT = raiz;
           
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= CALLMETHOD 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node x = new Node("SENTENCIA",false);
            x.addHijo((Node)h2);
            RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= SENTENCIA CALLMETHOD 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node x = new Node("SENTENCIA",false);
                 for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
                }
                
                x.addHijo((Node)h2);
                RESULT = x; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= MATCH 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node x = new Node("SENTENCIA",false);
            x.addHijo((Node)h2);
            RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= SENTENCIA MATCH 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("SENTENCIA",false);
                 for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
                }
                
                x.addHijo((Node)h2);
                RESULT = x; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= ESCRITURA 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node x = new Node("SENTENCIA",false);
            
            x.addHijo((Node)h2);
            RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA ESCRITURA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("SENTENCIA",false);
                 for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
            }
                
                x.addHijo((Node)h2);
                RESULT = x; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= LECTURA 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node x = new Node("SENTENCIA",false);
            x.addHijo((Node)h2);
            RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA LECTURA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("SENTENCIA",false);
                 for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
                }
                
                x.addHijo((Node)h2);
                RESULT = x; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node x = new Node("SENTENCIA",false);
            x.addHijo((Node)h2);
            RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("SENTENCIA",false);
                for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
                }
               
                x.addHijo((Node)h2);
                RESULT = x; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= UNTIL 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node x = new Node("SENTENCIA",false);
            x.addHijo((Node)h2);
            RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA UNTIL 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("SENTENCIA",false);
                 for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
                }
               
                x.addHijo((Node)h2);
                RESULT = x; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node x = new Node("SENTENCIA",false);
            x.addHijo((Node)h2);
            RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("SENTENCIA",false);
                for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
                }
                x.addHijo((Node)h2);
                RESULT = x; 
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= IF 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  Node x = new Node("SENTENCIA",false);
            x.addHijo((Node)h2);
            RESULT = x;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
           Node x = new Node("SENTENCIA",false);
            for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
            }
           x.addHijo((Node)h2);
           RESULT = x; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Node x = new Node("SENTENCIA",false);
            x.addHijo((Node)h2);
            RESULT = x;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
           
           Node x = new Node("SENTENCIA",false);
           for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
            }
           x.addHijo((Node)h2);
           RESULT = x; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= 
            {
              Object RESULT =null;
		 System.out.println("No hay un codigo para analizar.");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= Main error 
            {
              Object RESULT =null;
		 System.out.println("Main Error");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= error 
            {
              Object RESULT =null;
		 System.out.println("ERROR No se reconoce la intencion ingresada.");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= error CloseMain 
            {
              Object RESULT =null;
		 System.out.println("Error CloseMain");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= error SENTENCIA CloseMain 
            {
              Object RESULT =null;
		 System.out.println("Error SENTENCIA CloseMain");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Main Parentesis_a Parentesis_c error CloseMain 
            {
              Object RESULT =null;
		 System.out.println("Main() Error CloseMain. Hay presencia de errores en el cuerpo de sentencia del main."); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Main Parentesis_a Parentesis_c SENTENCIA CloseMain METHOD 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
           Node raiz = new Node("ROOT",false);
           
           Node x = new Node("MAIN",false);
           for(int i = 0;i<((Node)h2).getHijos().size();i++){
                x.addHijo(((Node)h2).getHijos().get(i));
            }
           //x.addHijo((Node)h2);
           raiz.addHijo(x);
           for(int i = 0;i<((Node)h3).getHijos().size();i++){
                raiz.addHijo(((Node)h3).getHijos().get(i));
            }
           
           System.out.println(raiz.Imprimir(0));
           
          
          
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parentesis_a Parentesis_c CloseMain 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Main Parentesis_a Parentesis_c SENTENCIA CloseMain 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
           Node raiz = new Node("ROOT",false);
           Node x = new Node("MAIN",false);
           for(int i = 0;i<((Node)h2).getHijos().size();i++){
                x.addHijo(((Node)h2).getHijos().get(i));
            }
           //x.addHijo((Node)h2);
           raiz.addHijo(x);
           System.out.println(raiz.Imprimir(0)); 
          
          
          
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

