
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Sep 21 18:25:35 CST 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Sep 21 18:25:35 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\007\000\002\002" +
    "\006\000\002\002\005\000\002\002\004\000\002\002\002" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\020\003\000\002\020\003\000\002\004\007\000\002" +
    "\004\011\000\002\004\012\000\002\004\015\000\002\004" +
    "\007\000\002\004\011\000\002\004\012\000\002\004\015" +
    "\000\002\004\007\000\002\004\011\000\002\004\004\000" +
    "\002\006\011\000\002\012\003\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\006\000\002\012" +
    "\007\000\002\007\013\000\002\010\011\000\002\011\010" +
    "\000\002\013\012\000\002\013\011\000\002\014\005\000" +
    "\002\015\007\000\002\015\007\000\002\005\005\000\002" +
    "\005\004\000\002\005\004\000\002\016\010\000\002\017" +
    "\013\000\002\017\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\010\002\ufffc\003\004\043\005\001\002\000" +
    "\026\003\022\012\012\016\026\021\031\050\235\052\021" +
    "\055\023\056\032\057\027\060\013\001\002\000\004\035" +
    "\010\001\002\000\004\002\007\001\002\000\004\002\001" +
    "\001\002\000\004\036\011\001\002\000\026\003\022\012" +
    "\012\016\026\021\031\050\034\052\021\055\023\056\032" +
    "\057\027\060\013\001\002\000\004\035\223\001\002\000" +
    "\004\035\176\001\002\000\026\003\022\012\012\016\026" +
    "\021\031\050\175\052\021\055\023\056\032\057\027\060" +
    "\013\001\002\000\040\003\ufffa\012\ufffa\013\ufffa\014\ufffa" +
    "\016\ufffa\017\ufffa\021\ufffa\022\ufffa\050\ufffa\052\ufffa\055" +
    "\ufffa\056\ufffa\057\ufffa\060\ufffa\063\ufffa\001\002\000\040" +
    "\003\ufff0\012\ufff0\013\ufff0\014\ufff0\016\ufff0\017\ufff0\021" +
    "\ufff0\022\ufff0\050\ufff0\052\ufff0\055\ufff0\056\ufff0\057\ufff0" +
    "\060\ufff0\063\ufff0\001\002\000\040\003\ufff8\012\ufff8\013" +
    "\ufff8\014\ufff8\016\ufff8\017\ufff8\021\ufff8\022\ufff8\050\ufff8" +
    "\052\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\063\ufff8\001" +
    "\002\000\040\003\ufff6\012\ufff6\013\ufff6\014\ufff6\016\ufff6" +
    "\017\ufff6\021\ufff6\022\ufff6\050\ufff6\052\ufff6\055\ufff6\056" +
    "\ufff6\057\ufff6\060\ufff6\063\ufff6\001\002\000\006\045\131" +
    "\053\127\001\002\000\004\044\133\001\002\000\006\045" +
    "\131\053\127\001\002\000\040\003\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\016\ufff4\017\ufff4\021\ufff4\022\ufff4\050\ufff4\052" +
    "\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\063\ufff4\001\002" +
    "\000\040\003\uffee\012\uffee\013\uffee\014\uffee\016\uffee\017" +
    "\uffee\021\uffee\022\uffee\050\uffee\052\uffee\055\uffee\056\uffee" +
    "\057\uffee\060\uffee\063\uffee\001\002\000\004\035\121\001" +
    "\002\000\004\035\115\001\002\000\040\003\ufff2\012\ufff2" +
    "\013\ufff2\014\ufff2\016\ufff2\017\ufff2\021\ufff2\022\ufff2\050" +
    "\ufff2\052\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\063\ufff2" +
    "\001\002\000\004\035\041\001\002\000\004\035\035\001" +
    "\002\000\040\003\uffec\012\uffec\013\uffec\014\uffec\016\uffec" +
    "\017\uffec\021\uffec\022\uffec\050\uffec\052\uffec\055\uffec\056" +
    "\uffec\057\uffec\060\uffec\063\uffec\001\002\000\004\002\uffff" +
    "\001\002\000\004\045\036\001\002\000\004\036\037\001" +
    "\002\000\004\044\040\001\002\000\040\003\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\016\uffd0\017\uffd0\021\uffd0\022\uffd0\050" +
    "\uffd0\052\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\063\uffd0" +
    "\001\002\000\006\010\044\045\043\001\002\000\004\036" +
    "\102\001\002\000\004\023\074\001\002\000\004\045\045" +
    "\001\002\000\004\023\046\001\002\000\004\046\047\001" +
    "\002\000\004\044\050\001\002\000\006\034\052\045\053" +
    "\001\002\000\004\044\064\001\002\000\006\036\uffdd\044" +
    "\uffdd\001\002\000\004\031\054\001\002\000\012\005\056" +
    "\034\057\045\060\046\055\001\002\000\006\036\uffdb\044" +
    "\uffdb\001\002\000\006\005\061\045\062\001\002\000\006" +
    "\036\uffdc\044\uffdc\001\002\000\006\036\uffda\044\uffda\001" +
    "\002\000\006\036\uffd9\044\uffd9\001\002\000\004\005\063" +
    "\001\002\000\006\036\uffd8\044\uffd8\001\002\000\006\033" +
    "\067\045\066\001\002\000\004\036\uffd4\001\002\000\006" +
    "\032\071\033\072\001\002\000\004\045\070\001\002\000" +
    "\004\036\uffcd\001\002\000\004\046\073\001\002\000\004" +
    "\036\uffce\001\002\000\004\036\uffcf\001\002\000\004\046" +
    "\075\001\002\000\004\044\076\001\002\000\006\034\052" +
    "\045\053\001\002\000\004\044\100\001\002\000\006\033" +
    "\067\045\066\001\002\000\004\036\uffd3\001\002\000\024" +
    "\003\022\012\012\016\026\021\031\052\021\055\023\056" +
    "\032\057\027\060\013\001\002\000\026\003\022\012\012" +
    "\016\026\021\031\022\104\052\021\055\023\056\032\057" +
    "\027\060\013\001\002\000\040\003\uffd5\012\uffd5\013\uffd5" +
    "\014\uffd5\016\uffd5\017\uffd5\021\uffd5\022\uffd5\050\uffd5\052" +
    "\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\063\uffd5\001\002" +
    "\000\040\003\ufffb\012\ufffb\013\ufffb\014\ufffb\016\ufffb\017" +
    "\ufffb\021\ufffb\022\ufffb\050\ufffb\052\ufffb\055\ufffb\056\ufffb" +
    "\057\ufffb\060\ufffb\063\ufffb\001\002\000\040\003\ufff1\012" +
    "\ufff1\013\ufff1\014\ufff1\016\ufff1\017\ufff1\021\ufff1\022\ufff1" +
    "\050\ufff1\052\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\063" +
    "\ufff1\001\002\000\040\003\ufff9\012\ufff9\013\ufff9\014\ufff9" +
    "\016\ufff9\017\ufff9\021\ufff9\022\ufff9\050\ufff9\052\ufff9\055" +
    "\ufff9\056\ufff9\057\ufff9\060\ufff9\063\ufff9\001\002\000\040" +
    "\003\ufff7\012\ufff7\013\ufff7\014\ufff7\016\ufff7\017\ufff7\021" +
    "\ufff7\022\ufff7\050\ufff7\052\ufff7\055\ufff7\056\ufff7\057\ufff7" +
    "\060\ufff7\063\ufff7\001\002\000\040\003\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\016\ufff5\017\ufff5\021\ufff5\022\ufff5\050\ufff5" +
    "\052\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\063\ufff5\001" +
    "\002\000\040\003\uffef\012\uffef\013\uffef\014\uffef\016\uffef" +
    "\017\uffef\021\uffef\022\uffef\050\uffef\052\uffef\055\uffef\056" +
    "\uffef\057\uffef\060\uffef\063\uffef\001\002\000\040\003\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\016\ufff3\017\ufff3\021\ufff3\022" +
    "\ufff3\050\ufff3\052\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3" +
    "\063\ufff3\001\002\000\040\003\uffed\012\uffed\013\uffed\014" +
    "\uffed\016\uffed\017\uffed\021\uffed\022\uffed\050\uffed\052\uffed" +
    "\055\uffed\056\uffed\057\uffed\060\uffed\063\uffed\001\002\000" +
    "\004\045\116\001\002\000\004\036\117\001\002\000\004" +
    "\044\120\001\002\000\040\003\uffd1\012\uffd1\013\uffd1\014" +
    "\uffd1\016\uffd1\017\uffd1\021\uffd1\022\uffd1\050\uffd1\052\uffd1" +
    "\055\uffd1\056\uffd1\057\uffd1\060\uffd1\063\uffd1\001\002\000" +
    "\006\034\052\045\053\001\002\000\004\036\123\001\002" +
    "\000\004\020\124\001\002\000\024\003\022\012\012\016" +
    "\026\021\031\052\021\055\023\056\032\057\027\060\013" +
    "\001\002\000\026\003\022\012\012\016\026\017\126\021" +
    "\031\052\021\055\023\056\032\057\027\060\013\001\002" +
    "\000\040\003\uffd6\012\uffd6\013\uffd6\014\uffd6\016\uffd6\017" +
    "\uffd6\021\uffd6\022\uffd6\050\uffd6\052\uffd6\055\uffd6\056\uffd6" +
    "\057\uffd6\060\uffd6\063\uffd6\001\002\000\006\044\uffea\051" +
    "\uffea\001\002\000\004\044\132\001\002\000\006\044\uffeb" +
    "\051\uffeb\001\002\000\040\003\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\016\uffd2\017\uffd2\021\uffd2\022\uffd2\050\uffd2\052\uffd2" +
    "\055\uffd2\056\uffd2\057\uffd2\060\uffd2\063\uffd2\001\002\000" +
    "\040\003\uffdf\012\uffdf\013\uffdf\014\uffdf\016\uffdf\017\uffdf" +
    "\021\uffdf\022\uffdf\050\uffdf\052\uffdf\055\uffdf\056\uffdf\057" +
    "\uffdf\060\uffdf\063\uffdf\001\002\000\004\051\135\001\002" +
    "\000\010\010\137\011\136\054\140\001\002\000\010\023" +
    "\163\041\162\044\161\001\002\000\010\023\147\041\146" +
    "\044\145\001\002\000\006\023\142\044\141\001\002\000" +
    "\040\003\uffe1\012\uffe1\013\uffe1\014\uffe1\016\uffe1\017\uffe1" +
    "\021\uffe1\022\uffe1\050\uffe1\052\uffe1\055\uffe1\056\uffe1\057" +
    "\uffe1\060\uffe1\063\uffe1\001\002\000\004\034\143\001\002" +
    "\000\004\044\144\001\002\000\040\003\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\016\uffe0\017\uffe0\021\uffe0\022\uffe0\050\uffe0" +
    "\052\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\063\uffe0\001" +
    "\002\000\040\003\uffe9\012\uffe9\013\uffe9\014\uffe9\016\uffe9" +
    "\017\uffe9\021\uffe9\022\uffe9\050\uffe9\052\uffe9\055\uffe9\056" +
    "\uffe9\057\uffe9\060\uffe9\063\uffe9\001\002\000\004\046\152" +
    "\001\002\000\004\046\150\001\002\000\004\044\151\001" +
    "\002\000\040\003\uffe8\012\uffe8\013\uffe8\014\uffe8\016\uffe8" +
    "\017\uffe8\021\uffe8\022\uffe8\050\uffe8\052\uffe8\055\uffe8\056" +
    "\uffe8\057\uffe8\060\uffe8\063\uffe8\001\002\000\004\042\153" +
    "\001\002\000\006\041\155\044\154\001\002\000\040\003" +
    "\uffe7\012\uffe7\013\uffe7\014\uffe7\016\uffe7\017\uffe7\021\uffe7" +
    "\022\uffe7\050\uffe7\052\uffe7\055\uffe7\056\uffe7\057\uffe7\060" +
    "\uffe7\063\uffe7\001\002\000\004\046\156\001\002\000\004" +
    "\042\157\001\002\000\004\044\160\001\002\000\040\003" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\016\uffe6\017\uffe6\021\uffe6" +
    "\022\uffe6\050\uffe6\052\uffe6\055\uffe6\056\uffe6\057\uffe6\060" +
    "\uffe6\063\uffe6\001\002\000\040\003\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\016\uffe5\017\uffe5\021\uffe5\022\uffe5\050\uffe5\052" +
    "\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\063\uffe5\001\002" +
    "\000\004\046\166\001\002\000\004\006\164\001\002\000" +
    "\004\044\165\001\002\000\040\003\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\016\uffe4\017\uffe4\021\uffe4\022\uffe4\050\uffe4\052" +
    "\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\063\uffe4\001\002" +
    "\000\004\042\167\001\002\000\006\041\171\044\170\001" +
    "\002\000\040\003\uffe3\012\uffe3\013\uffe3\014\uffe3\016\uffe3" +
    "\017\uffe3\021\uffe3\022\uffe3\050\uffe3\052\uffe3\055\uffe3\056" +
    "\uffe3\057\uffe3\060\uffe3\063\uffe3\001\002\000\004\046\172" +
    "\001\002\000\004\042\173\001\002\000\004\044\174\001" +
    "\002\000\040\003\uffe2\012\uffe2\013\uffe2\014\uffe2\016\uffe2" +
    "\017\uffe2\021\uffe2\022\uffe2\050\uffe2\052\uffe2\055\uffe2\056" +
    "\uffe2\057\uffe2\060\uffe2\063\uffe2\001\002\000\004\002\000" +
    "\001\002\000\004\045\177\001\002\000\004\036\200\001" +
    "\002\000\004\062\201\001\002\000\004\005\214\001\002" +
    "\000\006\061\204\062\203\001\002\000\004\005\205\001" +
    "\002\000\040\003\uffcc\012\uffcc\013\uffcc\014\uffcc\016\uffcc" +
    "\017\uffcc\021\uffcc\022\uffcc\050\uffcc\052\uffcc\055\uffcc\056" +
    "\uffcc\057\uffcc\060\uffcc\063\uffcc\001\002\000\004\045\206" +
    "\001\002\000\004\005\207\001\002\000\004\023\210\001" +
    "\002\000\024\003\022\012\012\016\026\021\031\052\021" +
    "\055\023\056\032\057\027\060\013\001\002\000\026\003" +
    "\022\012\012\016\026\021\031\052\021\055\023\056\032" +
    "\057\027\060\013\063\212\001\002\000\004\044\213\001" +
    "\002\000\006\061\uffcb\062\uffcb\001\002\000\004\045\215" +
    "\001\002\000\004\005\216\001\002\000\004\023\217\001" +
    "\002\000\024\003\022\012\012\016\026\021\031\052\021" +
    "\055\023\056\032\057\027\060\013\001\002\000\026\003" +
    "\022\012\012\016\026\021\031\052\021\055\023\056\032" +
    "\057\027\060\013\063\221\001\002\000\004\044\222\001" +
    "\002\000\006\061\uffca\062\uffca\001\002\000\006\034\052" +
    "\045\053\001\002\000\004\036\225\001\002\000\004\015" +
    "\226\001\002\000\024\003\022\012\012\016\026\021\031" +
    "\052\021\055\023\056\032\057\027\060\013\001\002\000" +
    "\030\003\022\012\012\013\231\014\230\016\026\021\031" +
    "\052\021\055\023\056\032\057\027\060\013\001\002\000" +
    "\024\003\022\012\012\016\026\021\031\052\021\055\023" +
    "\056\032\057\027\060\013\001\002\000\040\003\uffde\012" +
    "\uffde\013\uffde\014\uffde\016\uffde\017\uffde\021\uffde\022\uffde" +
    "\050\uffde\052\uffde\055\uffde\056\uffde\057\uffde\060\uffde\063" +
    "\uffde\001\002\000\026\003\022\012\012\013\233\016\026" +
    "\021\031\052\021\055\023\056\032\057\027\060\013\001" +
    "\002\000\040\003\uffd7\012\uffd7\013\uffd7\014\uffd7\016\uffd7" +
    "\017\uffd7\021\uffd7\022\uffd7\050\uffd7\052\uffd7\055\uffd7\056" +
    "\uffd7\057\uffd7\060\uffd7\063\uffd7\001\002\000\026\003\022" +
    "\012\012\016\026\021\031\050\236\052\021\055\023\056" +
    "\032\057\027\060\013\001\002\000\004\002\ufffd\001\002" +
    "\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\004\002\005\001\001\000\024\003\233\004" +
    "\014\006\016\007\017\010\023\011\027\014\015\015\024" +
    "\016\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\013\004\014" +
    "\006\016\007\017\010\023\011\027\014\015\015\024\016" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\104\006\106\007\107\010\110\011\112\014\105\015" +
    "\111\016\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\133\001" +
    "\001\000\002\001\001\000\004\020\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\076\001\001\000\002\001\001" +
    "\000\004\005\100\001\001\000\002\001\001\000\024\003" +
    "\102\004\014\006\016\007\017\010\023\011\027\014\015" +
    "\015\024\016\032\001\001\000\022\004\104\006\106\007" +
    "\107\010\110\011\112\014\105\015\111\016\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\124\004\014\006\016\007\017\010\023" +
    "\011\027\014\015\015\024\016\032\001\001\000\022\004" +
    "\104\006\106\007\107\010\110\011\112\014\105\015\111" +
    "\016\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\210\004\014\006\016\007\017\010\023\011\027\014" +
    "\015\015\024\016\032\001\001\000\022\004\104\006\106" +
    "\007\107\010\110\011\112\014\105\015\111\016\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\217\004" +
    "\014\006\016\007\017\010\023\011\027\014\015\015\024" +
    "\016\032\001\001\000\022\004\104\006\106\007\107\010" +
    "\110\011\112\014\105\015\111\016\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\226\004\014" +
    "\006\016\007\017\010\023\011\027\014\015\015\024\016" +
    "\032\001\001\000\022\004\104\006\106\007\107\010\110" +
    "\011\112\014\105\015\111\016\113\001\001\000\024\003" +
    "\231\004\014\006\016\007\017\010\023\011\027\014\015" +
    "\015\024\016\032\001\001\000\002\001\001\000\022\004" +
    "\104\006\106\007\107\010\110\011\112\014\105\015\111" +
    "\016\113\001\001\000\002\001\001\000\022\004\104\006" +
    "\106\007\107\010\110\011\112\014\105\015\111\016\113" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
        String error = "";
        if(s.value != null){
            error = "Error Sintactico en la linea "+s.right+ " Columna "+(s.left+1)+ ". No se esperaba esto: "+ "\""+ s.value+ "\""+ "\n" ;
           System.out.print(error);
        }
        //errores.add(error)
    }
    


    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CASE ::= When Comillas Identificador Comillas Igual SENTENCIA Stop P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CASE ::= CASE When Comillas Identificador Comillas Igual SENTENCIA Stop P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MATCH ::= OpenMatch Parentesis_a Identificador Parentesis_c CASE CloseMatch 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MATCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ESCRITURA ::= Throwln Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ESCRITURA ::= THrow Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LECTURA ::= Eat Identificadoroletra P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LECTURA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_FOR ::= Int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FOR ::= OpenFor Parentesis_a SENTENCIA_FOR Parentesis_c SENTENCIA CloseFor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // UNTIL ::= OpenUntil Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Do SENTENCIA CloseUntil 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNTIL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IF_ELSE ::= OpenTest Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Then SENTENCIA Or SENTENCIA CloseTest 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IF ::= OpenTest Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Then SENTENCIA CloseTest 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= error P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Define Identificadoroletra As Boolean Igual Op_booleano P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Define Identificadoroletra As Boolean P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Define Identificadoroletra As Character Corchete_a Numero Corchete_c Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Define Identificadoroletra As Character Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Define Identificadoroletra As Character Igual Caracter P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Define Identificadoroletra As Character P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Define Identificadoroletra As Int Corchete_a Numero Corchete_c Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Define Identificadoroletra As Int Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Define Identificadoroletra As Int Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Define Identificadoroletra As Int P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Identificadoroletra ::= L 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Identificadoroletra",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Identificadoroletra ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Identificadoroletra",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= MATCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA MATCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= LECTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA LECTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= UNTIL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA UNTIL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= error CloseMain 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= error SENTENCIA CloseMain 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parentesis_a Parentesis_c CloseMain 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Main Parentesis_a Parentesis_c SENTENCIA CloseMain 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

