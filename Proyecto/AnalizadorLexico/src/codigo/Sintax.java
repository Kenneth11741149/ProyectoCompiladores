
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 29 21:49:23 CST 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java.io.FileWriter;
import java.io.IOException;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 29 21:49:23 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\321\000\002\002\004\000\002\002\007\000\002\002" +
    "\006\000\002\002\010\000\002\002\007\000\002\002\005" +
    "\000\002\002\004\000\002\002\010\000\002\002\006\000" +
    "\002\002\005\000\002\002\003\000\002\002\004\000\002" +
    "\002\002\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\005\000\002\031\005\000" +
    "\002\031\002\000\002\030\004\000\002\030\006\000\002" +
    "\024\003\000\002\025\005\000\002\025\005\000\002\025" +
    "\003\000\002\026\005\000\002\026\005\000\002\026\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\005\000" +
    "\002\021\015\000\002\021\016\000\002\021\016\000\002" +
    "\021\017\000\002\020\003\000\002\020\003\000\002\022" +
    "\007\000\002\004\007\000\002\004\011\000\002\004\006" +
    "\000\002\004\005\000\002\004\011\000\002\004\011\000" +
    "\002\004\011\000\002\004\014\000\002\004\014\000\002" +
    "\004\014\000\002\004\012\000\002\004\015\000\002\004" +
    "\007\000\002\004\011\000\002\004\012\000\002\004\015" +
    "\000\002\004\007\000\002\004\011\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\006\000\002\004\010\000\002\004\005\000\002\004\011" +
    "\000\002\004\014\000\002\004\006\000\002\004\010\000" +
    "\002\004\011\000\002\004\014\000\002\004\006\000\002" +
    "\004\010\000\002\006\011\000\002\006\010\000\002\006" +
    "\011\000\002\006\010\000\002\006\010\000\002\006\007" +
    "\000\002\006\007\000\002\006\010\000\002\006\005\000" +
    "\002\006\007\000\002\006\007\000\002\006\006\000\002" +
    "\006\005\000\002\006\006\000\002\023\004\000\002\023" +
    "\003\000\002\012\005\000\002\012\005\000\002\012\004" +
    "\000\002\012\003\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\006\000\002" +
    "\012\005\000\002\007\013\000\002\007\013\000\002\007" +
    "\011\000\002\007\012\000\002\007\012\000\002\007\012" +
    "\000\002\007\012\000\002\007\012\000\002\007\011\000" +
    "\002\007\011\000\002\007\011\000\002\007\010\000\002" +
    "\007\007\000\002\007\010\000\002\007\007\000\002\007" +
    "\011\000\002\007\011\000\002\007\006\000\002\007\011" +
    "\000\002\007\007\000\002\007\010\000\002\007\007\000" +
    "\002\007\007\000\002\010\011\000\002\010\010\000\002" +
    "\010\011\000\002\010\010\000\002\010\010\000\002\010" +
    "\007\000\002\010\007\000\002\010\010\000\002\010\005" +
    "\000\002\010\007\000\002\010\007\000\002\010\006\000" +
    "\002\010\005\000\002\010\006\000\002\010\010\000\002" +
    "\010\011\000\002\011\011\000\002\011\011\000\002\011" +
    "\010\000\002\011\010\000\002\011\007\000\002\011\007" +
    "\000\002\011\010\000\002\011\005\000\002\011\007\000" +
    "\002\011\007\000\002\011\006\000\002\011\005\000\002" +
    "\011\006\000\002\013\012\000\002\013\011\000\002\014" +
    "\007\000\002\014\006\000\002\014\005\000\002\014\006" +
    "\000\002\014\005\000\002\014\004\000\002\015\007\000" +
    "\002\015\007\000\002\015\007\000\002\015\007\000\002" +
    "\015\006\000\002\015\005\000\002\015\006\000\002\015" +
    "\005\000\002\015\006\000\002\015\005\000\002\015\006" +
    "\000\002\015\005\000\002\005\005\000\002\005\004\000" +
    "\002\005\004\000\002\016\011\000\002\016\011\000\002" +
    "\016\010\000\002\016\010\000\002\016\007\000\002\016" +
    "\007\000\002\016\010\000\002\016\005\000\002\016\007" +
    "\000\002\016\007\000\002\016\006\000\002\016\005\000" +
    "\002\016\006\000\002\017\011\000\002\017\010\000\002" +
    "\017\011\000\002\017\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01d8\000\010\002\ufff5\003\004\046\005\001\002\000" +
    "\034\002\ufff7\003\050\012\013\016\032\021\036\050\020" +
    "\054\u01d7\056\025\057\022\061\027\062\037\063\034\064" +
    "\014\001\002\000\006\003\011\036\010\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\004\037" +
    "\012\001\002\000\004\002\ufff6\001\002\000\032\003\026" +
    "\012\013\016\032\021\036\050\020\054\041\056\025\057" +
    "\022\061\027\062\037\063\034\064\014\001\002\000\010" +
    "\003\u017d\015\u017e\036\u017c\001\002\000\010\003\u0162\020" +
    "\u0161\036\u0160\001\002\000\050\003\ufff3\012\ufff3\013\ufff3" +
    "\014\ufff3\016\ufff3\017\ufff3\021\ufff3\022\ufff3\032\ufff3\037" +
    "\ufff3\050\ufff3\054\ufff3\056\ufff3\057\ufff3\061\ufff3\062\ufff3" +
    "\063\ufff3\064\ufff3\067\ufff3\001\002\000\032\003\050\012" +
    "\013\016\032\021\036\050\020\054\u015e\056\025\057\022" +
    "\061\027\062\037\063\034\064\014\001\002\000\050\003" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\016\uffe9\017\uffe9\021\uffe9" +
    "\022\uffe9\032\uffe9\037\uffe9\050\uffe9\054\uffe9\056\uffe9\057" +
    "\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\067\uffe9\001\002" +
    "\000\100\003\uffcd\012\uffcd\013\uffcd\014\uffcd\016\uffcd\017" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\036\uffcd\037" +
    "\uffcd\044\uffcd\047\uffcd\050\uffcd\054\uffcd\055\uffcd\056\uffcd" +
    "\057\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\067\uffcd\001" +
    "\002\000\050\003\ufff1\012\ufff1\013\ufff1\014\ufff1\016\ufff1" +
    "\017\ufff1\021\ufff1\022\ufff1\032\ufff1\037\ufff1\050\ufff1\054" +
    "\ufff1\056\ufff1\057\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1" +
    "\067\ufff1\001\002\000\100\003\uffcc\012\uffcc\013\uffcc\014" +
    "\uffcc\016\uffcc\017\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\031\uffcc\032\uffcc\033\uffcc\034" +
    "\uffcc\036\uffcc\037\uffcc\044\uffcc\047\uffcc\050\uffcc\054\uffcc" +
    "\055\uffcc\056\uffcc\057\uffcc\061\uffcc\062\uffcc\063\uffcc\064" +
    "\uffcc\067\uffcc\001\002\000\050\003\uffef\012\uffef\013\uffef" +
    "\014\uffef\016\uffef\017\uffef\021\uffef\022\uffef\032\uffef\037" +
    "\uffef\050\uffef\054\uffef\056\uffef\057\uffef\061\uffef\062\uffef" +
    "\063\uffef\064\uffef\067\uffef\001\002\000\010\023\142\036" +
    "\167\044\141\001\002\000\006\050\020\057\022\001\002" +
    "\000\030\003\060\012\013\015\061\016\032\020\056\021" +
    "\036\047\055\050\020\054\u0110\056\025\057\022\001\002" +
    "\000\010\003\u0109\036\u0107\047\u0108\001\002\000\050\003" +
    "\uffed\012\uffed\013\uffed\014\uffed\016\uffed\017\uffed\021\uffed" +
    "\022\uffed\032\uffed\037\uffed\050\uffed\054\uffed\056\uffed\057" +
    "\uffed\061\uffed\062\uffed\063\uffed\064\uffed\067\uffed\001\002" +
    "\000\050\003\uffe7\012\uffe7\013\uffe7\014\uffe7\016\uffe7\017" +
    "\uffe7\021\uffe7\022\uffe7\032\uffe7\037\uffe7\050\uffe7\054\uffe7" +
    "\056\uffe7\057\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\067" +
    "\uffe7\001\002\000\010\003\350\020\347\036\346\001\002" +
    "\000\050\003\uffe3\012\uffe3\013\uffe3\014\uffe3\016\uffe3\017" +
    "\uffe3\021\uffe3\022\uffe3\032\uffe3\037\uffe3\050\uffe3\054\uffe3" +
    "\056\uffe3\057\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\067" +
    "\uffe3\001\002\000\006\003\334\036\333\001\002\000\050" +
    "\003\uffeb\012\uffeb\013\uffeb\014\uffeb\016\uffeb\017\uffeb\021" +
    "\uffeb\022\uffeb\032\uffeb\037\uffeb\050\uffeb\054\uffeb\056\uffeb" +
    "\057\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\067\uffeb\001" +
    "\002\000\010\003\232\020\231\036\230\001\002\000\006" +
    "\003\043\036\042\001\002\000\050\003\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\016\uffe5\017\uffe5\021\uffe5\022\uffe5\032\uffe5" +
    "\037\uffe5\050\uffe5\054\uffe5\056\uffe5\057\uffe5\061\uffe5\062" +
    "\uffe5\063\uffe5\064\uffe5\067\uffe5\001\002\000\004\002\uffff" +
    "\001\002\000\032\003\050\012\013\016\032\021\036\037" +
    "\045\050\020\056\025\057\022\061\027\062\037\063\034" +
    "\064\014\001\002\000\004\047\044\001\002\000\050\003" +
    "\uff45\012\uff45\013\uff45\014\uff45\016\uff45\017\uff45\021\uff45" +
    "\022\uff45\032\uff45\037\uff45\050\uff45\054\uff45\056\uff45\057" +
    "\uff45\061\uff45\062\uff45\063\uff45\064\uff45\067\uff45\001\002" +
    "\000\052\003\uff47\012\uff47\013\uff47\014\uff47\016\uff47\017" +
    "\uff47\021\uff47\022\uff47\032\uff47\037\uff47\047\227\050\uff47" +
    "\054\uff47\056\uff47\057\uff47\061\uff47\062\uff47\063\uff47\064" +
    "\uff47\067\uff47\001\002\000\032\003\050\012\013\016\032" +
    "\021\036\037\225\050\020\056\025\057\022\061\027\062" +
    "\037\063\034\064\014\001\002\000\012\023\142\036\167" +
    "\037\223\044\141\001\002\000\030\003\060\012\013\015" +
    "\061\016\032\020\056\021\036\047\055\050\020\054\063" +
    "\056\025\057\022\001\002\000\050\003\uffb2\012\uffb2\013" +
    "\uffb2\014\uffb2\016\uffb2\017\uffb2\021\uffb2\022\uffb2\032\uffb2" +
    "\037\uffb2\050\uffb2\054\uffb2\056\uffb2\057\uffb2\061\uffb2\062" +
    "\uffb2\063\uffb2\064\uffb2\067\uffb2\001\002\000\050\003\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\016\uffb7\017\uffb7\021\uffb7\022" +
    "\uffb7\032\uffb7\037\uffb7\050\uffb7\054\uffb7\056\uffb7\057\uffb7" +
    "\061\uffb7\062\uffb7\063\uffb7\064\uffb7\067\uffb7\001\002\000" +
    "\006\023\142\044\141\001\002\000\050\003\uffb6\012\uffb6" +
    "\013\uffb6\014\uffb6\016\uffb6\017\uffb6\021\uffb6\022\uffb6\032" +
    "\uffb6\037\uffb6\050\uffb6\054\uffb6\056\uffb6\057\uffb6\061\uffb6" +
    "\062\uffb6\063\uffb6\064\uffb6\067\uffb6\001\002\000\050\003" +
    "\uffb8\012\uffb8\013\uffb8\014\uffb8\016\uffb8\017\uffb8\021\uffb8" +
    "\022\uffb8\032\uffb8\037\uffb8\050\uffb8\054\uffb8\056\uffb8\057" +
    "\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\067\uffb8\001\002" +
    "\000\040\003\050\012\013\016\032\017\105\021\036\022" +
    "\103\050\020\056\025\057\022\061\027\062\037\063\034" +
    "\064\014\065\112\066\110\001\002\000\050\003\uffb3\012" +
    "\uffb3\013\uffb3\014\uffb3\016\uffb3\017\uffb3\021\uffb3\022\uffb3" +
    "\032\uffb3\037\uffb3\050\uffb3\054\uffb3\056\uffb3\057\uffb3\061" +
    "\uffb3\062\uffb3\063\uffb3\064\uffb3\067\uffb3\001\002\000\030" +
    "\003\060\012\013\015\061\016\032\020\102\021\036\047" +
    "\055\050\020\054\063\056\025\057\022\001\002\000\032" +
    "\003\050\012\013\013\065\016\032\021\036\050\020\056" +
    "\025\057\022\061\027\062\037\063\034\064\014\001\002" +
    "\000\050\003\uffb5\012\uffb5\013\uffb5\014\uffb5\016\uffb5\017" +
    "\uffb5\021\uffb5\022\uffb5\032\uffb5\037\uffb5\050\uffb5\054\uffb5" +
    "\056\uffb5\057\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\067" +
    "\uffb5\001\002\000\050\003\uffb4\012\uffb4\013\uffb4\014\uffb4" +
    "\016\uffb4\017\uffb4\021\uffb4\022\uffb4\032\uffb4\037\uffb4\050" +
    "\uffb4\054\uffb4\056\uffb4\057\uffb4\061\uffb4\062\uffb4\063\uffb4" +
    "\064\uffb4\067\uffb4\001\002\000\034\003\050\012\013\013" +
    "\073\014\072\016\032\021\036\050\020\056\025\057\022" +
    "\061\027\062\037\063\034\064\014\001\002\000\050\003" +
    "\uff9a\012\uff9a\013\uff9a\014\uff9a\016\uff9a\017\uff9a\021\uff9a" +
    "\022\uff9a\032\uff9a\037\uff9a\050\uff9a\054\uff9a\056\uff9a\057" +
    "\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\067\uff9a\001\002" +
    "\000\050\003\ufff4\012\ufff4\013\ufff4\014\ufff4\016\ufff4\017" +
    "\ufff4\021\ufff4\022\ufff4\032\ufff4\037\ufff4\050\ufff4\054\ufff4" +
    "\056\ufff4\057\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\067" +
    "\ufff4\001\002\000\050\003\uffea\012\uffea\013\uffea\014\uffea" +
    "\016\uffea\017\uffea\021\uffea\022\uffea\032\uffea\037\uffea\050" +
    "\uffea\054\uffea\056\uffea\057\uffea\061\uffea\062\uffea\063\uffea" +
    "\064\uffea\067\uffea\001\002\000\050\003\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\016\ufff2\017\ufff2\021\ufff2\022\ufff2\032\ufff2" +
    "\037\ufff2\050\ufff2\054\ufff2\056\ufff2\057\ufff2\061\ufff2\062" +
    "\ufff2\063\ufff2\064\ufff2\067\ufff2\001\002\000\050\003\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\016\ufff0\017\ufff0\021\ufff0\022" +
    "\ufff0\032\ufff0\037\ufff0\050\ufff0\054\ufff0\056\ufff0\057\ufff0" +
    "\061\ufff0\062\ufff0\063\ufff0\064\ufff0\067\ufff0\001\002\000" +
    "\004\013\101\001\002\000\050\003\uff99\012\uff99\013\uff99" +
    "\014\uff99\016\uff99\017\uff99\021\uff99\022\uff99\032\uff99\037" +
    "\uff99\050\uff99\054\uff99\056\uff99\057\uff99\061\uff99\062\uff99" +
    "\063\uff99\064\uff99\067\uff99\001\002\000\050\003\uffee\012" +
    "\uffee\013\uffee\014\uffee\016\uffee\017\uffee\021\uffee\022\uffee" +
    "\032\uffee\037\uffee\050\uffee\054\uffee\056\uffee\057\uffee\061" +
    "\uffee\062\uffee\063\uffee\064\uffee\067\uffee\001\002\000\050" +
    "\003\uffe8\012\uffe8\013\uffe8\014\uffe8\016\uffe8\017\uffe8\021" +
    "\uffe8\022\uffe8\032\uffe8\037\uffe8\050\uffe8\054\uffe8\056\uffe8" +
    "\057\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\067\uffe8\001" +
    "\002\000\050\003\uffec\012\uffec\013\uffec\014\uffec\016\uffec" +
    "\017\uffec\021\uffec\022\uffec\032\uffec\037\uffec\050\uffec\054" +
    "\uffec\056\uffec\057\uffec\061\uffec\062\uffec\063\uffec\064\uffec" +
    "\067\uffec\001\002\000\050\003\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\016\uffe4\017\uffe4\021\uffe4\022\uffe4\032\uffe4\037\uffe4" +
    "\050\uffe4\054\uffe4\056\uffe4\057\uffe4\061\uffe4\062\uffe4\063" +
    "\uffe4\064\uffe4\067\uffe4\001\002\000\050\003\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\016\uffe6\017\uffe6\021\uffe6\022\uffe6\032" +
    "\uffe6\037\uffe6\050\uffe6\054\uffe6\056\uffe6\057\uffe6\061\uffe6" +
    "\062\uffe6\063\uffe6\064\uffe6\067\uffe6\001\002\000\050\003" +
    "\uff76\012\uff76\013\uff76\014\uff76\016\uff76\017\uff76\021\uff76" +
    "\022\uff76\032\uff76\037\uff76\050\uff76\054\uff76\056\uff76\057" +
    "\uff76\061\uff76\062\uff76\063\uff76\064\uff76\067\uff76\001\002" +
    "\000\034\003\050\012\013\016\032\017\105\021\036\022" +
    "\103\050\020\056\025\057\022\061\027\062\037\063\034" +
    "\064\014\001\002\000\050\003\uff5a\012\uff5a\013\uff5a\014" +
    "\uff5a\016\uff5a\017\uff5a\021\uff5a\022\uff5a\032\uff5a\037\uff5a" +
    "\050\uff5a\054\uff5a\056\uff5a\057\uff5a\061\uff5a\062\uff5a\063" +
    "\uff5a\064\uff5a\067\uff5a\001\002\000\034\003\050\012\013" +
    "\016\032\017\107\021\036\022\106\050\020\056\025\057" +
    "\022\061\027\062\037\063\034\064\014\001\002\000\050" +
    "\003\uff69\012\uff69\013\uff69\014\uff69\016\uff69\017\uff69\021" +
    "\uff69\022\uff69\032\uff69\037\uff69\050\uff69\054\uff69\056\uff69" +
    "\057\uff69\061\uff69\062\uff69\063\uff69\064\uff69\067\uff69\001" +
    "\002\000\050\003\uff59\012\uff59\013\uff59\014\uff59\016\uff59" +
    "\017\uff59\021\uff59\022\uff59\032\uff59\037\uff59\050\uff59\054" +
    "\uff59\056\uff59\057\uff59\061\uff59\062\uff59\063\uff59\064\uff59" +
    "\067\uff59\001\002\000\050\003\uff68\012\uff68\013\uff68\014" +
    "\uff68\016\uff68\017\uff68\021\uff68\022\uff68\032\uff68\037\uff68" +
    "\050\uff68\054\uff68\056\uff68\057\uff68\061\uff68\062\uff68\063" +
    "\uff68\064\uff68\067\uff68\001\002\000\010\006\127\050\020" +
    "\057\022\001\002\000\006\065\113\066\114\001\002\000" +
    "\050\003\uff36\012\uff36\013\uff36\014\uff36\016\uff36\017\uff36" +
    "\021\uff36\022\uff36\032\uff36\037\uff36\050\uff36\054\uff36\056" +
    "\uff36\057\uff36\061\uff36\062\uff36\063\uff36\064\uff36\067\uff36" +
    "\001\002\000\050\003\uff35\012\uff35\013\uff35\014\uff35\016" +
    "\uff35\017\uff35\021\uff35\022\uff35\032\uff35\037\uff35\050\uff35" +
    "\054\uff35\056\uff35\057\uff35\061\uff35\062\uff35\063\uff35\064" +
    "\uff35\067\uff35\001\002\000\010\006\115\050\020\057\022" +
    "\001\002\000\004\023\123\001\002\000\004\023\117\001" +
    "\002\000\030\003\050\012\013\016\032\021\036\050\020" +
    "\056\025\057\022\061\027\062\037\063\034\064\014\001" +
    "\002\000\032\003\050\012\013\016\032\021\036\050\020" +
    "\056\025\057\022\061\027\062\037\063\034\064\014\067" +
    "\121\001\002\000\004\047\122\001\002\000\006\065\uff32" +
    "\066\uff32\001\002\000\030\003\050\012\013\016\032\021" +
    "\036\050\020\056\025\057\022\061\027\062\037\063\034" +
    "\064\014\001\002\000\032\003\050\012\013\016\032\021" +
    "\036\050\020\056\025\057\022\061\027\062\037\063\034" +
    "\064\014\067\125\001\002\000\004\047\126\001\002\000" +
    "\006\065\uff34\066\uff34\001\002\000\004\023\135\001\002" +
    "\000\004\023\131\001\002\000\030\003\050\012\013\016" +
    "\032\021\036\050\020\056\025\057\022\061\027\062\037" +
    "\063\034\064\014\001\002\000\032\003\050\012\013\016" +
    "\032\021\036\050\020\056\025\057\022\061\027\062\037" +
    "\063\034\064\014\067\133\001\002\000\004\047\134\001" +
    "\002\000\006\065\uff31\066\uff31\001\002\000\030\003\050" +
    "\012\013\016\032\021\036\050\020\056\025\057\022\061" +
    "\027\062\037\063\034\064\014\001\002\000\032\003\050" +
    "\012\013\016\032\021\036\050\020\056\025\057\022\061" +
    "\027\062\037\063\034\064\014\067\137\001\002\000\004" +
    "\047\140\001\002\000\006\065\uff33\066\uff33\001\002\000" +
    "\004\052\200\001\002\000\012\036\146\050\020\052\147" +
    "\057\022\001\002\000\050\003\uffc7\012\uffc7\013\uffc7\014" +
    "\uffc7\016\uffc7\017\uffc7\021\uffc7\022\uffc7\032\uffc7\037\uffc7" +
    "\050\uffc7\054\uffc7\056\uffc7\057\uffc7\061\uffc7\062\uffc7\063" +
    "\uffc7\064\uffc7\067\uffc7\001\002\000\062\003\uffd8\012\uffd8" +
    "\013\uffd8\014\uffd8\016\uffd8\017\uffd8\021\uffd8\022\uffd8\024" +
    "\uffd8\025\uffd8\026\160\027\157\032\uffd8\037\uffd8\047\uffd8" +
    "\050\uffd8\054\uffd8\056\uffd8\057\uffd8\061\uffd8\062\uffd8\063" +
    "\uffd8\064\uffd8\067\uffd8\001\002\000\064\003\uffd3\012\uffd3" +
    "\013\uffd3\014\uffd3\016\uffd3\017\uffd3\021\uffd3\022\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\032\uffd3\036\167\037\uffd3" +
    "\047\uffd3\050\uffd3\054\uffd3\056\uffd3\057\uffd3\061\uffd3\062" +
    "\uffd3\063\uffd3\064\uffd3\067\uffd3\001\002\000\012\036\146" +
    "\050\020\052\147\057\022\001\002\000\062\003\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\016\uffd4\017\uffd4\021\uffd4\022\uffd4" +
    "\024\uffd4\025\uffd4\026\uffd4\027\uffd4\032\uffd4\037\uffd4\047" +
    "\uffd4\050\uffd4\054\uffd4\056\uffd4\057\uffd4\061\uffd4\062\uffd4" +
    "\063\uffd4\064\uffd4\067\uffd4\001\002\000\052\003\uffaf\012" +
    "\uffaf\013\uffaf\014\uffaf\016\uffaf\017\uffaf\021\uffaf\022\uffaf" +
    "\032\uffaf\037\uffaf\047\164\050\uffaf\054\uffaf\056\uffaf\057" +
    "\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf\067\uffaf\001\002" +
    "\000\062\003\uffd5\012\uffd5\013\uffd5\014\uffd5\016\uffd5\017" +
    "\uffd5\021\uffd5\022\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\032\uffd5\037\uffd5\047\uffd5\050\uffd5\054\uffd5\056\uffd5\057" +
    "\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\067\uffd5\001\002" +
    "\000\056\003\uffdb\012\uffdb\013\uffdb\014\uffdb\016\uffdb\017" +
    "\uffdb\021\uffdb\022\uffdb\024\154\025\153\032\uffdb\037\uffdb" +
    "\047\uffdb\050\uffdb\054\uffdb\056\uffdb\057\uffdb\061\uffdb\062" +
    "\uffdb\063\uffdb\064\uffdb\067\uffdb\001\002\000\012\036\146" +
    "\050\020\052\147\057\022\001\002\000\012\036\146\050" +
    "\020\052\147\057\022\001\002\000\062\003\uffd3\012\uffd3" +
    "\013\uffd3\014\uffd3\016\uffd3\017\uffd3\021\uffd3\022\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\032\uffd3\037\uffd3\047\uffd3" +
    "\050\uffd3\054\uffd3\056\uffd3\057\uffd3\061\uffd3\062\uffd3\063" +
    "\uffd3\064\uffd3\067\uffd3\001\002\000\062\003\uffda\012\uffda" +
    "\013\uffda\014\uffda\016\uffda\017\uffda\021\uffda\022\uffda\024" +
    "\uffda\025\uffda\026\160\027\157\032\uffda\037\uffda\047\uffda" +
    "\050\uffda\054\uffda\056\uffda\057\uffda\061\uffda\062\uffda\063" +
    "\uffda\064\uffda\067\uffda\001\002\000\012\036\146\050\020" +
    "\052\147\057\022\001\002\000\012\036\146\050\020\052" +
    "\147\057\022\001\002\000\062\003\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\016\uffd7\017\uffd7\021\uffd7\022\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\032\uffd7\037\uffd7\047\uffd7\050\uffd7" +
    "\054\uffd7\056\uffd7\057\uffd7\061\uffd7\062\uffd7\063\uffd7\064" +
    "\uffd7\067\uffd7\001\002\000\062\003\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\016\uffd6\017\uffd6\021\uffd6\022\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\032\uffd6\037\uffd6\047\uffd6\050\uffd6" +
    "\054\uffd6\056\uffd6\057\uffd6\061\uffd6\062\uffd6\063\uffd6\064" +
    "\uffd6\067\uffd6\001\002\000\062\003\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\016\uffd9\017\uffd9\021\uffd9\022\uffd9\024\uffd9\025" +
    "\uffd9\026\160\027\157\032\uffd9\037\uffd9\047\uffd9\050\uffd9" +
    "\054\uffd9\056\uffd9\057\uffd9\061\uffd9\062\uffd9\063\uffd9\064" +
    "\uffd9\067\uffd9\001\002\000\050\003\uffc8\012\uffc8\013\uffc8" +
    "\014\uffc8\016\uffc8\017\uffc8\021\uffc8\022\uffc8\032\uffc8\037" +
    "\uffc8\050\uffc8\054\uffc8\056\uffc8\057\uffc8\061\uffc8\062\uffc8" +
    "\063\uffc8\064\uffc8\067\uffc8\001\002\000\010\024\154\025" +
    "\153\037\166\001\002\000\062\003\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\016\uffd2\017\uffd2\021\uffd2\022\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\032\uffd2\037\uffd2\047\uffd2\050\uffd2" +
    "\054\uffd2\056\uffd2\057\uffd2\061\uffd2\062\uffd2\063\uffd2\064" +
    "\uffd2\067\uffd2\001\002\000\014\037\uffde\047\uffde\050\020" +
    "\052\170\057\022\001\002\000\006\037\uffe1\047\uffe1\001" +
    "\002\000\006\037\uffe2\047\uffe2\001\002\000\006\037\174" +
    "\047\173\001\002\000\010\050\020\052\176\057\022\001" +
    "\002\000\004\047\175\001\002\000\050\003\uffcb\012\uffcb" +
    "\013\uffcb\014\uffcb\016\uffcb\017\uffcb\021\uffcb\022\uffcb\032" +
    "\uffcb\037\uffcb\050\uffcb\054\uffcb\056\uffcb\057\uffcb\061\uffcb" +
    "\062\uffcb\063\uffcb\064\uffcb\067\uffcb\001\002\000\006\037" +
    "\uffdf\047\uffdf\001\002\000\006\037\uffe0\047\uffe0\001\002" +
    "\000\004\045\201\001\002\000\006\023\203\044\202\001" +
    "\002\000\004\052\212\001\002\000\012\006\205\050\020" +
    "\052\204\057\022\001\002\000\004\047\211\001\002\000" +
    "\004\047\210\001\002\000\004\047\207\001\002\000\050" +
    "\003\uffc4\012\uffc4\013\uffc4\014\uffc4\016\uffc4\017\uffc4\021" +
    "\uffc4\022\uffc4\032\uffc4\037\uffc4\050\uffc4\054\uffc4\056\uffc4" +
    "\057\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\067\uffc4\001" +
    "\002\000\050\003\uffc6\012\uffc6\013\uffc6\014\uffc6\016\uffc6" +
    "\017\uffc6\021\uffc6\022\uffc6\032\uffc6\037\uffc6\050\uffc6\054" +
    "\uffc6\056\uffc6\057\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6" +
    "\067\uffc6\001\002\000\050\003\uffc5\012\uffc5\013\uffc5\014" +
    "\uffc5\016\uffc5\017\uffc5\021\uffc5\022\uffc5\032\uffc5\037\uffc5" +
    "\050\uffc5\054\uffc5\056\uffc5\057\uffc5\061\uffc5\062\uffc5\063" +
    "\uffc5\064\uffc5\067\uffc5\001\002\000\004\045\213\001\002" +
    "\000\004\023\214\001\002\000\012\006\216\050\020\052" +
    "\215\057\022\001\002\000\004\047\222\001\002\000\004" +
    "\047\221\001\002\000\004\047\220\001\002\000\050\003" +
    "\uffc3\012\uffc3\013\uffc3\014\uffc3\016\uffc3\017\uffc3\021\uffc3" +
    "\022\uffc3\032\uffc3\037\uffc3\050\uffc3\054\uffc3\056\uffc3\057" +
    "\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\067\uffc3\001\002" +
    "\000\050\003\uffc2\012\uffc2\013\uffc2\014\uffc2\016\uffc2\017" +
    "\uffc2\021\uffc2\022\uffc2\032\uffc2\037\uffc2\050\uffc2\054\uffc2" +
    "\056\uffc2\057\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\067" +
    "\uffc2\001\002\000\050\003\uffc1\012\uffc1\013\uffc1\014\uffc1" +
    "\016\uffc1\017\uffc1\021\uffc1\022\uffc1\032\uffc1\037\uffc1\050" +
    "\uffc1\054\uffc1\056\uffc1\057\uffc1\061\uffc1\062\uffc1\063\uffc1" +
    "\064\uffc1\067\uffc1\001\002\000\052\003\uff46\012\uff46\013" +
    "\uff46\014\uff46\016\uff46\017\uff46\021\uff46\022\uff46\032\uff46" +
    "\037\uff46\047\224\050\uff46\054\uff46\056\uff46\057\uff46\061" +
    "\uff46\062\uff46\063\uff46\064\uff46\067\uff46\001\002\000\050" +
    "\003\uff4f\012\uff4f\013\uff4f\014\uff4f\016\uff4f\017\uff4f\021" +
    "\uff4f\022\uff4f\032\uff4f\037\uff4f\050\uff4f\054\uff4f\056\uff4f" +
    "\057\uff4f\061\uff4f\062\uff4f\063\uff4f\064\uff4f\067\uff4f\001" +
    "\002\000\004\047\226\001\002\000\050\003\uff4e\012\uff4e" +
    "\013\uff4e\014\uff4e\016\uff4e\017\uff4e\021\uff4e\022\uff4e\032" +
    "\uff4e\037\uff4e\050\uff4e\054\uff4e\056\uff4e\057\uff4e\061\uff4e" +
    "\062\uff4e\063\uff4e\064\uff4e\067\uff4e\001\002\000\050\003" +
    "\uff48\012\uff48\013\uff48\014\uff48\016\uff48\017\uff48\021\uff48" +
    "\022\uff48\032\uff48\037\uff48\050\uff48\054\uff48\056\uff48\057" +
    "\uff48\061\uff48\062\uff48\063\uff48\064\uff48\067\uff48\001\002" +
    "\000\010\010\244\037\245\050\243\001\002\000\004\022" +
    "\241\001\002\000\004\020\233\001\002\000\032\003\236" +
    "\012\013\016\032\021\036\022\234\050\020\056\025\057" +
    "\022\061\027\062\037\063\034\064\014\001\002\000\050" +
    "\003\uff5b\012\uff5b\013\uff5b\014\uff5b\016\uff5b\017\uff5b\021" +
    "\uff5b\022\uff5b\032\uff5b\037\uff5b\050\uff5b\054\uff5b\056\uff5b" +
    "\057\uff5b\061\uff5b\062\uff5b\063\uff5b\064\uff5b\067\uff5b\001" +
    "\002\000\032\003\050\012\013\016\032\021\036\022\240" +
    "\050\020\056\025\057\022\061\027\062\037\063\034\064" +
    "\014\001\002\000\032\003\060\012\013\015\061\016\032" +
    "\020\056\021\036\022\237\047\055\050\020\054\063\056" +
    "\025\057\022\001\002\000\050\003\uff5c\012\uff5c\013\uff5c" +
    "\014\uff5c\016\uff5c\017\uff5c\021\uff5c\022\uff5c\032\uff5c\037" +
    "\uff5c\050\uff5c\054\uff5c\056\uff5c\057\uff5c\061\uff5c\062\uff5c" +
    "\063\uff5c\064\uff5c\067\uff5c\001\002\000\050\003\uff5d\012" +
    "\uff5d\013\uff5d\014\uff5d\016\uff5d\017\uff5d\021\uff5d\022\uff5d" +
    "\032\uff5d\037\uff5d\050\uff5d\054\uff5d\056\uff5d\057\uff5d\061" +
    "\uff5d\062\uff5d\063\uff5d\064\uff5d\067\uff5d\001\002\000\050" +
    "\003\uff5e\012\uff5e\013\uff5e\014\uff5e\016\uff5e\017\uff5e\021" +
    "\uff5e\022\uff5e\032\uff5e\037\uff5e\050\uff5e\054\uff5e\056\uff5e" +
    "\057\uff5e\061\uff5e\062\uff5e\063\uff5e\064\uff5e\067\uff5e\001" +
    "\002\000\004\037\323\001\002\000\004\023\315\001\002" +
    "\000\006\050\020\057\022\001\002\000\006\003\247\020" +
    "\246\001\002\000\032\003\050\012\013\016\032\021\036" +
    "\022\253\050\020\056\025\057\022\061\027\062\037\063" +
    "\034\064\014\001\002\000\032\003\050\012\013\016\032" +
    "\021\036\022\250\050\020\056\025\057\022\061\027\062" +
    "\037\063\034\064\014\001\002\000\050\003\uff60\012\uff60" +
    "\013\uff60\014\uff60\016\uff60\017\uff60\021\uff60\022\uff60\032" +
    "\uff60\037\uff60\050\uff60\054\uff60\056\uff60\057\uff60\061\uff60" +
    "\062\uff60\063\uff60\064\uff60\067\uff60\001\002\000\032\003" +
    "\050\012\013\016\032\021\036\022\252\050\020\056\025" +
    "\057\022\061\027\062\037\063\034\064\014\001\002\000" +
    "\050\003\uff5f\012\uff5f\013\uff5f\014\uff5f\016\uff5f\017\uff5f" +
    "\021\uff5f\022\uff5f\032\uff5f\037\uff5f\050\uff5f\054\uff5f\056" +
    "\uff5f\057\uff5f\061\uff5f\062\uff5f\063\uff5f\064\uff5f\067\uff5f" +
    "\001\002\000\050\003\uff61\012\uff61\013\uff61\014\uff61\016" +
    "\uff61\017\uff61\021\uff61\022\uff61\032\uff61\037\uff61\050\uff61" +
    "\054\uff61\056\uff61\057\uff61\061\uff61\062\uff61\063\uff61\064" +
    "\uff61\067\uff61\001\002\000\032\003\050\012\013\016\032" +
    "\021\036\022\255\050\020\056\025\057\022\061\027\062" +
    "\037\063\034\064\014\001\002\000\050\003\uff62\012\uff62" +
    "\013\uff62\014\uff62\016\uff62\017\uff62\021\uff62\022\uff62\032" +
    "\uff62\037\uff62\050\uff62\054\uff62\056\uff62\057\uff62\061\uff62" +
    "\062\uff62\063\uff62\064\uff62\067\uff62\001\002\000\004\023" +
    "\257\001\002\000\004\052\260\001\002\000\004\047\261" +
    "\001\002\000\014\035\266\036\262\050\020\057\022\072" +
    "\264\001\002\000\014\035\266\036\262\050\020\057\022" +
    "\072\264\001\002\000\010\047\303\070\277\071\300\001" +
    "\002\000\014\035\266\036\262\050\020\057\022\072\264" +
    "\001\002\000\004\031\267\001\002\000\024\035\uff93\036" +
    "\uff93\037\uff93\047\uff93\050\uff93\057\uff93\070\uff93\071\uff93" +
    "\072\uff93\001\002\000\014\005\271\006\272\035\273\050" +
    "\274\052\270\001\002\000\024\035\uff90\036\uff90\037\uff90" +
    "\047\uff90\050\uff90\057\uff90\070\uff90\071\uff90\072\uff90\001" +
    "\002\000\004\005\275\001\002\000\024\035\uff8d\036\uff8d" +
    "\037\uff8d\047\uff8d\050\uff8d\057\uff8d\070\uff8d\071\uff8d\072" +
    "\uff8d\001\002\000\024\035\uff91\036\uff91\037\uff91\047\uff91" +
    "\050\uff91\057\uff91\070\uff91\071\uff91\072\uff91\001\002\000" +
    "\024\035\uff8f\036\uff8f\037\uff8f\047\uff8f\050\uff8f\057\uff8f" +
    "\070\uff8f\071\uff8f\072\uff8f\001\002\000\024\035\uff8e\036" +
    "\uff8e\037\uff8e\047\uff8e\050\uff8e\057\uff8e\070\uff8e\071\uff8e" +
    "\072\uff8e\001\002\000\024\035\uff94\036\uff94\037\uff94\047" +
    "\uff94\050\uff94\057\uff94\070\uff94\071\uff94\072\uff94\001\002" +
    "\000\014\035\266\036\262\050\020\057\022\072\264\001" +
    "\002\000\014\035\266\036\262\050\020\057\022\072\264" +
    "\001\002\000\024\035\uff95\036\uff95\037\uff95\047\uff95\050" +
    "\uff95\057\uff95\070\277\071\uff95\072\uff95\001\002\000\024" +
    "\035\uff96\036\uff96\037\uff96\047\uff96\050\uff96\057\uff96\070" +
    "\uff96\071\uff96\072\uff96\001\002\000\010\034\306\050\020" +
    "\057\022\001\002\000\004\037\uff58\001\002\000\006\033" +
    "\310\034\311\001\002\000\006\050\020\057\022\001\002" +
    "\000\004\037\uff42\001\002\000\012\036\146\050\020\052" +
    "\147\057\022\001\002\000\004\037\uff43\001\002\000\004" +
    "\037\uff44\001\002\000\010\037\314\070\277\071\300\001" +
    "\002\000\024\035\uff92\036\uff92\037\uff92\047\uff92\050\uff92" +
    "\057\uff92\070\uff92\071\uff92\072\uff92\001\002\000\004\052" +
    "\316\001\002\000\004\047\317\001\002\000\014\035\266" +
    "\036\262\050\020\057\022\072\264\001\002\000\010\047" +
    "\321\070\277\071\300\001\002\000\010\034\306\050\020" +
    "\057\022\001\002\000\004\037\uff57\001\002\000\006\003" +
    "\325\020\324\001\002\000\030\003\050\012\013\016\032" +
    "\021\036\050\020\056\025\057\022\061\027\062\037\063" +
    "\034\064\014\001\002\000\032\003\050\012\013\016\032" +
    "\021\036\022\326\050\020\056\025\057\022\061\027\062" +
    "\037\063\034\064\014\001\002\000\050\003\uff63\012\uff63" +
    "\013\uff63\014\uff63\016\uff63\017\uff63\021\uff63\022\uff63\032" +
    "\uff63\037\uff63\050\uff63\054\uff63\056\uff63\057\uff63\061\uff63" +
    "\062\uff63\063\uff63\064\uff63\067\uff63\001\002\000\032\003" +
    "\050\012\013\016\032\021\036\022\330\050\020\056\025" +
    "\057\022\061\027\062\037\063\034\064\014\001\002\000" +
    "\050\003\uff64\012\uff64\013\uff64\014\uff64\016\uff64\017\uff64" +
    "\021\uff64\022\uff64\032\uff64\037\uff64\050\uff64\054\uff64\056" +
    "\uff64\057\uff64\061\uff64\062\uff64\063\uff64\064\uff64\067\uff64" +
    "\001\002\000\032\003\050\012\013\016\032\021\036\022" +
    "\332\050\020\056\025\057\022\061\027\062\037\063\034" +
    "\064\014\001\002\000\050\003\uff65\012\uff65\013\uff65\014" +
    "\uff65\016\uff65\017\uff65\021\uff65\022\uff65\032\uff65\037\uff65" +
    "\050\uff65\054\uff65\056\uff65\057\uff65\061\uff65\062\uff65\063" +
    "\uff65\064\uff65\067\uff65\001\002\000\032\003\050\012\013" +
    "\016\032\021\036\037\336\050\020\056\025\057\022\061" +
    "\027\062\037\063\034\064\014\001\002\000\004\047\335" +
    "\001\002\000\050\003\uff49\012\uff49\013\uff49\014\uff49\016" +
    "\uff49\017\uff49\021\uff49\022\uff49\032\uff49\037\uff49\050\uff49" +
    "\054\uff49\056\uff49\057\uff49\061\uff49\062\uff49\063\uff49\064" +
    "\uff49\067\uff49\001\002\000\052\003\uff4b\012\uff4b\013\uff4b" +
    "\014\uff4b\016\uff4b\017\uff4b\021\uff4b\022\uff4b\032\uff4b\037" +
    "\uff4b\047\345\050\uff4b\054\uff4b\056\uff4b\057\uff4b\061\uff4b" +
    "\062\uff4b\063\uff4b\064\uff4b\067\uff4b\001\002\000\032\003" +
    "\050\012\013\016\032\021\036\037\343\050\020\056\025" +
    "\057\022\061\027\062\037\063\034\064\014\001\002\000" +
    "\012\023\142\036\167\037\341\044\141\001\002\000\052" +
    "\003\uff4a\012\uff4a\013\uff4a\014\uff4a\016\uff4a\017\uff4a\021" +
    "\uff4a\022\uff4a\032\uff4a\037\uff4a\047\342\050\uff4a\054\uff4a" +
    "\056\uff4a\057\uff4a\061\uff4a\062\uff4a\063\uff4a\064\uff4a\067" +
    "\uff4a\001\002\000\050\003\uff50\012\uff50\013\uff50\014\uff50" +
    "\016\uff50\017\uff50\021\uff50\022\uff50\032\uff50\037\uff50\050" +
    "\uff50\054\uff50\056\uff50\057\uff50\061\uff50\062\uff50\063\uff50" +
    "\064\uff50\067\uff50\001\002\000\004\047\344\001\002\000" +
    "\050\003\uff4d\012\uff4d\013\uff4d\014\uff4d\016\uff4d\017\uff4d" +
    "\021\uff4d\022\uff4d\032\uff4d\037\uff4d\050\uff4d\054\uff4d\056" +
    "\uff4d\057\uff4d\061\uff4d\062\uff4d\063\uff4d\064\uff4d\067\uff4d" +
    "\001\002\000\050\003\uff4c\012\uff4c\013\uff4c\014\uff4c\016" +
    "\uff4c\017\uff4c\021\uff4c\022\uff4c\032\uff4c\037\uff4c\050\uff4c" +
    "\054\uff4c\056\uff4c\057\uff4c\061\uff4c\062\uff4c\063\uff4c\064" +
    "\uff4c\067\uff4c\001\002\000\016\035\266\036\262\037\361" +
    "\050\020\057\022\072\264\001\002\000\004\017\357\001" +
    "\002\000\004\020\351\001\002\000\032\003\354\012\013" +
    "\016\032\017\353\021\036\050\020\056\025\057\022\061" +
    "\027\062\037\063\034\064\014\001\002\000\032\003\050" +
    "\012\013\016\032\017\356\021\036\050\020\056\025\057" +
    "\022\061\027\062\037\063\034\064\014\001\002\000\050" +
    "\003\uff6a\012\uff6a\013\uff6a\014\uff6a\016\uff6a\017\uff6a\021" +
    "\uff6a\022\uff6a\032\uff6a\037\uff6a\050\uff6a\054\uff6a\056\uff6a" +
    "\057\uff6a\061\uff6a\062\uff6a\063\uff6a\064\uff6a\067\uff6a\001" +
    "\002\000\032\003\060\012\013\015\061\016\032\017\355" +
    "\020\056\021\036\047\055\050\020\054\063\056\025\057" +
    "\022\001\002\000\050\003\uff6b\012\uff6b\013\uff6b\014\uff6b" +
    "\016\uff6b\017\uff6b\021\uff6b\022\uff6b\032\uff6b\037\uff6b\050" +
    "\uff6b\054\uff6b\056\uff6b\057\uff6b\061\uff6b\062\uff6b\063\uff6b" +
    "\064\uff6b\067\uff6b\001\002\000\050\003\uff6c\012\uff6c\013" +
    "\uff6c\014\uff6c\016\uff6c\017\uff6c\021\uff6c\022\uff6c\032\uff6c" +
    "\037\uff6c\050\uff6c\054\uff6c\056\uff6c\057\uff6c\061\uff6c\062" +
    "\uff6c\063\uff6c\064\uff6c\067\uff6c\001\002\000\050\003\uff6d" +
    "\012\uff6d\013\uff6d\014\uff6d\016\uff6d\017\uff6d\021\uff6d\022" +
    "\uff6d\032\uff6d\037\uff6d\050\uff6d\054\uff6d\056\uff6d\057\uff6d" +
    "\061\uff6d\062\uff6d\063\uff6d\064\uff6d\067\uff6d\001\002\000" +
    "\010\037\374\070\277\071\300\001\002\000\006\003\363" +
    "\020\362\001\002\000\032\003\371\012\013\016\032\017" +
    "\370\021\036\050\020\056\025\057\022\061\027\062\037" +
    "\063\034\064\014\001\002\000\032\003\050\012\013\016" +
    "\032\017\365\021\036\050\020\056\025\057\022\061\027" +
    "\062\037\063\034\064\014\001\002\000\032\003\050\012" +
    "\013\016\032\017\366\021\036\050\020\056\025\057\022" +
    "\061\027\062\037\063\034\064\014\001\002\000\050\003" +
    "\uff6f\012\uff6f\013\uff6f\014\uff6f\016\uff6f\017\uff6f\021\uff6f" +
    "\022\uff6f\032\uff6f\037\uff6f\050\uff6f\054\uff6f\056\uff6f\057" +
    "\uff6f\061\uff6f\062\uff6f\063\uff6f\064\uff6f\067\uff6f\001\002" +
    "\000\050\003\uff6e\012\uff6e\013\uff6e\014\uff6e\016\uff6e\017" +
    "\uff6e\021\uff6e\022\uff6e\032\uff6e\037\uff6e\050\uff6e\054\uff6e" +
    "\056\uff6e\057\uff6e\061\uff6e\062\uff6e\063\uff6e\064\uff6e\067" +
    "\uff6e\001\002\000\032\003\050\012\013\016\032\017\373" +
    "\021\036\050\020\056\025\057\022\061\027\062\037\063" +
    "\034\064\014\001\002\000\050\003\uff70\012\uff70\013\uff70" +
    "\014\uff70\016\uff70\017\uff70\021\uff70\022\uff70\032\uff70\037" +
    "\uff70\050\uff70\054\uff70\056\uff70\057\uff70\061\uff70\062\uff70" +
    "\063\uff70\064\uff70\067\uff70\001\002\000\032\003\060\012" +
    "\013\015\061\016\032\017\372\020\056\021\036\047\055" +
    "\050\020\054\063\056\025\057\022\001\002\000\050\003" +
    "\uff67\012\uff67\013\uff67\014\uff67\016\uff67\017\uff67\021\uff67" +
    "\022\uff67\032\uff67\037\uff67\050\uff67\054\uff67\056\uff67\057" +
    "\uff67\061\uff67\062\uff67\063\uff67\064\uff67\067\uff67\001\002" +
    "\000\050\003\uff71\012\uff71\013\uff71\014\uff71\016\uff71\017" +
    "\uff71\021\uff71\022\uff71\032\uff71\037\uff71\050\uff71\054\uff71" +
    "\056\uff71\057\uff71\061\uff71\062\uff71\063\uff71\064\uff71\067" +
    "\uff71\001\002\000\006\003\376\020\375\001\002\000\032" +
    "\003\u0104\012\013\016\032\017\u0103\021\036\050\020\056" +
    "\025\057\022\061\027\062\037\063\034\064\014\001\002" +
    "\000\032\003\050\012\013\016\032\017\u0100\021\036\050" +
    "\020\056\025\057\022\061\027\062\037\063\034\064\014" +
    "\001\002\000\032\003\050\012\013\016\032\017\u0101\021" +
    "\036\050\020\056\025\057\022\061\027\062\037\063\034" +
    "\064\014\001\002\000\050\003\uff72\012\uff72\013\uff72\014" +
    "\uff72\016\uff72\017\uff72\021\uff72\022\uff72\032\uff72\037\uff72" +
    "\050\uff72\054\uff72\056\uff72\057\uff72\061\uff72\062\uff72\063" +
    "\uff72\064\uff72\067\uff72\001\002\000\050\003\uff73\012\uff73" +
    "\013\uff73\014\uff73\016\uff73\017\uff73\021\uff73\022\uff73\032" +
    "\uff73\037\uff73\050\uff73\054\uff73\056\uff73\057\uff73\061\uff73" +
    "\062\uff73\063\uff73\064\uff73\067\uff73\001\002\000\032\003" +
    "\050\012\013\016\032\017\u0106\021\036\050\020\056\025" +
    "\057\022\061\027\062\037\063\034\064\014\001\002\000" +
    "\050\003\uff74\012\uff74\013\uff74\014\uff74\016\uff74\017\uff74" +
    "\021\uff74\022\uff74\032\uff74\037\uff74\050\uff74\054\uff74\056" +
    "\uff74\057\uff74\061\uff74\062\uff74\063\uff74\064\uff74\067\uff74" +
    "\001\002\000\032\003\060\012\013\015\061\016\032\017" +
    "\u0105\020\056\021\036\047\055\050\020\054\063\056\025" +
    "\057\022\001\002\000\050\003\uff66\012\uff66\013\uff66\014" +
    "\uff66\016\uff66\017\uff66\021\uff66\022\uff66\032\uff66\037\uff66" +
    "\050\uff66\054\uff66\056\uff66\057\uff66\061\uff66\062\uff66\063" +
    "\uff66\064\uff66\067\uff66\001\002\000\050\003\uff75\012\uff75" +
    "\013\uff75\014\uff75\016\uff75\017\uff75\021\uff75\022\uff75\032" +
    "\uff75\037\uff75\050\uff75\054\uff75\056\uff75\057\uff75\061\uff75" +
    "\062\uff75\063\uff75\064\uff75\067\uff75\001\002\000\010\037" +
    "\u010c\050\020\057\022\001\002\000\050\003\uff51\012\uff51" +
    "\013\uff51\014\uff51\016\uff51\017\uff51\021\uff51\022\uff51\032" +
    "\uff51\037\uff51\050\uff51\054\uff51\056\uff51\057\uff51\061\uff51" +
    "\062\uff51\063\uff51\064\uff51\067\uff51\001\002\000\004\047" +
    "\u010a\001\002\000\050\003\uff52\012\uff52\013\uff52\014\uff52" +
    "\016\uff52\017\uff52\021\uff52\022\uff52\032\uff52\037\uff52\050" +
    "\uff52\054\uff52\056\uff52\057\uff52\061\uff52\062\uff52\063\uff52" +
    "\064\uff52\067\uff52\001\002\000\004\037\u010e\001\002\000" +
    "\052\003\uff54\012\uff54\013\uff54\014\uff54\016\uff54\017\uff54" +
    "\021\uff54\022\uff54\032\uff54\037\uff54\047\u010d\050\uff54\054" +
    "\uff54\056\uff54\057\uff54\061\uff54\062\uff54\063\uff54\064\uff54" +
    "\067\uff54\001\002\000\050\003\uff55\012\uff55\013\uff55\014" +
    "\uff55\016\uff55\017\uff55\021\uff55\022\uff55\032\uff55\037\uff55" +
    "\050\uff55\054\uff55\056\uff55\057\uff55\061\uff55\062\uff55\063" +
    "\uff55\064\uff55\067\uff55\001\002\000\052\003\uff53\012\uff53" +
    "\013\uff53\014\uff53\016\uff53\017\uff53\021\uff53\022\uff53\032" +
    "\uff53\037\uff53\047\u010f\050\uff53\054\uff53\056\uff53\057\uff53" +
    "\061\uff53\062\uff53\063\uff53\064\uff53\067\uff53\001\002\000" +
    "\050\003\uff56\012\uff56\013\uff56\014\uff56\016\uff56\017\uff56" +
    "\021\uff56\022\uff56\032\uff56\037\uff56\050\uff56\054\uff56\056" +
    "\uff56\057\uff56\061\uff56\062\uff56\063\uff56\064\uff56\067\uff56" +
    "\001\002\000\036\002\ufffd\003\uffb4\012\uffb4\016\uffb4\021" +
    "\uffb4\040\u0111\050\uffb4\054\uffb4\056\uffb4\057\uffb4\061\uffb4" +
    "\062\uffb4\063\uffb4\064\uffb4\001\002\000\004\010\u012b\001" +
    "\002\000\006\002\ufffa\040\u0113\001\002\000\004\010\u0114" +
    "\001\002\000\006\050\020\057\022\001\002\000\004\036" +
    "\u0116\001\002\000\006\010\u0118\037\u0119\001\002\000\006" +
    "\037\u0122\047\u0121\001\002\000\006\050\020\057\022\001" +
    "\002\000\030\003\050\012\013\016\032\021\036\050\020" +
    "\056\025\057\022\061\027\062\037\063\034\064\014\001" +
    "\002\000\032\003\050\012\013\016\032\021\036\032\u011b" +
    "\050\020\056\025\057\022\061\027\062\037\063\034\064" +
    "\014\001\002\000\004\023\u011c\001\002\000\006\050\020" +
    "\057\022\001\002\000\004\047\u011e\001\002\000\004\041" +
    "\u011f\001\002\000\006\002\uffcf\040\uffcf\001\002\000\006" +
    "\037\uffdd\047\uffdd\001\002\000\004\010\u0129\001\002\000" +
    "\030\003\050\012\013\016\032\021\036\050\020\056\025" +
    "\057\022\061\027\062\037\063\034\064\014\001\002\000" +
    "\032\003\050\012\013\016\032\021\036\032\u0124\050\020" +
    "\056\025\057\022\061\027\062\037\063\034\064\014\001" +
    "\002\000\004\023\u0125\001\002\000\006\050\020\057\022" +
    "\001\002\000\004\047\u0127\001\002\000\004\041\u0128\001" +
    "\002\000\006\002\uffce\040\uffce\001\002\000\006\050\020" +
    "\057\022\001\002\000\006\037\uffdc\047\uffdc\001\002\000" +
    "\006\050\020\057\022\001\002\000\004\036\u012d\001\002" +
    "\000\006\010\u0118\037\u012f\001\002\000\006\037\u0136\047" +
    "\u0121\001\002\000\030\003\050\012\013\016\032\021\036" +
    "\050\020\056\025\057\022\061\027\062\037\063\034\064" +
    "\014\001\002\000\032\003\050\012\013\016\032\021\036" +
    "\032\u0131\050\020\056\025\057\022\061\027\062\037\063" +
    "\034\064\014\001\002\000\004\023\u0132\001\002\000\006" +
    "\050\020\057\022\001\002\000\004\047\u0134\001\002\000" +
    "\004\041\u0135\001\002\000\006\002\uffd1\040\uffd1\001\002" +
    "\000\030\003\050\012\013\016\032\021\036\050\020\056" +
    "\025\057\022\061\027\062\037\063\034\064\014\001\002" +
    "\000\032\003\050\012\013\016\032\021\036\032\u0138\050" +
    "\020\056\025\057\022\061\027\062\037\063\034\064\014" +
    "\001\002\000\004\023\u0139\001\002\000\006\050\020\057" +
    "\022\001\002\000\004\047\u013b\001\002\000\004\041\u013c" +
    "\001\002\000\006\002\uffd0\040\uffd0\001\002\000\004\055" +
    "\u013e\001\002\000\010\010\u0140\011\u013f\060\u0141\001\002" +
    "\000\056\003\uffac\012\uffac\013\uffac\014\uffac\016\uffac\017" +
    "\uffac\021\uffac\022\uffac\023\u0154\032\uffac\037\uffac\044\u0153" +
    "\047\u0152\050\uffac\054\uffac\056\uffac\057\uffac\061\uffac\062" +
    "\uffac\063\uffac\064\uffac\067\uffac\001\002\000\056\003\uffb1" +
    "\012\uffb1\013\uffb1\014\uffb1\016\uffb1\017\uffb1\021\uffb1\022" +
    "\uffb1\023\u0148\032\uffb1\037\uffb1\044\u0147\047\u0146\050\uffb1" +
    "\054\uffb1\056\uffb1\057\uffb1\061\uffb1\062\uffb1\063\uffb1\064" +
    "\uffb1\067\uffb1\001\002\000\054\003\uffa8\012\uffa8\013\uffa8" +
    "\014\uffa8\016\uffa8\017\uffa8\021\uffa8\022\uffa8\023\u0143\032" +
    "\uffa8\037\uffa8\047\u0142\050\uffa8\054\uffa8\056\uffa8\057\uffa8" +
    "\061\uffa8\062\uffa8\063\uffa8\064\uffa8\067\uffa8\001\002\000" +
    "\050\003\uffba\012\uffba\013\uffba\014\uffba\016\uffba\017\uffba" +
    "\021\uffba\022\uffba\032\uffba\037\uffba\050\uffba\054\uffba\056" +
    "\uffba\057\uffba\061\uffba\062\uffba\063\uffba\064\uffba\067\uffba" +
    "\001\002\000\004\035\u0144\001\002\000\052\003\uffa7\012" +
    "\uffa7\013\uffa7\014\uffa7\016\uffa7\017\uffa7\021\uffa7\022\uffa7" +
    "\032\uffa7\037\uffa7\047\u0145\050\uffa7\054\uffa7\056\uffa7\057" +
    "\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7\067\uffa7\001\002" +
    "\000\050\003\uffb9\012\uffb9\013\uffb9\014\uffb9\016\uffb9\017" +
    "\uffb9\021\uffb9\022\uffb9\032\uffb9\037\uffb9\050\uffb9\054\uffb9" +
    "\056\uffb9\057\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\067" +
    "\uffb9\001\002\000\050\003\uffca\012\uffca\013\uffca\014\uffca" +
    "\016\uffca\017\uffca\021\uffca\022\uffca\032\uffca\037\uffca\050" +
    "\uffca\054\uffca\056\uffca\057\uffca\061\uffca\062\uffca\063\uffca" +
    "\064\uffca\067\uffca\001\002\000\004\052\u014b\001\002\000" +
    "\012\036\146\050\020\052\147\057\022\001\002\000\052" +
    "\003\uffb0\012\uffb0\013\uffb0\014\uffb0\016\uffb0\017\uffb0\021" +
    "\uffb0\022\uffb0\032\uffb0\037\uffb0\047\u014a\050\uffb0\054\uffb0" +
    "\056\uffb0\057\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\067" +
    "\uffb0\001\002\000\050\003\uffc9\012\uffc9\013\uffc9\014\uffc9" +
    "\016\uffc9\017\uffc9\021\uffc9\022\uffc9\032\uffc9\037\uffc9\050" +
    "\uffc9\054\uffc9\056\uffc9\057\uffc9\061\uffc9\062\uffc9\063\uffc9" +
    "\064\uffc9\067\uffc9\001\002\000\004\045\u014c\001\002\000" +
    "\054\003\uffae\012\uffae\013\uffae\014\uffae\016\uffae\017\uffae" +
    "\021\uffae\022\uffae\032\uffae\037\uffae\044\u014e\047\u014d\050" +
    "\uffae\054\uffae\056\uffae\057\uffae\061\uffae\062\uffae\063\uffae" +
    "\064\uffae\067\uffae\001\002\000\050\003\uffc0\012\uffc0\013" +
    "\uffc0\014\uffc0\016\uffc0\017\uffc0\021\uffc0\022\uffc0\032\uffc0" +
    "\037\uffc0\050\uffc0\054\uffc0\056\uffc0\057\uffc0\061\uffc0\062" +
    "\uffc0\063\uffc0\064\uffc0\067\uffc0\001\002\000\004\052\u014f" +
    "\001\002\000\004\045\u0150\001\002\000\052\003\uffad\012" +
    "\uffad\013\uffad\014\uffad\016\uffad\017\uffad\021\uffad\022\uffad" +
    "\032\uffad\037\uffad\047\u0151\050\uffad\054\uffad\056\uffad\057" +
    "\uffad\061\uffad\062\uffad\063\uffad\064\uffad\067\uffad\001\002" +
    "\000\050\003\uffbf\012\uffbf\013\uffbf\014\uffbf\016\uffbf\017" +
    "\uffbf\021\uffbf\022\uffbf\032\uffbf\037\uffbf\050\uffbf\054\uffbf" +
    "\056\uffbf\057\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\067" +
    "\uffbf\001\002\000\050\003\uffbe\012\uffbe\013\uffbe\014\uffbe" +
    "\016\uffbe\017\uffbe\021\uffbe\022\uffbe\032\uffbe\037\uffbe\050" +
    "\uffbe\054\uffbe\056\uffbe\057\uffbe\061\uffbe\062\uffbe\063\uffbe" +
    "\064\uffbe\067\uffbe\001\002\000\004\052\u0157\001\002\000" +
    "\004\006\u0155\001\002\000\052\003\uffab\012\uffab\013\uffab" +
    "\014\uffab\016\uffab\017\uffab\021\uffab\022\uffab\032\uffab\037" +
    "\uffab\047\u0156\050\uffab\054\uffab\056\uffab\057\uffab\061\uffab" +
    "\062\uffab\063\uffab\064\uffab\067\uffab\001\002\000\050\003" +
    "\uffbd\012\uffbd\013\uffbd\014\uffbd\016\uffbd\017\uffbd\021\uffbd" +
    "\022\uffbd\032\uffbd\037\uffbd\050\uffbd\054\uffbd\056\uffbd\057" +
    "\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\067\uffbd\001\002" +
    "\000\004\045\u0158\001\002\000\054\003\uffaa\012\uffaa\013" +
    "\uffaa\014\uffaa\016\uffaa\017\uffaa\021\uffaa\022\uffaa\032\uffaa" +
    "\037\uffaa\044\u015a\047\u0159\050\uffaa\054\uffaa\056\uffaa\057" +
    "\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\067\uffaa\001\002" +
    "\000\050\003\uffbc\012\uffbc\013\uffbc\014\uffbc\016\uffbc\017" +
    "\uffbc\021\uffbc\022\uffbc\032\uffbc\037\uffbc\050\uffbc\054\uffbc" +
    "\056\uffbc\057\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\067" +
    "\uffbc\001\002\000\004\052\u015b\001\002\000\004\045\u015c" +
    "\001\002\000\052\003\uffa9\012\uffa9\013\uffa9\014\uffa9\016" +
    "\uffa9\017\uffa9\021\uffa9\022\uffa9\032\uffa9\037\uffa9\047\u015d" +
    "\050\uffa9\054\uffa9\056\uffa9\057\uffa9\061\uffa9\062\uffa9\063" +
    "\uffa9\064\uffa9\067\uffa9\001\002\000\050\003\uffbb\012\uffbb" +
    "\013\uffbb\014\uffbb\016\uffbb\017\uffbb\021\uffbb\022\uffbb\032" +
    "\uffbb\037\uffbb\050\uffbb\054\uffbb\056\uffbb\057\uffbb\061\uffbb" +
    "\062\uffbb\063\uffbb\064\uffbb\067\uffbb\001\002\000\006\002" +
    "\000\040\u0111\001\002\000\006\002\ufffe\040\u0113\001\002" +
    "\000\010\037\u016b\050\020\057\022\001\002\000\004\065" +
    "\u0169\001\002\000\004\020\u0163\001\002\000\010\003\u0164" +
    "\065\u0165\066\110\001\002\000\004\065\u0168\001\002\000" +
    "\050\003\uff37\012\uff37\013\uff37\014\uff37\016\uff37\017\uff37" +
    "\021\uff37\022\uff37\032\uff37\037\uff37\050\uff37\054\uff37\056" +
    "\uff37\057\uff37\061\uff37\062\uff37\063\uff37\064\uff37\067\uff37" +
    "\001\002\000\006\065\u0167\066\114\001\002\000\050\003" +
    "\uff39\012\uff39\013\uff39\014\uff39\016\uff39\017\uff39\021\uff39" +
    "\022\uff39\032\uff39\037\uff39\050\uff39\054\uff39\056\uff39\057" +
    "\uff39\061\uff39\062\uff39\063\uff39\064\uff39\067\uff39\001\002" +
    "\000\050\003\uff38\012\uff38\013\uff38\014\uff38\016\uff38\017" +
    "\uff38\021\uff38\022\uff38\032\uff38\037\uff38\050\uff38\054\uff38" +
    "\056\uff38\057\uff38\061\uff38\062\uff38\063\uff38\064\uff38\067" +
    "\uff38\001\002\000\050\003\uff3a\012\uff3a\013\uff3a\014\uff3a" +
    "\016\uff3a\017\uff3a\021\uff3a\022\uff3a\032\uff3a\037\uff3a\050" +
    "\uff3a\054\uff3a\056\uff3a\057\uff3a\061\uff3a\062\uff3a\063\uff3a" +
    "\064\uff3a\067\uff3a\001\002\000\004\037\u0174\001\002\000" +
    "\006\003\u016d\020\u016c\001\002\000\006\065\u0171\066\110" +
    "\001\002\000\006\065\u016e\066\110\001\002\000\050\003" +
    "\uff3c\012\uff3c\013\uff3c\014\uff3c\016\uff3c\017\uff3c\021\uff3c" +
    "\022\uff3c\032\uff3c\037\uff3c\050\uff3c\054\uff3c\056\uff3c\057" +
    "\uff3c\061\uff3c\062\uff3c\063\uff3c\064\uff3c\067\uff3c\001\002" +
    "\000\006\065\u0170\066\114\001\002\000\050\003\uff3b\012" +
    "\uff3b\013\uff3b\014\uff3b\016\uff3b\017\uff3b\021\uff3b\022\uff3b" +
    "\032\uff3b\037\uff3b\050\uff3b\054\uff3b\056\uff3b\057\uff3b\061" +
    "\uff3b\062\uff3b\063\uff3b\064\uff3b\067\uff3b\001\002\000\050" +
    "\003\uff3d\012\uff3d\013\uff3d\014\uff3d\016\uff3d\017\uff3d\021" +
    "\uff3d\022\uff3d\032\uff3d\037\uff3d\050\uff3d\054\uff3d\056\uff3d" +
    "\057\uff3d\061\uff3d\062\uff3d\063\uff3d\064\uff3d\067\uff3d\001" +
    "\002\000\006\065\u0173\066\114\001\002\000\050\003\uff3e" +
    "\012\uff3e\013\uff3e\014\uff3e\016\uff3e\017\uff3e\021\uff3e\022" +
    "\uff3e\032\uff3e\037\uff3e\050\uff3e\054\uff3e\056\uff3e\057\uff3e" +
    "\061\uff3e\062\uff3e\063\uff3e\064\uff3e\067\uff3e\001\002\000" +
    "\006\003\u0176\020\u0175\001\002\000\004\066\110\001\002" +
    "\000\006\065\u0177\066\110\001\002\000\050\003\uff3f\012" +
    "\uff3f\013\uff3f\014\uff3f\016\uff3f\017\uff3f\021\uff3f\022\uff3f" +
    "\032\uff3f\037\uff3f\050\uff3f\054\uff3f\056\uff3f\057\uff3f\061" +
    "\uff3f\062\uff3f\063\uff3f\064\uff3f\067\uff3f\001\002\000\006" +
    "\065\u0179\066\114\001\002\000\050\003\uff40\012\uff40\013" +
    "\uff40\014\uff40\016\uff40\017\uff40\021\uff40\022\uff40\032\uff40" +
    "\037\uff40\050\uff40\054\uff40\056\uff40\057\uff40\061\uff40\062" +
    "\uff40\063\uff40\064\uff40\067\uff40\001\002\000\006\065\u017b" +
    "\066\114\001\002\000\050\003\uff41\012\uff41\013\uff41\014" +
    "\uff41\016\uff41\017\uff41\021\uff41\022\uff41\032\uff41\037\uff41" +
    "\050\uff41\054\uff41\056\uff41\057\uff41\061\uff41\062\uff41\063" +
    "\uff41\064\uff41\067\uff41\001\002\000\016\035\266\036\262" +
    "\037\u01a2\050\020\057\022\072\264\001\002\000\034\003" +
    "\050\012\013\014\u0189\015\u0187\016\032\021\036\050\020" +
    "\056\025\057\022\061\027\062\037\063\034\064\014\001" +
    "\002\000\034\003\050\012\013\013\u0181\014\u0180\016\032" +
    "\021\036\050\020\056\025\057\022\061\027\062\037\063" +
    "\034\064\014\001\002\000\032\003\050\012\013\014\u0184" +
    "\016\032\021\036\050\020\056\025\057\022\061\027\062" +
    "\037\063\034\064\014\001\002\000\004\003\u0182\001\002" +
    "\000\050\003\uff9e\012\uff9e\013\uff9e\014\uff9e\016\uff9e\017" +
    "\uff9e\021\uff9e\022\uff9e\032\uff9e\037\uff9e\050\uff9e\054\uff9e" +
    "\056\uff9e\057\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e\067" +
    "\uff9e\001\002\000\004\013\u0183\001\002\000\050\003\uff79" +
    "\012\uff79\013\uff79\014\uff79\016\uff79\017\uff79\021\uff79\022" +
    "\uff79\032\uff79\037\uff79\050\uff79\054\uff79\056\uff79\057\uff79" +
    "\061\uff79\062\uff79\063\uff79\064\uff79\067\uff79\001\002\000" +
    "\030\003\050\012\013\016\032\021\036\050\020\056\025" +
    "\057\022\061\027\062\037\063\034\064\014\001\002\000" +
    "\032\003\050\012\013\013\u0186\016\032\021\036\050\020" +
    "\056\025\057\022\061\027\062\037\063\034\064\014\001" +
    "\002\000\050\003\uff81\012\uff81\013\uff81\014\uff81\016\uff81" +
    "\017\uff81\021\uff81\022\uff81\032\uff81\037\uff81\050\uff81\054" +
    "\uff81\056\uff81\057\uff81\061\uff81\062\uff81\063\uff81\064\uff81" +
    "\067\uff81\001\002\000\032\003\u0197\012\013\013\u0196\016" +
    "\032\021\036\050\020\056\025\057\022\061\027\062\037" +
    "\063\034\064\014\001\002\000\032\003\050\012\013\014" +
    "\u018f\016\032\021\036\050\020\056\025\057\022\061\027" +
    "\062\037\063\034\064\014\001\002\000\032\003\u018c\012" +
    "\013\013\u018b\016\032\021\036\050\020\056\025\057\022" +
    "\061\027\062\037\063\034\064\014\001\002\000\032\003" +
    "\050\012\013\013\u018e\016\032\021\036\050\020\056\025" +
    "\057\022\061\027\062\037\063\034\064\014\001\002\000" +
    "\050\003\uff7b\012\uff7b\013\uff7b\014\uff7b\016\uff7b\017\uff7b" +
    "\021\uff7b\022\uff7b\032\uff7b\037\uff7b\050\uff7b\054\uff7b\056" +
    "\uff7b\057\uff7b\061\uff7b\062\uff7b\063\uff7b\064\uff7b\067\uff7b" +
    "\001\002\000\032\003\060\012\013\013\u018d\015\061\016" +
    "\032\020\056\021\036\047\055\050\020\054\063\056\025" +
    "\057\022\001\002\000\050\003\uff80\012\uff80\013\uff80\014" +
    "\uff80\016\uff80\017\uff80\021\uff80\022\uff80\032\uff80\037\uff80" +
    "\050\uff80\054\uff80\056\uff80\057\uff80\061\uff80\062\uff80\063" +
    "\uff80\064\uff80\067\uff80\001\002\000\050\003\uff7e\012\uff7e" +
    "\013\uff7e\014\uff7e\016\uff7e\017\uff7e\021\uff7e\022\uff7e\032" +
    "\uff7e\037\uff7e\050\uff7e\054\uff7e\056\uff7e\057\uff7e\061\uff7e" +
    "\062\uff7e\063\uff7e\064\uff7e\067\uff7e\001\002\000\032\003" +
    "\u0192\012\013\013\u0191\016\032\021\036\050\020\056\025" +
    "\057\022\061\027\062\037\063\034\064\014\001\002\000" +
    "\032\003\050\012\013\013\u0194\016\032\021\036\050\020" +
    "\056\025\057\022\061\027\062\037\063\034\064\014\001" +
    "\002\000\050\003\uff77\012\uff77\013\uff77\014\uff77\016\uff77" +
    "\017\uff77\021\uff77\022\uff77\032\uff77\037\uff77\050\uff77\054" +
    "\uff77\056\uff77\057\uff77\061\uff77\062\uff77\063\uff77\064\uff77" +
    "\067\uff77\001\002\000\032\003\060\012\013\013\u0193\015" +
    "\061\016\032\020\056\021\036\047\055\050\020\054\063" +
    "\056\025\057\022\001\002\000\050\003\uff78\012\uff78\013" +
    "\uff78\014\uff78\016\uff78\017\uff78\021\uff78\022\uff78\032\uff78" +
    "\037\uff78\050\uff78\054\uff78\056\uff78\057\uff78\061\uff78\062" +
    "\uff78\063\uff78\064\uff78\067\uff78\001\002\000\050\003\uff7f" +
    "\012\uff7f\013\uff7f\014\uff7f\016\uff7f\017\uff7f\021\uff7f\022" +
    "\uff7f\032\uff7f\037\uff7f\050\uff7f\054\uff7f\056\uff7f\057\uff7f" +
    "\061\uff7f\062\uff7f\063\uff7f\064\uff7f\067\uff7f\001\002\000" +
    "\034\003\050\012\013\013\u019d\014\u019c\016\032\021\036" +
    "\050\020\056\025\057\022\061\027\062\037\063\034\064" +
    "\014\001\002\000\050\003\uff9b\012\uff9b\013\uff9b\014\uff9b" +
    "\016\uff9b\017\uff9b\021\uff9b\022\uff9b\032\uff9b\037\uff9b\050" +
    "\uff9b\054\uff9b\056\uff9b\057\uff9b\061\uff9b\062\uff9b\063\uff9b" +
    "\064\uff9b\067\uff9b\001\002\000\034\003\060\012\013\013" +
    "\u0199\014\u0198\015\061\016\032\020\056\021\036\047\055" +
    "\050\020\054\063\056\025\057\022\001\002\000\030\003" +
    "\050\012\013\016\032\021\036\050\020\056\025\057\022" +
    "\061\027\062\037\063\034\064\014\001\002\000\050\003" +
    "\uff9c\012\uff9c\013\uff9c\014\uff9c\016\uff9c\017\uff9c\021\uff9c" +
    "\022\uff9c\032\uff9c\037\uff9c\050\uff9c\054\uff9c\056\uff9c\057" +
    "\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\067\uff9c\001\002" +
    "\000\032\003\050\012\013\013\u019b\016\032\021\036\050" +
    "\020\056\025\057\022\061\027\062\037\063\034\064\014" +
    "\001\002\000\050\003\uff7c\012\uff7c\013\uff7c\014\uff7c\016" +
    "\uff7c\017\uff7c\021\uff7c\022\uff7c\032\uff7c\037\uff7c\050\uff7c" +
    "\054\uff7c\056\uff7c\057\uff7c\061\uff7c\062\uff7c\063\uff7c\064" +
    "\uff7c\067\uff7c\001\002\000\030\003\u019f\012\013\016\032" +
    "\021\036\050\020\056\025\057\022\061\027\062\037\063" +
    "\034\064\014\001\002\000\050\003\uff9d\012\uff9d\013\uff9d" +
    "\014\uff9d\016\uff9d\017\uff9d\021\uff9d\022\uff9d\032\uff9d\037" +
    "\uff9d\050\uff9d\054\uff9d\056\uff9d\057\uff9d\061\uff9d\062\uff9d" +
    "\063\uff9d\064\uff9d\067\uff9d\001\002\000\032\003\050\012" +
    "\013\013\u01a1\016\032\021\036\050\020\056\025\057\022" +
    "\061\027\062\037\063\034\064\014\001\002\000\032\003" +
    "\060\012\013\013\u01a0\015\061\016\032\020\056\021\036" +
    "\047\055\050\020\054\063\056\025\057\022\001\002\000" +
    "\050\003\uff7a\012\uff7a\013\uff7a\014\uff7a\016\uff7a\017\uff7a" +
    "\021\uff7a\022\uff7a\032\uff7a\037\uff7a\050\uff7a\054\uff7a\056" +
    "\uff7a\057\uff7a\061\uff7a\062\uff7a\063\uff7a\064\uff7a\067\uff7a" +
    "\001\002\000\050\003\uff7d\012\uff7d\013\uff7d\014\uff7d\016" +
    "\uff7d\017\uff7d\021\uff7d\022\uff7d\032\uff7d\037\uff7d\050\uff7d" +
    "\054\uff7d\056\uff7d\057\uff7d\061\uff7d\062\uff7d\063\uff7d\064" +
    "\uff7d\067\uff7d\001\002\000\006\003\u01c0\015\u01c1\001\002" +
    "\000\022\035\uff97\036\uff97\037\uff97\050\uff97\057\uff97\070" +
    "\277\071\300\072\uff97\001\002\000\016\035\266\036\262" +
    "\037\u01a6\050\020\057\022\072\264\001\002\000\022\035" +
    "\uff98\036\uff98\037\uff98\050\uff98\057\uff98\070\277\071\300" +
    "\072\uff98\001\002\000\010\003\u01a8\015\u01a9\020\u01a7\001" +
    "\002\000\030\003\050\012\013\016\032\021\036\050\020" +
    "\056\025\057\022\061\027\062\037\063\034\064\014\001" +
    "\002\000\034\003\050\012\013\013\u01b5\014\u01b4\016\032" +
    "\021\036\050\020\056\025\057\022\061\027\062\037\063" +
    "\034\064\014\001\002\000\034\003\050\012\013\013\u01ac" +
    "\014\u01ab\016\032\021\036\050\020\056\025\057\022\061" +
    "\027\062\037\063\034\064\014\001\002\000\034\003\050" +
    "\012\013\013\u01b0\014\u01af\016\032\021\036\050\020\056" +
    "\025\057\022\061\027\062\037\063\034\064\014\001\002" +
    "\000\004\003\u01ad\001\002\000\050\003\uffa5\012\uffa5\013" +
    "\uffa5\014\uffa5\016\uffa5\017\uffa5\021\uffa5\022\uffa5\032\uffa5" +
    "\037\uffa5\050\uffa5\054\uffa5\056\uffa5\057\uffa5\061\uffa5\062" +
    "\uffa5\063\uffa5\064\uffa5\067\uffa5\001\002\000\004\013\u01ae" +
    "\001\002\000\050\003\uff87\012\uff87\013\uff87\014\uff87\016" +
    "\uff87\017\uff87\021\uff87\022\uff87\032\uff87\037\uff87\050\uff87" +
    "\054\uff87\056\uff87\057\uff87\061\uff87\062\uff87\063\uff87\064" +
    "\uff87\067\uff87\001\002\000\030\003\050\012\013\016\032" +
    "\021\036\050\020\056\025\057\022\061\027\062\037\063" +
    "\034\064\014\001\002\000\050\003\uffa6\012\uffa6\013\uffa6" +
    "\014\uffa6\016\uffa6\017\uffa6\021\uffa6\022\uffa6\032\uffa6\037" +
    "\uffa6\050\uffa6\054\uffa6\056\uffa6\057\uffa6\061\uffa6\062\uffa6" +
    "\063\uffa6\064\uffa6\067\uffa6\001\002\000\032\003\050\012" +
    "\013\013\u01b2\016\032\021\036\050\020\056\025\057\022" +
    "\061\027\062\037\063\034\064\014\001\002\000\050\003" +
    "\uff8c\012\uff8c\013\uff8c\014\uff8c\016\uff8c\017\uff8c\021\uff8c" +
    "\022\uff8c\032\uff8c\037\uff8c\050\uff8c\054\uff8c\056\uff8c\057" +
    "\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c\067\uff8c\001\002" +
    "\000\034\003\050\012\013\013\u01bb\014\u01ba\016\032\021" +
    "\036\050\020\056\025\057\022\061\027\062\037\063\034" +
    "\064\014\001\002\000\030\003\u01b7\012\013\016\032\021" +
    "\036\050\020\056\025\057\022\061\027\062\037\063\034" +
    "\064\014\001\002\000\050\003\uffa3\012\uffa3\013\uffa3\014" +
    "\uffa3\016\uffa3\017\uffa3\021\uffa3\022\uffa3\032\uffa3\037\uffa3" +
    "\050\uffa3\054\uffa3\056\uffa3\057\uffa3\061\uffa3\062\uffa3\063" +
    "\uffa3\064\uffa3\067\uffa3\001\002\000\032\003\050\012\013" +
    "\013\u01b9\016\032\021\036\050\020\056\025\057\022\061" +
    "\027\062\037\063\034\064\014\001\002\000\032\003\060" +
    "\012\013\013\u01b8\015\061\016\032\020\056\021\036\047" +
    "\055\050\020\054\063\056\025\057\022\001\002\000\050" +
    "\003\uff88\012\uff88\013\uff88\014\uff88\016\uff88\017\uff88\021" +
    "\uff88\022\uff88\032\uff88\037\uff88\050\uff88\054\uff88\056\uff88" +
    "\057\uff88\061\uff88\062\uff88\063\uff88\064\uff88\067\uff88\001" +
    "\002\000\050\003\uff89\012\uff89\013\uff89\014\uff89\016\uff89" +
    "\017\uff89\021\uff89\022\uff89\032\uff89\037\uff89\050\uff89\054" +
    "\uff89\056\uff89\057\uff89\061\uff89\062\uff89\063\uff89\064\uff89" +
    "\067\uff89\001\002\000\030\003\050\012\013\016\032\021" +
    "\036\050\020\056\025\057\022\061\027\062\037\063\034" +
    "\064\014\001\002\000\050\003\uffa4\012\uffa4\013\uffa4\014" +
    "\uffa4\016\uffa4\017\uffa4\021\uffa4\022\uffa4\032\uffa4\037\uffa4" +
    "\050\uffa4\054\uffa4\056\uffa4\057\uffa4\061\uffa4\062\uffa4\063" +
    "\uffa4\064\uffa4\067\uffa4\001\002\000\032\003\050\012\013" +
    "\013\u01bd\016\032\021\036\050\020\056\025\057\022\061" +
    "\027\062\037\063\034\064\014\001\002\000\050\003\uff8b" +
    "\012\uff8b\013\uff8b\014\uff8b\016\uff8b\017\uff8b\021\uff8b\022" +
    "\uff8b\032\uff8b\037\uff8b\050\uff8b\054\uff8b\056\uff8b\057\uff8b" +
    "\061\uff8b\062\uff8b\063\uff8b\064\uff8b\067\uff8b\001\002\000" +
    "\032\003\050\012\013\013\u01bf\016\032\021\036\050\020" +
    "\056\025\057\022\061\027\062\037\063\034\064\014\001" +
    "\002\000\050\003\uff8a\012\uff8a\013\uff8a\014\uff8a\016\uff8a" +
    "\017\uff8a\021\uff8a\022\uff8a\032\uff8a\037\uff8a\050\uff8a\054" +
    "\uff8a\056\uff8a\057\uff8a\061\uff8a\062\uff8a\063\uff8a\064\uff8a" +
    "\067\uff8a\001\002\000\034\003\050\012\013\013\u01cd\014" +
    "\u01cc\016\032\021\036\050\020\056\025\057\022\061\027" +
    "\062\037\063\034\064\014\001\002\000\034\003\050\012" +
    "\013\013\u01c4\014\u01c3\016\032\021\036\050\020\056\025" +
    "\057\022\061\027\062\037\063\034\064\014\001\002\000" +
    "\034\003\050\012\013\013\u01c8\014\u01c7\016\032\021\036" +
    "\050\020\056\025\057\022\061\027\062\037\063\034\064" +
    "\014\001\002\000\004\003\u01c5\001\002\000\050\003\uffa1" +
    "\012\uffa1\013\uffa1\014\uffa1\016\uffa1\017\uffa1\021\uffa1\022" +
    "\uffa1\032\uffa1\037\uffa1\050\uffa1\054\uffa1\056\uffa1\057\uffa1" +
    "\061\uffa1\062\uffa1\063\uffa1\064\uffa1\067\uffa1\001\002\000" +
    "\004\013\u01c6\001\002\000\050\003\uff82\012\uff82\013\uff82" +
    "\014\uff82\016\uff82\017\uff82\021\uff82\022\uff82\032\uff82\037" +
    "\uff82\050\uff82\054\uff82\056\uff82\057\uff82\061\uff82\062\uff82" +
    "\063\uff82\064\uff82\067\uff82\001\002\000\030\003\050\012" +
    "\013\016\032\021\036\050\020\056\025\057\022\061\027" +
    "\062\037\063\034\064\014\001\002\000\050\003\uffa2\012" +
    "\uffa2\013\uffa2\014\uffa2\016\uffa2\017\uffa2\021\uffa2\022\uffa2" +
    "\032\uffa2\037\uffa2\050\uffa2\054\uffa2\056\uffa2\057\uffa2\061" +
    "\uffa2\062\uffa2\063\uffa2\064\uffa2\067\uffa2\001\002\000\032" +
    "\003\050\012\013\013\u01ca\016\032\021\036\050\020\056" +
    "\025\057\022\061\027\062\037\063\034\064\014\001\002" +
    "\000\050\003\uff86\012\uff86\013\uff86\014\uff86\016\uff86\017" +
    "\uff86\021\uff86\022\uff86\032\uff86\037\uff86\050\uff86\054\uff86" +
    "\056\uff86\057\uff86\061\uff86\062\uff86\063\uff86\064\uff86\067" +
    "\uff86\001\002\000\034\003\050\012\013\013\u01d3\014\u01d2" +
    "\016\032\021\036\050\020\056\025\057\022\061\027\062" +
    "\037\063\034\064\014\001\002\000\030\003\u01cf\012\013" +
    "\016\032\021\036\050\020\056\025\057\022\061\027\062" +
    "\037\063\034\064\014\001\002\000\050\003\uffa0\012\uffa0" +
    "\013\uffa0\014\uffa0\016\uffa0\017\uffa0\021\uffa0\022\uffa0\032" +
    "\uffa0\037\uffa0\050\uffa0\054\uffa0\056\uffa0\057\uffa0\061\uffa0" +
    "\062\uffa0\063\uffa0\064\uffa0\067\uffa0\001\002\000\032\003" +
    "\050\012\013\013\u01d1\016\032\021\036\050\020\056\025" +
    "\057\022\061\027\062\037\063\034\064\014\001\002\000" +
    "\032\003\060\012\013\013\u01d0\015\061\016\032\020\056" +
    "\021\036\047\055\050\020\054\063\056\025\057\022\001" +
    "\002\000\050\003\uff83\012\uff83\013\uff83\014\uff83\016\uff83" +
    "\017\uff83\021\uff83\022\uff83\032\uff83\037\uff83\050\uff83\054" +
    "\uff83\056\uff83\057\uff83\061\uff83\062\uff83\063\uff83\064\uff83" +
    "\067\uff83\001\002\000\050\003\uff84\012\uff84\013\uff84\014" +
    "\uff84\016\uff84\017\uff84\021\uff84\022\uff84\032\uff84\037\uff84" +
    "\050\uff84\054\uff84\056\uff84\057\uff84\061\uff84\062\uff84\063" +
    "\uff84\064\uff84\067\uff84\001\002\000\030\003\050\012\013" +
    "\016\032\021\036\050\020\056\025\057\022\061\027\062" +
    "\037\063\034\064\014\001\002\000\050\003\uff9f\012\uff9f" +
    "\013\uff9f\014\uff9f\016\uff9f\017\uff9f\021\uff9f\022\uff9f\032" +
    "\uff9f\037\uff9f\050\uff9f\054\uff9f\056\uff9f\057\uff9f\061\uff9f" +
    "\062\uff9f\063\uff9f\064\uff9f\067\uff9f\001\002\000\032\003" +
    "\050\012\013\013\u01d5\016\032\021\036\050\020\056\025" +
    "\057\022\061\027\062\037\063\034\064\014\001\002\000" +
    "\050\003\uff85\012\uff85\013\uff85\014\uff85\016\uff85\017\uff85" +
    "\021\uff85\022\uff85\032\uff85\037\uff85\050\uff85\054\uff85\056" +
    "\uff85\057\uff85\061\uff85\062\uff85\063\uff85\064\uff85\067\uff85" +
    "\001\002\000\032\003\050\012\013\016\032\021\036\050" +
    "\020\054\u01d9\056\025\057\022\061\027\062\037\063\034" +
    "\064\014\001\002\000\006\002\ufffb\040\u0111\001\002\000" +
    "\006\002\ufff8\040\u0113\001\002\000\006\002\ufffc\040\u0111" +
    "\001\002\000\006\002\ufff9\040\u0113\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01d8\000\004\002\005\001\001\000\030\003\u01d5\004" +
    "\014\006\020\007\022\010\027\011\034\014\016\015\030" +
    "\016\037\020\023\022\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\015\004\014\006\020\007\022\010" +
    "\027\011\034\014\016\015\030\016\037\020\023\022\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\004\065\006\067\007\070\010\073\011\075" +
    "\014\066\015\074\016\077\020\023\022\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u013c\001\001\000\016\004\051\006\056\007\053\010\061" +
    "\011\050\020\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\045\004\014\006\020\007\022\010\027\011\034\014" +
    "\016\015\030\016\037\020\046\022\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\065\006\067\007\070\010\073\011\075\014\066\015\074" +
    "\016\077\020\023\022\076\001\001\000\002\001\001\000" +
    "\016\004\051\006\056\007\053\010\061\011\050\020\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\103" +
    "\004\014\006\020\007\022\010\027\011\034\014\016\015" +
    "\030\016\037\017\110\020\023\022\032\001\001\000\002" +
    "\001\001\000\016\004\051\006\056\007\053\010\061\011" +
    "\050\020\052\001\001\000\030\003\063\004\014\006\020" +
    "\007\022\010\027\011\034\014\016\015\030\016\037\020" +
    "\023\022\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\004\065\006\067\007\070\010\073\011\075\014" +
    "\066\015\074\016\077\020\023\022\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\103\004\014\006\020\007\022\010\027\011\034\014" +
    "\016\015\030\016\037\020\023\022\032\001\001\000\002" +
    "\001\001\000\026\004\065\006\067\007\070\010\073\011" +
    "\075\014\066\015\074\016\077\020\023\022\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\117\004\014\006\020" +
    "\007\022\010\027\011\034\014\016\015\030\016\037\020" +
    "\023\022\032\001\001\000\026\004\065\006\067\007\070" +
    "\010\073\011\075\014\066\015\074\016\077\020\023\022" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\123\004\014\006\020\007\022\010\027\011\034\014" +
    "\016\015\030\016\037\020\023\022\032\001\001\000\026" +
    "\004\065\006\067\007\070\010\073\011\075\014\066\015" +
    "\074\016\077\020\023\022\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\131\004\014\006\020\007\022\010\027\011\034" +
    "\014\016\015\030\016\037\020\023\022\032\001\001\000" +
    "\026\004\065\006\067\007\070\010\073\011\075\014\066" +
    "\015\074\016\077\020\023\022\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\135\004\014\006\020" +
    "\007\022\010\027\011\034\014\016\015\030\016\037\020" +
    "\023\022\032\001\001\000\026\004\065\006\067\007\070" +
    "\010\073\011\075\014\066\015\074\016\077\020\023\022" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\020\144\022\142\024\147\025\151\026" +
    "\143\027\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\020\154\025\164\026\143\027" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\154\026\162\027" +
    "\150\001\001\000\010\020\154\026\155\027\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\154\027" +
    "\161\001\001\000\006\020\154\027\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\170" +
    "\031\171\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\216\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\241\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\234" +
    "\004\014\006\020\007\022\010\027\011\034\014\016\015" +
    "\030\016\037\020\023\022\032\001\001\000\002\001\001" +
    "\000\026\004\065\006\067\007\070\010\073\011\075\014" +
    "\066\015\074\016\077\020\023\022\076\001\001\000\016" +
    "\004\051\006\056\007\053\010\061\011\050\020\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\255\001" +
    "\001\000\002\001\001\000\030\003\253\004\014\006\020" +
    "\007\022\010\027\011\034\014\016\015\030\016\037\020" +
    "\023\022\032\001\001\000\030\003\250\004\014\006\020" +
    "\007\022\010\027\011\034\014\016\015\030\016\037\020" +
    "\023\022\032\001\001\000\002\001\001\000\026\004\065" +
    "\006\067\007\070\010\073\011\075\014\066\015\074\016" +
    "\077\020\023\022\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\065\006\067\007\070\010\073\011" +
    "\075\014\066\015\074\016\077\020\023\022\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\262\020\264\001\001\000\006" +
    "\012\312\020\264\001\001\000\002\001\001\000\006\012" +
    "\275\020\264\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\301\020\264\001" +
    "\001\000\006\012\300\020\264\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\303\020\304\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\306\001\001" +
    "\000\002\001\001\000\014\020\154\024\311\025\151\026" +
    "\143\027\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\317\020\264\001\001\000\002" +
    "\001\001\000\006\005\321\020\304\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\330\004\014\006\020" +
    "\007\022\010\027\011\034\014\016\015\030\016\037\020" +
    "\023\022\032\001\001\000\030\003\326\004\014\006\020" +
    "\007\022\010\027\011\034\014\016\015\030\016\037\020" +
    "\023\022\032\001\001\000\002\001\001\000\026\004\065" +
    "\006\067\007\070\010\073\011\075\014\066\015\074\016" +
    "\077\020\023\022\076\001\001\000\002\001\001\000\026" +
    "\004\065\006\067\007\070\010\073\011\075\014\066\015" +
    "\074\016\077\020\023\022\076\001\001\000\002\001\001" +
    "\000\030\003\336\004\014\006\020\007\022\010\027\011" +
    "\034\014\016\015\030\016\037\020\337\022\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\004\065\006\067\007\070\010\073\011\075\014\066" +
    "\015\074\016\077\020\023\022\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\357\020" +
    "\264\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\351\004\014\006\020\007\022\010\027\011\034\014" +
    "\016\015\030\016\037\020\023\022\032\001\001\000\026" +
    "\004\065\006\067\007\070\010\073\011\075\014\066\015" +
    "\074\016\077\020\023\022\076\001\001\000\002\001\001" +
    "\000\016\004\051\006\056\007\053\010\061\011\050\020" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\366\004\014\006\020\007\022\010\027\011\034\014\016" +
    "\015\030\016\037\020\023\022\032\001\001\000\030\003" +
    "\363\004\014\006\020\007\022\010\027\011\034\014\016" +
    "\015\030\016\037\020\023\022\032\001\001\000\026\004" +
    "\065\006\067\007\070\010\073\011\075\014\066\015\074" +
    "\016\077\020\023\022\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\004\065\006\067\007\070\010\073" +
    "\011\075\014\066\015\074\016\077\020\023\022\076\001" +
    "\001\000\002\001\001\000\016\004\051\006\056\007\053" +
    "\010\061\011\050\020\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\u0101\004\014" +
    "\006\020\007\022\010\027\011\034\014\016\015\030\016" +
    "\037\020\023\022\032\001\001\000\030\003\376\004\014" +
    "\006\020\007\022\010\027\011\034\014\016\015\030\016" +
    "\037\020\023\022\032\001\001\000\026\004\065\006\067" +
    "\007\070\010\073\011\075\014\066\015\074\016\077\020" +
    "\023\022\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\004\065\006\067\007\070\010\073\011\075\014" +
    "\066\015\074\016\077\020\023\022\076\001\001\000\002" +
    "\001\001\000\016\004\051\006\056\007\053\010\061\011" +
    "\050\020\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u010a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\u0111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\u0114\001\001\000\002\001" +
    "\001\000\004\030\u0116\001\001\000\002\001\001\000\004" +
    "\020\u011f\001\001\000\030\003\u0119\004\014\006\020\007" +
    "\022\010\027\011\034\014\016\015\030\016\037\020\023" +
    "\022\032\001\001\000\026\004\065\006\067\007\070\010" +
    "\073\011\075\014\066\015\074\016\077\020\023\022\076" +
    "\001\001\000\002\001\001\000\004\020\u011c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\u0122\004\014\006" +
    "\020\007\022\010\027\011\034\014\016\015\030\016\037" +
    "\020\023\022\032\001\001\000\026\004\065\006\067\007" +
    "\070\010\073\011\075\014\066\015\074\016\077\020\023" +
    "\022\076\001\001\000\002\001\001\000\004\020\u0125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u0129\001\001\000\002\001\001\000\004\020" +
    "\u012b\001\001\000\002\001\001\000\004\030\u012d\001\001" +
    "\000\002\001\001\000\030\003\u012f\004\014\006\020\007" +
    "\022\010\027\011\034\014\016\015\030\016\037\020\023" +
    "\022\032\001\001\000\026\004\065\006\067\007\070\010" +
    "\073\011\075\014\066\015\074\016\077\020\023\022\076" +
    "\001\001\000\002\001\001\000\004\020\u0132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\u0136\004\014\006\020\007\022\010\027\011\034\014" +
    "\016\015\030\016\037\020\023\022\032\001\001\000\026" +
    "\004\065\006\067\007\070\010\073\011\075\014\066\015" +
    "\074\016\077\020\023\022\076\001\001\000\002\001\001" +
    "\000\004\020\u0139\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\020" +
    "\154\024\u0148\025\151\026\143\027\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u015e\001\001\000\002\001" +
    "\001\000\004\020\u0169\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\u0165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\u0171\001\001\000\004\017\u016e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\u0179\001\001\000\004\017\u0177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\u01a2\020" +
    "\264\023\u01a3\001\001\000\030\003\u0187\004\014\006\020" +
    "\007\022\010\027\011\034\014\016\015\030\016\037\020" +
    "\023\022\032\001\001\000\030\003\u017e\004\014\006\020" +
    "\007\022\010\027\011\034\014\016\015\030\016\037\020" +
    "\023\022\032\001\001\000\026\004\065\006\067\007\070" +
    "\010\073\011\075\014\066\015\074\016\077\020\023\022" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\u0184\004\014\006" +
    "\020\007\022\010\027\011\034\014\016\015\030\016\037" +
    "\020\023\022\032\001\001\000\026\004\065\006\067\007" +
    "\070\010\073\011\075\014\066\015\074\016\077\020\023" +
    "\022\076\001\001\000\002\001\001\000\030\003\u0194\004" +
    "\014\006\020\007\022\010\027\011\034\014\016\015\030" +
    "\016\037\020\023\022\032\001\001\000\026\004\065\006" +
    "\067\007\070\010\073\011\075\014\066\015\074\016\077" +
    "\020\023\022\076\001\001\000\030\003\u0189\004\014\006" +
    "\020\007\022\010\027\011\034\014\016\015\030\016\037" +
    "\020\023\022\032\001\001\000\026\004\065\006\067\007" +
    "\070\010\073\011\075\014\066\015\074\016\077\020\023" +
    "\022\076\001\001\000\002\001\001\000\016\004\051\006" +
    "\056\007\053\010\061\011\050\020\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\u018f\004\014\006" +
    "\020\007\022\010\027\011\034\014\016\015\030\016\037" +
    "\020\023\022\032\001\001\000\026\004\065\006\067\007" +
    "\070\010\073\011\075\014\066\015\074\016\077\020\023" +
    "\022\076\001\001\000\002\001\001\000\016\004\051\006" +
    "\056\007\053\010\061\011\050\020\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\004\065\006\067\007" +
    "\070\010\073\011\075\014\066\015\074\016\077\020\023" +
    "\022\076\001\001\000\002\001\001\000\016\004\051\006" +
    "\056\007\053\010\061\011\050\020\052\001\001\000\030" +
    "\003\u0199\004\014\006\020\007\022\010\027\011\034\014" +
    "\016\015\030\016\037\020\023\022\032\001\001\000\002" +
    "\001\001\000\026\004\065\006\067\007\070\010\073\011" +
    "\075\014\066\015\074\016\077\020\023\022\076\001\001" +
    "\000\002\001\001\000\030\003\u019d\004\014\006\020\007" +
    "\022\010\027\011\034\014\016\015\030\016\037\020\023" +
    "\022\032\001\001\000\002\001\001\000\026\004\065\006" +
    "\067\007\070\010\073\011\075\014\066\015\074\016\077" +
    "\020\023\022\076\001\001\000\016\004\051\006\056\007" +
    "\053\010\061\011\050\020\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\u01a4\020\264\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\u01bd\004\014\006\020\007\022\010" +
    "\027\011\034\014\016\015\030\016\037\020\023\022\032" +
    "\001\001\000\030\003\u01b2\004\014\006\020\007\022\010" +
    "\027\011\034\014\016\015\030\016\037\020\023\022\032" +
    "\001\001\000\030\003\u01a9\004\014\006\020\007\022\010" +
    "\027\011\034\014\016\015\030\016\037\020\023\022\032" +
    "\001\001\000\026\004\065\006\067\007\070\010\073\011" +
    "\075\014\066\015\074\016\077\020\023\022\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\u01b0\004\014\006\020\007\022" +
    "\010\027\011\034\014\016\015\030\016\037\020\023\022" +
    "\032\001\001\000\002\001\001\000\026\004\065\006\067" +
    "\007\070\010\073\011\075\014\066\015\074\016\077\020" +
    "\023\022\076\001\001\000\002\001\001\000\026\004\065" +
    "\006\067\007\070\010\073\011\075\014\066\015\074\016" +
    "\077\020\023\022\076\001\001\000\030\003\u01b5\004\014" +
    "\006\020\007\022\010\027\011\034\014\016\015\030\016" +
    "\037\020\023\022\032\001\001\000\002\001\001\000\026" +
    "\004\065\006\067\007\070\010\073\011\075\014\066\015" +
    "\074\016\077\020\023\022\076\001\001\000\016\004\051" +
    "\006\056\007\053\010\061\011\050\020\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\u01bb\004\014" +
    "\006\020\007\022\010\027\011\034\014\016\015\030\016" +
    "\037\020\023\022\032\001\001\000\002\001\001\000\026" +
    "\004\065\006\067\007\070\010\073\011\075\014\066\015" +
    "\074\016\077\020\023\022\076\001\001\000\002\001\001" +
    "\000\026\004\065\006\067\007\070\010\073\011\075\014" +
    "\066\015\074\016\077\020\023\022\076\001\001\000\002" +
    "\001\001\000\030\003\u01ca\004\014\006\020\007\022\010" +
    "\027\011\034\014\016\015\030\016\037\020\023\022\032" +
    "\001\001\000\030\003\u01c1\004\014\006\020\007\022\010" +
    "\027\011\034\014\016\015\030\016\037\020\023\022\032" +
    "\001\001\000\026\004\065\006\067\007\070\010\073\011" +
    "\075\014\066\015\074\016\077\020\023\022\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\u01c8\004\014\006\020\007\022" +
    "\010\027\011\034\014\016\015\030\016\037\020\023\022" +
    "\032\001\001\000\002\001\001\000\026\004\065\006\067" +
    "\007\070\010\073\011\075\014\066\015\074\016\077\020" +
    "\023\022\076\001\001\000\002\001\001\000\026\004\065" +
    "\006\067\007\070\010\073\011\075\014\066\015\074\016" +
    "\077\020\023\022\076\001\001\000\030\003\u01cd\004\014" +
    "\006\020\007\022\010\027\011\034\014\016\015\030\016" +
    "\037\020\023\022\032\001\001\000\002\001\001\000\026" +
    "\004\065\006\067\007\070\010\073\011\075\014\066\015" +
    "\074\016\077\020\023\022\076\001\001\000\016\004\051" +
    "\006\056\007\053\010\061\011\050\020\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\u01d3\004\014" +
    "\006\020\007\022\010\027\011\034\014\016\015\030\016" +
    "\037\020\023\022\032\001\001\000\002\001\001\000\026" +
    "\004\065\006\067\007\070\010\073\011\075\014\066\015" +
    "\074\016\077\020\023\022\076\001\001\000\002\001\001" +
    "\000\026\004\065\006\067\007\070\010\073\011\075\014" +
    "\066\015\074\016\077\020\023\022\076\001\001\000\004" +
    "\021\u01d7\001\001\000\002\001\001\000\004\021\u01d9\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
        String error = "";
        if(s.value != null){
            error = "Error Sintactico en la linea "+s.right+ " Columna "+(s.left+1)+ ". No se esperaba esto: "+ "\""+ s.value+ "\""+ "\n" ;
            try {
                FileWriter myWriter = new FileWriter("errors.txt",true);
                myWriter.append(error);
            
                myWriter.close();
            
            } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
             }
           System.out.print(error);
        }
        //errores.add(error)
    }
    
    protected int error_sync_size(){
        return 2;
    }
    


    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // CASE ::= When Identificadoroletra Igual SENTENCIA Stop P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                Node raiz = new Node("Raiz",false);
                Node x = new Node("CASE",false);
                x.addHijo((Node)h1);
                Node THEN = new Node("THEN",false);
                for(int i = 0;i<((Node)h2).getHijos().size();i++){
                THEN.addHijo(((Node)h2).getHijos().get(i));
                }
                x.addHijo(THEN);
                raiz.addHijo(x);
                RESULT = raiz;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // CASE ::= CASE When Identificadoroletra Igual SENTENCIA Stop P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                
                Node raiz = new Node("ROOT",false);
                for(int i = 0;i<((Node)h1).getHijos().size();i++){
                raiz.addHijo(((Node)h1).getHijos().get(i));
                }
                Node x = new Node("CASE",false);
                x.addHijo((Node)h2);
                Node THEN = new Node("THEN",false);
                for(int i = 0;i<((Node)h3).getHijos().size();i++){
                THEN.addHijo(((Node)h3).getHijos().get(i));
                }
                x.addHijo(THEN);
                raiz.addHijo(x);
                RESULT = raiz;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // CASE ::= When Caracter Igual SENTENCIA Stop P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                Node raiz = new Node("ROOT",false);
                Node x = new Node("CHAR-CASE",false);
                x.addHijo(new Node((h1.toString()).substring(1,2),false));
                Node THEN = new Node("THEN",false);
                for(int i = 0;i<((Node)h2).getHijos().size();i++){
                THEN.addHijo(((Node)h2).getHijos().get(i));
                }
                x.addHijo(THEN);
                raiz.addHijo(x);
                RESULT = raiz;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // CASE ::= CASE When Caracter Igual SENTENCIA Stop P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                
                Node raiz = new Node("ROOT",false);
                for(int i = 0;i<((Node)h1).getHijos().size();i++){
                raiz.addHijo(((Node)h1).getHijos().get(i));
                }
                Node x = new Node("CHAR-CASE",false);
                x.addHijo(new Node((h2.toString()).substring(1,2),false));
                Node THEN = new Node("THEN",false);
                for(int i = 0;i<((Node)h3).getHijos().size();i++){
                THEN.addHijo(((Node)h3).getHijos().get(i));
                }
                x.addHijo(THEN);
                raiz.addHijo(x);
                RESULT = raiz;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // MATCH ::= error Do CASE CloseMatch 
            {
              Object RESULT =null;
		        
        parser.syntax_error(new Symbol(sym.error,0,0,"[12]ERROR Do CASE CLOSEMATCH OPENMATCH. Do sin OpenMATCH o con error en condicion.")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MATCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // MATCH ::= error Do CloseMatch 
            {
              Object RESULT =null;
		 
        parser.syntax_error(new Symbol(sym.error,0,0,"[11] No hay OpenMatch, case vacia" ));
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MATCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // MATCH ::= OpenMatch error Do CloseMatch 
            {
              Object RESULT =null;
		
        parser.syntax_error(new Symbol(sym.error,0,0,"[10] OPENMatch ERROR DO CLOSEMATCH. OPENMATCH con error en condicion. OPENMATCH con CASE vacia")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MATCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // MATCH ::= OpenMatch error Do error CloseMatch 
            {
              Object RESULT =null;
		
        parser.syntax_error(new Symbol(sym.error,0,0,"[9] OPENMATCH ERROR DO ERROR CLOSEMATCH con error en condicion y CASE.")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MATCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // MATCH ::= OpenMatch error Do CASE CloseMatch 
            {
              Object RESULT =null;
		
        parser.syntax_error(new Symbol(sym.error,0,0,"[8] OpenMatch con error en condicion")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MATCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // MATCH ::= OpenMatch Do CloseMatch 
            {
              Object RESULT =null;
		
        parser.syntax_error(new Symbol(sym.error,0,0,"[7] OpenMatch sin condicion ni case ni parentesis")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MATCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // MATCH ::= OpenMatch Parentesis_a Parentesis_c error CASE CloseMatch 
            {
              Object RESULT =null;
		
        parser.syntax_error(new Symbol(sym.error,0,0,"[6] OpenMatch sin condicion y Do no localizado")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MATCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // MATCH ::= OpenMatch Parentesis_a Parentesis_c error CloseMatch 
            {
              Object RESULT =null;
		 
        parser.syntax_error(new Symbol(sym.error,0,0,"[5] OpenMatch sin condicion y Do no localizado. CASE VACIA.")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MATCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // MATCH ::= OpenMatch Parentesis_a Parentesis_c Do CloseMatch 
            {
              Object RESULT =null;
		
        parser.syntax_error(new Symbol(sym.error,0,0,"[4] OpenMatch sin condicion y case vacia.")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MATCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // MATCH ::= OpenMatch Parentesis_a Parentesis_c Do CASE CloseMatch 
            {
              Object RESULT =null;
		
        parser.syntax_error(new Symbol(sym.error,0,0,"[3] OpenMatch con condicion vacia. .")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MATCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // MATCH ::= OpenMatch Parentesis_a Identificadoroletra Parentesis_c error CloseMatch 
            {
              Object RESULT =null;
		
        
        parser.syntax_error(new Symbol(sym.error,0,0,"[2] OpenMatch con case-do incorrecta. No hay nada que hacer en el do.")); 
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MATCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // MATCH ::= OpenMatch Parentesis_a Identificadoroletra Parentesis_c error CASE CloseMatch 
            {
              Object RESULT =null;
		
         parser.syntax_error(new Symbol(sym.error,0,0,"[1] OpenMatch sin DO correcto.")); 
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MATCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // MATCH ::= OpenMatch Parentesis_a Identificadoroletra Parentesis_c Do CASE CloseMatch 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
          Node x = new Node("OPENMATCH",false);
          x.addHijo((Node)h1);
          for(int i = 0;i<((Node)h2).getHijos().size();i++){
                x.addHijo(((Node)h2).getHijos().get(i));
           }
          RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MATCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // DECLARACION_FOR ::= Op_incremento Identificadoroletra 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("FOR DECLARATION",false);
                x.addHijo((Node)h1);
                x.addHijo(new Node(h2.toString(),false));
                RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // DECLARACION_FOR ::= Identificadoroletra Op_incremento 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("FOR DECLARATION",false);
                x.addHijo((Node)h1);
                x.addHijo(new Node(h2.toString(),false));
                RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // DECLARACION_FOR ::= Identificadoroletra Op_atribucion EXP 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node x = new Node("FOR DECLARATION",false);
        x.addHijo((Node)h1);
        x.addHijo(new Node(h2.toString(),false));
        x.addHijo((Node)h3);
        RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // ESCRITURA ::= Throwln error P_coma 
            {
              Object RESULT =null;
		 
                 parser.syntax_error(new Symbol(sym.error,0,0,"[8] Parametros del Throwln no son reconocidos."));
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // ESCRITURA ::= Throwln Parentesis_a Identificadoroletra Parentesis_c 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
                parser.syntax_error(new Symbol(sym.error,0,0,"[7] Throwln sin Pcoma.")); 
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // ESCRITURA ::= Throwln Parentesis_a Parentesis_c 
            {
              Object RESULT =null;
		 
                parser.syntax_error(new Symbol(sym.error,0,0,"[6] Throwln sin Identificador o letra. y no tiene P_coma.")); 
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // ESCRITURA ::= Throwln Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		 
                parser.syntax_error(new Symbol(sym.error,0,0,"[5] Throwln sin Identificar o letra.")); 
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ESCRITURA ::= THrow error P_coma 
            {
              Object RESULT =null;
		 
                 parser.syntax_error(new Symbol(sym.error,0,0,"[4] Parametros del Throw no son reconocidos."));
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // ESCRITURA ::= THrow Parentesis_a Identificadoroletra Parentesis_c 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
                parser.syntax_error(new Symbol(sym.error,0,0,"[3] Throw sin Pcoma.")); 
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // ESCRITURA ::= THrow Parentesis_a Parentesis_c 
            {
              Object RESULT =null;
		 
                parser.syntax_error(new Symbol(sym.error,0,0,"[2] Throw sin Identificador o letra. y no tiene P_coma.")); 
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // ESCRITURA ::= THrow Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		 
                parser.syntax_error(new Symbol(sym.error,0,0,"[1] Throw sin Identificador o letra.")); 
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // ESCRITURA ::= THrow Parentesis_a SENTENCIA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    Node x = new Node("THROW",false);
                    for(int i = 0;i<((Node)h1).getHijos().size();i++){
                            x.addHijo(((Node)h1).getHijos().get(i));
                        }
                    RESULT = x;
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // ESCRITURA ::= Throwln Parentesis_a SENTENCIA Parentesis_c P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    Node x = new Node("THROWLN",false);
                    for(int i = 0;i<((Node)h1).getHijos().size();i++){
                            x.addHijo(((Node)h1).getHijos().get(i));
                        }
                    RESULT = x;
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // ESCRITURA ::= Throwln Parentesis_a Identificadoroletra Parentesis_c P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    Node x = new Node("THROWLN",false);
                    x.addHijo((Node)h1);
                    RESULT = x;
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // ESCRITURA ::= THrow Parentesis_a Identificadoroletra Parentesis_c P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    Node x = new Node("THROW",false);
                    x.addHijo((Node)h1);
                    RESULT = x;
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // LECTURA ::= Eat P_coma 
            {
              Object RESULT =null;
		 
                parser.syntax_error(new Symbol(sym.error,0,0,"[4] Eat sin parametro y Pcoma.")); 
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LECTURA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // LECTURA ::= Eat error P_coma 
            {
              Object RESULT =null;
		 
                 parser.syntax_error(new Symbol(sym.error,0,0,"[3] Parametros del Eat no son reconocidos."));
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LECTURA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // LECTURA ::= Eat Parentesis_a Identificadoroletra Parentesis_c 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
                parser.syntax_error(new Symbol(sym.error,0,0,"[2] Eat sin Pcoma.")); 
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LECTURA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // LECTURA ::= Eat Parentesis_a Parentesis_c 
            {
              Object RESULT =null;
		 
                parser.syntax_error(new Symbol(sym.error,0,0,"[2] Eat sin Identificar o letra. y no tiene P_coma.")); 
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LECTURA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // LECTURA ::= Eat Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;
		 
                parser.syntax_error(new Symbol(sym.error,0,0,"[1] Eat sin Identificar o letra.")); 
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LECTURA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // LECTURA ::= Eat Parentesis_a Identificadoroletra Parentesis_c P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                Node x = new Node("EAT",false);
                x.addHijo((Node)h1);
                RESULT = x;
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LECTURA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // SENTENCIA_FOR ::= Int Identificadoroletra Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node raiz = new Node("ROOT",false);
            Node x = new Node("FOR STATEMENT",false);
            
            x.addHijo((Node)h1);
            x.addHijo(new Node(n.toString(),false));
            raiz.addHijo(x);
            raiz.addHijo((Node)h2);
            raiz.addHijo((Node)h3);
            RESULT = raiz;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // FOR ::= error Do SENTENCIA CloseFor 
            {
              Object RESULT =null;
		        
        parser.syntax_error(new Symbol(sym.error,0,0,"[12]ERROR Do SENTENCIA CLOSEFOR OPENFOR. Do sin OpenFor o con error en condicion.")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // FOR ::= error Do CloseFor 
            {
              Object RESULT =null;
		 
        parser.syntax_error(new Symbol(sym.error,0,0,"[11] ERROR DO CLOSEFOR. No hay OpenFor sentencia vacia" ));
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // FOR ::= OpenFor error Do CloseFor 
            {
              Object RESULT =null;
		
        parser.syntax_error(new Symbol(sym.error,0,0,"[10] OPENFOR ERROR DO CLOSEFOR. OPENFOR con error en condicion. OPENFOR con sentencia vacia")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // FOR ::= OpenFor error Do error CloseFor 
            {
              Object RESULT =null;
		
        parser.syntax_error(new Symbol(sym.error,0,0,"[9] OPENFOR ERROR DO ERROR CLOSEFOR con error en condicion y sentencia")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // FOR ::= OpenFor error Do SENTENCIA CloseFor 
            {
              Object RESULT =null;
		
        parser.syntax_error(new Symbol(sym.error,0,0,"[8] OPENFOR ERROR DO SENTENCIA CLOSEFOR. OpenFor con error en condicion")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // FOR ::= OpenFor Do CloseFor 
            {
              Object RESULT =null;
		
        parser.syntax_error(new Symbol(sym.error,0,0,"[7] Openfor sin condicion ni sentencia ni parentesis")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // FOR ::= OpenFor Parentesis_a Parentesis_c error SENTENCIA CloseFor 
            {
              Object RESULT =null;
		
        parser.syntax_error(new Symbol(sym.error,0,0,"[6] OpenFor sin condicion y Do no localizado")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // FOR ::= OpenFor Parentesis_a Parentesis_c error CloseFor 
            {
              Object RESULT =null;
		 
        parser.syntax_error(new Symbol(sym.error,0,0,"[5] OpenFor sin condicion y Do no localizado. SENTENCIA VACIA.")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // FOR ::= OpenFor Parentesis_a Parentesis_c Do CloseFor 
            {
              Object RESULT =null;
		
        parser.syntax_error(new Symbol(sym.error,0,0,"[4] OpenFor sin condicion y sentencia vacia.")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // FOR ::= OpenFor Parentesis_a Parentesis_c Do SENTENCIA CloseFor 
            {
              Object RESULT =null;
		
        parser.syntax_error(new Symbol(sym.error,0,0,"[3] OpenFor con condicion vacia. .")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // FOR ::= OpenFor Parentesis_a SENTENCIA_FOR Parentesis_c error CloseFor 
            {
              Object RESULT =null;
		
        
        parser.syntax_error(new Symbol(sym.error,0,0,"[2] OpenFor con sentencia-do incorrecta. No hay nada que hacer en el do.")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // FOR ::= OpenFor Parentesis_a SENTENCIA_FOR Parentesis_c error SENTENCIA CloseFor 
            {
              Object RESULT =null;
		
         parser.syntax_error(new Symbol(sym.error,0,0,"[1] OpenFor sin DO correcto.")); 
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // FOR ::= OpenFor Parentesis_a SENTENCIA_FOR Parentesis_c Do SENTENCIA CloseFor 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                Node x = new Node("FOR",false);
                for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
                 }
           
                Node x2 = new Node("THEN",false);
                for(int i = 0;i<((Node)h2).getHijos().size();i++){
                x2.addHijo(((Node)h2).getHijos().get(i));
                }
                x.addHijo(x2);
                RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // UNTIL ::= OpenUntil Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Do error CloseUntil 
            {
              Object RESULT =null;
		
        parser.syntax_error(new Symbol(sym.error,0,0,"[14] OpenUntil con un error en su cuerpo de declaracion. .")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNTIL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // UNTIL ::= OpenUntil Parentesis_a Parentesis_c Do error CloseUntil 
            {
              Object RESULT =null;
		
        parser.syntax_error(new Symbol(sym.error,0,0,"[13] OpenUntil con un error en su cuerpo de declaracion. .")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNTIL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // UNTIL ::= error Do SENTENCIA CloseUntil 
            {
              Object RESULT =null;
		        
        parser.syntax_error(new Symbol(sym.error,0,0,"[12]  No open-until")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNTIL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // UNTIL ::= error Do CloseUntil 
            {
              Object RESULT =null;
		 
        parser.syntax_error(new Symbol(sym.error,0,0,"[11] No hay openuntil sentencia vacia" ));
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNTIL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // UNTIL ::= OpenUntil error Do CloseUntil 
            {
              Object RESULT =null;
		
        parser.syntax_error(new Symbol(sym.error,0,0,"[10] Until con error en condicion. Until con sentencia vacia"));
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNTIL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // UNTIL ::= OpenUntil error Do error CloseUntil 
            {
              Object RESULT =null;
		
        parser.syntax_error(new Symbol(sym.error,0,0,"[9]  error en condicion y sentencia")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNTIL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // UNTIL ::= OpenUntil error Do SENTENCIA CloseUntil 
            {
              Object RESULT =null;
		
        parser.syntax_error(new Symbol(sym.error,0,0,"[8] Until con error en condicion")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNTIL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // UNTIL ::= OpenUntil Do CloseUntil 
            {
              Object RESULT =null;
		
        parser.syntax_error(new Symbol(sym.error,0,0,"[7]Until sin condicion ni sentencia ni parentesis")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNTIL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // UNTIL ::= OpenUntil Parentesis_a Parentesis_c error SENTENCIA CloseUntil 
            {
              Object RESULT =null;
		
        parser.syntax_error(new Symbol(sym.error,0,0,"[6]Until sin condicion y Do no localizado")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNTIL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // UNTIL ::= OpenUntil Parentesis_a Parentesis_c error CloseUntil 
            {
              Object RESULT =null;
		 
        parser.syntax_error(new Symbol(sym.error,0,0,"[5] Until sin condicion y Do no localizado. SENTENCIA VACIA.")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNTIL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // UNTIL ::= OpenUntil Parentesis_a Parentesis_c Do CloseUntil 
            {
              Object RESULT =null;
		
        parser.syntax_error(new Symbol(sym.error,0,0,"[4] Until sin condicion y sentencia vacia.")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNTIL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // UNTIL ::= OpenUntil Parentesis_a Parentesis_c Do SENTENCIA CloseUntil 
            {
              Object RESULT =null;
		
        parser.syntax_error(new Symbol(sym.error,0,0,"[3] OpenUntil con condicion vacia. .")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNTIL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // UNTIL ::= OpenUntil Parentesis_a SENTENCIA_BOOLEANA Parentesis_c error CloseUntil 
            {
              Object RESULT =null;
		
        
        parser.syntax_error(new Symbol(sym.error,0,0,"[2]OpenUntil con sentencia-do incorrecta. No hay nada que hacer en el do.")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNTIL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // UNTIL ::= OpenUntil Parentesis_a SENTENCIA_BOOLEANA Parentesis_c error SENTENCIA CloseUntil 
            {
              Object RESULT =null;
		
         parser.syntax_error(new Symbol(sym.error,0,0,"[1]Open Until sin DO correcto.")); 
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNTIL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // UNTIL ::= OpenUntil Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Do CloseUntil 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
            System.out.println("SENTENCIA VACIA VALIDA");
            //LEONARDO PODES AGREGAR EL ARBOL AQUI?
                 Node x = new Node("TEST",false);
                 Node x2 = new Node("THEN",false);
                for(int i = 0;i<((Node)h1).getHijos().size();i++){
                        x.addHijo(((Node)h1).getHijos().get(i));
                }
                    
                
                x.addHijo(x2);
                RESULT = x;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNTIL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // UNTIL ::= OpenUntil Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Do SENTENCIA CloseUntil 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                Node x = new Node("UNTIL",false);
                x.addHijo((Node)h1);
                Node x2 = new Node("DO",false);
                for(int i = 0;i<((Node)h2).getHijos().size();i++){
                    x2.addHijo(((Node)h2).getHijos().get(i));
                }
                x.addHijo(x2);
                RESULT = x;

        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNTIL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // IF_ELSE ::= error Then SENTENCIA Or CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("Error en la condicion del If. if con sentencia vacia"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[21] ERROR THEN CLOSETEST. No hay openmain sentencia vacia" ));
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // IF_ELSE ::= OpenTest error SENTENCIA Or CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("open-test con error de sentencia-then"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[20] IF ELSE con error irreconosible en la condicion sentencia-then. .")); 
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // IF_ELSE ::= OpenTest error SENTENCIA Or error CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("open-test con error de sentencia-then"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[19] IF ELSE con error irreconosible en la condicion sentencia-then y en Sentencia-closetest.")); 
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // IF_ELSE ::= OpenTest Then Or error CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("open-test con error de sentencia-then"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[18] IF ELSE con error en sentencia-then")); 
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // IF_ELSE ::= OpenTest error Then SENTENCIA Or error CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("open-test con error de sentencia-then"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[17] IF ELSE con error irreconosible en la condicion sentencia-then y en Sentencia-closetest.")); 
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // IF_ELSE ::= OpenTest error Or CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("open-test con error de sentencia-then"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[16] IF ELSE con error irreconosible en la condicion sentencia.")); 
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // IF_ELSE ::= OpenTest error Then error Or SENTENCIA CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("open-test con error de sentencia-then"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[15] IF ELSE con error irreconosible en la condicion sentencia.")); 
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // IF_ELSE ::= OpenTest error Then SENTENCIA Or SENTENCIA CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("open-test con error de sentencia-then"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[14] IF ELSE con error irreconosible en la condicion.")); 
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // IF_ELSE ::= OpenTest error Or SENTENCIA CloseTest 
            {
              Object RESULT =null;
		
        
        //System.out.println("open-test con error de sentencia-then"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[13] IF ELSE con error en sentencia-then y sentencia-closetest")); 
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // IF_ELSE ::= OpenTest error SENTENCIA Or SENTENCIA CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("open-test con error de sentencia-then"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[12] IF ELSE con error en sentencia-then y sentencia-closetest")); 
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // IF_ELSE ::= OpenTest error Or error CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("open-test con error de sentencia-then"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[11] IF ELSE con error en sentencia-then y sentencia-closetest")); 
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // IF_ELSE ::= OpenTest Then SENTENCIA Or SENTENCIA CloseTest 
            {
              Object RESULT =null;
		
        parser.syntax_error(new Symbol(sym.error,0,0,"[10] IF ELSE sin condicion ni parentesis")); 
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // IF_ELSE ::= OpenTest Parentesis_a Parentesis_c Then Or error CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("open-test con error de sentencia-then"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[9] IF ELSE con error en sentencia-closetest , condicion vacia")); 
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // IF_ELSE ::= OpenTest Parentesis_a Parentesis_c error Or error CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("[8] open-test con error de sentencia-then"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[8] IF ELSE con error en sentencia-then al inicio y en sentencia-closetest. condicion vacia.")); 
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // IF_ELSE ::= OpenTest Parentesis_a Parentesis_c error Or SENTENCIA CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("open-test con error de sentencia-then"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[7] IF ELSE con error en sentencia-then al inicio, condicion vacia.")); 
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // IF_ELSE ::= OpenTest Parentesis_a Parentesis_c error SENTENCIA Or SENTENCIA CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("open-test con error de sentencia"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[6] IF ELSE con error en [then], y condicion vacia.")); 
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // IF_ELSE ::= OpenTest Parentesis_a Parentesis_c Then SENTENCIA Or SENTENCIA CloseTest 
            {
              Object RESULT =null;
		
        parser.syntax_error(new Symbol(sym.error,0,0,"[5] IF ELSE sin condicion")); 
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // IF_ELSE ::= OpenTest Parentesis_a LISTABOOL Parentesis_c Then Or error CloseTest 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
        //System.out.println("open-test con error de sentencia-then"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[4] IF ELSE con error en sentencia-closetest")); 
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // IF_ELSE ::= OpenTest Parentesis_a LISTABOOL Parentesis_c error Or error CloseTest 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
        //System.out.println("open-test con error de sentencia-then"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[3] IF ELSE con error en sentencia-then al inicio y en sentencia-closetest")); 
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // IF_ELSE ::= OpenTest Parentesis_a LISTABOOL Parentesis_c error Or SENTENCIA CloseTest 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
        //System.out.println("open-test con error de sentencia-then"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[2] IF ELSE con error en sentencia-then al inicio.")); 
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // IF_ELSE ::= OpenTest Parentesis_a LISTABOOL Parentesis_c Do SENTENCIA CloseTest 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
        //System.out.println("open-test con error de sentencia"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[23] IF ELSE sin Or.")); 
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // IF_ELSE ::= OpenTest Parentesis_a LISTABOOL Parentesis_c error SENTENCIA Or SENTENCIA CloseTest 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		
        //System.out.println("open-test con error de sentencia"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[1] IF ELSE con error en then.")); 
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // IF_ELSE ::= OpenTest Parentesis_a LISTABOOL Parentesis_c Then SENTENCIA Or SENTENCIA CloseTest 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
           Node x = new Node("TEST",false);
           Node x2 = new Node("THEN",false);
           for(int i = 0;i<((Node)h2).getHijos().size();i++){
                x2.addHijo(((Node)h2).getHijos().get(i));
           }
            for(int i = 0;i<((Node)h1).getHijos().size();i++){
                        x.addHijo(((Node)h1).getHijos().get(i));
           }
           Node x3 = new Node("OR",false);
           for(int i = 0;i<((Node)h3).getHijos().size();i++){
                x3.addHijo(((Node)h3).getHijos().get(i));
           }
           x.addHijo(x2);
           x.addHijo(x3);
            RESULT = x;
            
           
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SENTENCIA_BOOLEANA ::= Identificadoroletra Op_relacional Caracter 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
            Node x = new Node("BOOLEAN STATEMENT",false);
            
            Node x3 = new Node(h2.toString(),false);
            Node x4 = new Node(h3.toString(),false);
            x.addHijo((Node)h1);
            x.addHijo(x3);
            x.addHijo(x4);
            RESULT = x;
           
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SENTENCIA_BOOLEANA ::= Identificadoroletra Op_relacional Comillas Comillas 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
            Node x = new Node("BOOLEAN STATEMENT",false);
            
            Node x3 = new Node(h2.toString(),false);
            Node x4 = new Node(" ",false);
            x.addHijo((Node)h1);
            x.addHijo(x3);
            x.addHijo(x4);
            RESULT = x;
           
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCIA_BOOLEANA ::= Identificadoroletra Op_relacional Identificador 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                    Node x = new Node("BOOLEANA STATEMENT",false);
                    
                    Node x3 = new Node(h2.toString(),false);
                    Node x4 = new Node(h3.toString(),false);
                    x.addHijo((Node)h1);
                    x.addHijo(x3);
                    x.addHijo(x4);
                    RESULT = x;
           
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCIA_BOOLEANA ::= Identificadoroletra Op_relacional Numero 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                Node x = new Node("BOOLEAN STATEMENT",false);
                
                Node x3 = new Node(h2.toString(),false);
                Node x4 = new Node(h3.toString(),false);
                x.addHijo((Node)h1);
                x.addHijo(x3);
                x.addHijo(x4);
                RESULT = x;
           
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENTENCIA_BOOLEANA ::= Identificadoroletra Op_relacional Op_booleano 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
            Node x = new Node("BOOLEAN STATEMENT",false);
            
            Node x3 = new Node(h2.toString(),false);
            Node x4 = new Node(h3.toString(),false);
            x.addHijo((Node)h1);
            x.addHijo(x3);
            x.addHijo(x4);
            RESULT = x;
           
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SENTENCIA_BOOLEANA ::= Parentesis_a SENTENCIA_BOOLEANA Parentesis_c 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            
            RESULT = h1;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
            Node x = new Node("BOOLEAN SATEMENT",false);
            Node x2 = new Node(h2.toString(),false);
            x.addHijo(x2);
            RESULT = x;
           
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SENTENCIA_BOOLEANA ::= NOT SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("BOOLEAN SATEMENT",false);
                Node not = new Node("!",false);
                for(int i = 0;i<((Node)h1).getHijos().size();i++){
                        not.addHijo(((Node)h1).getHijos().get(i));
                     }
                x.addHijo(not);
                RESULT = x;
                
              
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA OR SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("BOOLEAN SATEMENT",false);
                Node or = new Node("|",false);
                for(int i = 0;i<((Node)h1).getHijos().size();i++){
                        or.addHijo(((Node)h1).getHijos().get(i));
                     }
                for(int i = 0;i<((Node)h2).getHijos().size();i++){
                        or.addHijo(((Node)h2).getHijos().get(i));
                     }
                x.addHijo(or);
                RESULT = x;
              
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA AND SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("BOOLEAN SATEMENT",false);
                Node and = new Node("&",false);
                for(int i = 0;i<((Node)h1).getHijos().size();i++){
                        and.addHijo(((Node)h1).getHijos().get(i));
                     }
               
                
                for(int i = 0;i<((Node)h2).getHijos().size();i++){
                        and.addHijo(((Node)h2).getHijos().get(i));
                     }
                x.addHijo(and);
                RESULT = x;
              
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LISTABOOL ::= SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    Node Raiz = new Node("raiz",false);
                    Raiz.addHijo((Node)h1);
                    RESULT = Raiz;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTABOOL",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LISTABOOL ::= LISTABOOL SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    Node Raiz = new Node("raiz",false);
                    for(int i = 0;i<((Node)h1).getHijos().size();i++){
                        Raiz.addHijo(((Node)h1).getHijos().get(i));
                     }
                     for(int i = 0;i<((Node)h2).getHijos().size();i++){
                        Raiz.addHijo(((Node)h2).getHijos().get(i));
                     }
                     RESULT =Raiz;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTABOOL",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // IF ::= error Then SENTENCIA CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("Error en la condicion del If"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[12] No open-main")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // IF ::= error Then CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("Error en la condicion del If. if con sentencia vacia"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[11] No hay openmain, sentencia vacia" ));
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // IF ::= OpenTest error Then CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("Error en la condicion del If. if con sentencia vacia"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[10] If con error en condicion. If con sentencia vacia")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // IF ::= OpenTest error Then error CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("Error en la condicion del If"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[9] If con error en condicion y sentencia")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // IF ::= OpenTest error Then SENTENCIA CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("Error en la condicion del If"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[8] If con error en condicion")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // IF ::= OpenTest Then CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("If sin condicion y sentencia vacia"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[7] If sin condicion y sentencia vacia.")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // IF ::= OpenTest Parentesis_a Parentesis_c error SENTENCIA CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("If sin condicion y sentencia vacia"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[6] If sin condicion y then no localizado")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // IF ::= OpenTest Parentesis_a Parentesis_c error CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("If sin condicion y sentencia vacia"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[5] If sin condicion y then no localizado. ")); //SENTENCIA VACIA.
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // IF ::= OpenTest Parentesis_a Parentesis_c Then CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("If sin condicion y sentencia vacia"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[4] If sin condicion y sentencia vacia.")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // IF ::= OpenTest Parentesis_a Parentesis_c Then SENTENCIA CloseTest 
            {
              Object RESULT =null;
		
        //System.out.println("If sin condicion"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[3] If con condicion vacia.")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // IF ::= OpenTest Parentesis_a LISTABOOL Parentesis_c error CloseTest 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        //System.out.println("open-test con error de sentencia-then");
        parser.syntax_error(new Symbol(sym.error,0,0,"[2] If con sentencia-then incorrecta. No hay nada que hacer en el then.")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // IF ::= OpenTest Parentesis_a LISTABOOL Parentesis_c error SENTENCIA CloseTest 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
        //System.out.println("open-test con error de sentencia"); 
        parser.syntax_error(new Symbol(sym.error,0,0,"[1] IF sin THEN")); 
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // IF ::= OpenTest Parentesis_a LISTABOOL Parentesis_c Then CloseTest 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
            System.out.println("SENTENCIA VACIA VALIDA");
            //LEONARDO PODES AGREGAR EL ARBOL AQUI?
                 Node x = new Node("TEST",false);
                 Node x2 = new Node("THEN",false);
                for(int i = 0;i<((Node)h1).getHijos().size();i++){
                        x.addHijo(((Node)h1).getHijos().get(i));
                }
                    
                
                x.addHijo(x2);
                RESULT = x;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // IF ::= OpenTest Parentesis_a LISTABOOL Parentesis_c Then SENTENCIA CloseTest 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
           Node x = new Node("TEST",false);
           Node x2 = new Node("THEN",false);
           for(int i = 0;i<((Node)h2).getHijos().size();i++){
                x2.addHijo(((Node)h2).getHijos().get(i));
           }
           for(int i = 0;i<((Node)h1).getHijos().size();i++){
                        x.addHijo(((Node)h1).getHijos().get(i));
           }
           
           x.addHijo(x2);
           RESULT = x;
            
           
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLARACION ::= Define Identificadoroletra As Boolean Igual Op_booleano 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 //System.out.println("error NO PCOMA ISSUE"); 
            parser.syntax_error(new Symbol(sym.error,0,0,"[18] Declaracion sin PComa"));
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECLARACION ::= Define Identificadoroletra As Boolean 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 //System.out.println("error NO PCOMA ISSUE"); 
            parser.syntax_error(new Symbol(sym.error,0,0,"[17] Declaracion sin PComa"));
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECLARACION ::= Define Identificadoroletra As Character Corchete_a Numero Corchete_c Corchete_a Numero Corchete_c 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 //System.out.println("error NO PCOMA ISSUE"); 
            parser.syntax_error(new Symbol(sym.error,0,0,"[16] Declaracion sin PComa"));
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARACION ::= Define Identificadoroletra As Character Corchete_a Numero Corchete_c 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 //System.out.println("error NO PCOMA ISSUE"); 
            parser.syntax_error(new Symbol(sym.error,0,0,"[15] Declaracion sin PComa"));
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARACION ::= Define Identificadoroletra As Character Igual Caracter 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 //System.out.println("error NO PCOMA ISSUE"); 
            parser.syntax_error(new Symbol(sym.error,0,0,"[14] Declaracion sin PComa"));
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARACION ::= Define Identificadoroletra As Character 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 //System.out.println("error NO PCOMA ISSUE"); 
            parser.syntax_error(new Symbol(sym.error,0,0,"[13] Declaracion sin PComa"));
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION ::= Define Identificadoroletra As Int Corchete_a Numero Corchete_c Corchete_a Numero Corchete_c 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 //System.out.println("error NO PCOMA ISSUE"); 
            parser.syntax_error(new Symbol(sym.error,0,0,"[12] Declaracion sin PComa"));
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION ::= Define Identificadoroletra As Int Corchete_a Numero Corchete_c 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 //System.out.println("error NO PCOMA ISSUE"); 
            parser.syntax_error(new Symbol(sym.error,0,0,"[11] Declaracion sin PComa"));
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARACION ::= Identificadoroletra Igual EXP 
            {
              Object RESULT =null;
		 //System.out.println("error NO PCOMA EXP ISSUE"); 
            parser.syntax_error(new Symbol(sym.error,0,0,"[10] Asignacion sin Punto y Coma"));
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION ::= Define Identificadoroletra As Int Igual EXP 
            {
              Object RESULT =null;
		 //System.out.println("error NO PCOMA EXP ISSUE"); 
            parser.syntax_error(new Symbol(sym.error,0,0,"[9] Declaracion sin PComa"));
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION ::= Define Identificadoroletra As Int 
            {
              Object RESULT =null;
		 // System.out.println("error NO PCOMA ISSUE"); 
            parser.syntax_error(new Symbol(sym.error,0,0,"[8] Declaracion sin PComa"));
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION ::= error FOR 
            {
              Object RESULT =null;
		 System.out.println("[7] error ne Declaracion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION ::= error IF 
            {
              Object RESULT =null;
		 System.out.println("[6] error en Declaracion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION ::= error CloseMain 
            {
              Object RESULT =null;
		 System.out.println("[5] error en Declaracion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION ::= error UNTIL 
            {
              Object RESULT =null;
		 System.out.println("[4] error en Declaracion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION ::= error IF_ELSE 
            {
              Object RESULT =null;
		 System.out.println("[3] error en Declaracion"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= error DECLARACION 
            {
              Object RESULT =null;
		 System.out.println("[2] error en DECLARACION"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= error P_coma 
            {
              Object RESULT =null;
		 System.out.println("[1] error en Declaracion de sentencia"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= Define Identificadoroletra As Boolean Igual Op_booleano P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
                Node x = new Node("DECLARATION",false);
                Node x2 = new Node("boolean",false);
                
                Node x4 = new Node(b1.toString(),false);
                x.addHijo(x2);
                x.addHijo((Node)h1);
                x.addHijo(x4);
                RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= Define Identificadoroletra As Boolean P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 
                Node x = new Node("DECLARATION",false);
                Node x2 = new Node("boolean",false);
               
                x.addHijo(x2);
                x.addHijo((Node)h1);
                RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= Define Identificadoroletra As Character Corchete_a Numero Corchete_c Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
              
                Node x = new Node("DECLARATION",false);
                Node x2 = new Node("character matrix",false);
                Node x4 = new Node("["+c1.toString()+"]"+"["+c2.toString()+"]",false);
                x.addHijo(x2);
                x.addHijo((Node)h1);
                x.addHijo(x4);
                RESULT = x;
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= Define Identificadoroletra As Character Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
              
                Node x = new Node("DECLARATION",false);
                Node x2 = new Node("character array",false);
                Node x4 = new Node("["+c1.toString()+"]",false);
                x.addHijo(x2);
                x.addHijo((Node)h1);
                x.addHijo(x4);
                RESULT = x;
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= Define Identificadoroletra As Character Igual Caracter P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
            Node x = new Node("DECLARATION",false);
            Node x2 = new Node("character",false);
            Node x3 = new Node(c1.toString(),false);
            x.addHijo(x2);
            x.addHijo((Node)h1);
            x.addHijo(x3);
            RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= Define Identificadoroletra As Character P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 
            Node x = new Node("DECLARATION",false);
            Node x2 = new Node("character",false);
            x.addHijo(x2);
            x.addHijo((Node)h1);
            RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= Define Identificadoroletra As Int Corchete_a Numero Corchete_c Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
              
                Node x = new Node("DECLARATION",false);
                Node x2 = new Node("integer matrix",false);
                Node x4 = new Node("["+n1.toString()+"]"+"["+n2.toString()+"]",false);
                x.addHijo(x2);
                x.addHijo((Node)h1);
                x.addHijo(x4);
                RESULT = x;
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= Define Identificadoroletra As Int Corchete_a Numero Corchete_c P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
              
                Node x = new Node("DECLARATION",false);
                Node x2 = new Node("integer array",false);
                Node x4 = new Node("["+n.toString()+"]",false);
                x.addHijo(x2);
                x.addHijo((Node)h1);
                x.addHijo(x4);
                RESULT = x;
        
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= Identificadoroletra Corchete_a Numero Corchete_c Corchete_a Numero Corchete_c Igual Numero P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
             Node x = new Node("ASSIGNMENT MATRIX",false);
                x.addHijo((Node)h1);
                Node corchetes = new Node(n.toString(),false);
                Node corchetes2 = new Node(n2.toString(),false);
                corchetes2.addHijo(new Node(h2.toString(),false));
                x.addHijo(corchetes);
                x.addHijo(corchetes2);
                RESULT = x;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= Identificadoroletra Corchete_a Numero Corchete_c Corchete_a Numero Corchete_c Igual Caracter P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
             Node x = new Node("ASSIGNMENT MATRIX",false);
                x.addHijo((Node)h1);
                Node corchetes = new Node(n.toString(),false);
                Node corchetes2 = new Node(n2.toString(),false);
                corchetes2.addHijo(new Node(h2.toString(),false));
                x.addHijo(corchetes);
                x.addHijo(corchetes2);
                RESULT = x;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= Identificadoroletra Corchete_a Numero Corchete_c Corchete_a Numero Corchete_c Igual Identificadoroletra P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
             Node x = new Node("ASSIGNMENT MATRIX",false);
                x.addHijo((Node)h1);
                Node corchetes = new Node(n.toString(),false);
                Node corchetes2 = new Node(n2.toString(),false);
                corchetes2.addHijo((Node)h2);
                x.addHijo(corchetes);
                x.addHijo(corchetes2);
                RESULT = x;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= Identificadoroletra Corchete_a Numero Corchete_c Igual Identificadoroletra P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
             Node x = new Node("ASSIGNMENT ARRAY",false);
                x.addHijo((Node)h1);
                Node corchetes = new Node(n.toString(),false);
                corchetes.addHijo((Node)h2);
                x.addHijo(corchetes);
                RESULT = x;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= Identificadoroletra Corchete_a Numero Corchete_c Igual Numero P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
             Node x = new Node("ASSIGNMENT ARRAY",false);
                x.addHijo((Node)h1);
                Node corchetes = new Node(n.toString(),false);
                corchetes.addHijo(new Node(h2.toString(),false));
                x.addHijo(corchetes);
                RESULT = x;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= Identificadoroletra Corchete_a Numero Corchete_c Igual Caracter P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
             Node x = new Node("ASSIGNMENT ARRAY",false);
                x.addHijo((Node)h1);
                Node corchetes = new Node(n.toString(),false);
                corchetes.addHijo(new Node(h2.toString(),false));
                x.addHijo(corchetes);
                RESULT = x;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= Identificadoroletra Igual CALLMETHOD 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node x = new Node("ASSIGNMENT",false);
        x.addHijo((Node)h1);
        x.addHijo((Node)h2);
        RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= Identificadoroletra Igual EXP P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node x = new Node("ASSIGNMENT",false);
        x.addHijo((Node)h1);
        x.addHijo((Node)h2);
        RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= Define Identificadoroletra As Int Igual EXP P_coma 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
        Node x = new Node("DECLARATION",false);
        Node x2 = new Node("integer",false);
       
        x.addHijo(x2);
        x.addHijo((Node)h2);
        x.addHijo((Node)h1);
        RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Define Identificadoroletra As Int P_coma 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 
        Node x = new Node("DECLARATION",false);
        Node x2 = new Node("integer",false);
        
        x.addHijo(x2);
        x.addHijo((Node)h2);
        RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CALLMETHOD ::= Identificadoroletra Parentesis_a PARAMETROS2 Parentesis_c P_coma 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
    Node x = new Node("METHOD-CALL",true);
    x.addHijo((Node)h1);
    x.addHijo((Node)h2);
    RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALLMETHOD",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Identificadoroletra ::= L 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  Node x = new Node(h1.toString(),false);
            
            RESULT = x;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Identificadoroletra",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Identificadoroletra ::= Identificador 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  Node x = new Node(h1.toString(),false);
            
            RESULT = x;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Identificadoroletra",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // METHOD ::= METHOD OpenMethod Int Identificadoroletra Parentesis_a PARAMETROS Parentesis_c SENTENCIA Return Igual Identificadoroletra P_coma CloseMethod 
            {
              Object RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).right;
		Object m1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Node raiz = new Node("Raiz",false);
        for(int i = 0;i<((Node)m1).getHijos().size();i++){
                raiz.addHijo(((Node)m1).getHijos().get(i));
            }
        Node x = new Node("INTEGER METHOD",false);
        x.addHijo((Node)h1);
        for(int i = 0;i<((Node)params).getHijos().size();i++){
                x.addHijo(((Node)params).getHijos().get(i));
            }
        Node BLOCK = new Node("BLOQUE",false);
        for(int i = 0;i<((Node)h2).getHijos().size();i++){
                BLOCK.addHijo(((Node)h2).getHijos().get(i));
            }
        x.addHijo(BLOCK);
        Node RETURN = new Node("RETURN",false);
        RETURN.addHijo((Node)h3);
        x.addHijo(RETURN);
        raiz.addHijo(x);
        RESULT = raiz; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // METHOD ::= METHOD OpenMethod Int Identificadoroletra Parentesis_a Parentesis_c SENTENCIA Return Igual Identificadoroletra P_coma CloseMethod 
            {
              Object RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		Object m1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Node raiz = new Node("Raiz",false);
        for(int i = 0;i<((Node)m1).getHijos().size();i++){
                raiz.addHijo(((Node)m1).getHijos().get(i));
            }
        Node x = new Node("INTEGER METHOD",false);
        x.addHijo((Node)h1);
        
        Node BLOCK = new Node("BLOQUE",false);
        for(int i = 0;i<((Node)h2).getHijos().size();i++){
                BLOCK.addHijo(((Node)h2).getHijos().get(i));
            }
        x.addHijo(BLOCK);
        Node RETURN = new Node("RETURN",false);
        RETURN.addHijo((Node)h3);
        x.addHijo(RETURN);
        raiz.addHijo(x);
        RESULT = raiz; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // METHOD ::= OpenMethod Int Identificadoroletra Parentesis_a PARAMETROS Parentesis_c SENTENCIA Return Igual Identificadoroletra P_coma CloseMethod 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Node raiz = new Node("Raiz",false);
        Node x = new Node("INTEGER METHOD",false);
        x.addHijo((Node)h1);
        for(int i = 0;i<((Node)params).getHijos().size();i++){
                x.addHijo(((Node)params).getHijos().get(i));
            }
        Node BLOCK = new Node("BLOQUE",false);
        for(int i = 0;i<((Node)h2).getHijos().size();i++){
                BLOCK.addHijo(((Node)h2).getHijos().get(i));
            }
        x.addHijo(BLOCK);
        Node RETURN = new Node("RETURN",false);
        RETURN.addHijo((Node)h3);
        x.addHijo(RETURN);
        raiz.addHijo(x);
        RESULT =  raiz; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // METHOD ::= OpenMethod Int Identificadoroletra Parentesis_a Parentesis_c SENTENCIA Return Igual Identificadoroletra P_coma CloseMethod 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Node raiz = new Node("Raiz",false);
        Node x = new Node("INTEGER METHOD",false);
        x.addHijo((Node)h1);
        Node BLOCK = new Node("BLOQUE",false);
        for(int i = 0;i<((Node)h2).getHijos().size();i++){
                BLOCK.addHijo(((Node)h2).getHijos().get(i));
            }
        x.addHijo(BLOCK);
        Node RETURN = new Node("RETURN",false);
        RETURN.addHijo((Node)h3);
        x.addHijo(RETURN);
        raiz.addHijo(x);
        RESULT =  raiz; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METHOD",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // F ::= Parentesis_a E Parentesis_c 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            RESULT = e;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // F ::= Identificadoroletra 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = h1;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // F ::= Numero 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node x = new Node(h1.toString(),false);
            RESULT = x;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("F",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // T ::= F 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = f;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // T ::= T Division F 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node x = new Node("/",false);
        x.addHijo((Node)t);
        x.addHijo((Node)f);
        RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // T ::= T Multiplicacion F 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node x = new Node("*",false);
        x.addHijo((Node)t);
        x.addHijo((Node)f);
        RESULT = x;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E ::= T 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            RESULT = t;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E ::= E Resta T 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Node x = new Node("-",false);
        x.addHijo((Node)e);
        x.addHijo((Node)t);
        RESULT = x;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E ::= E Suma T 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        Node x = new Node("+",false);
        x.addHijo((Node)e);
        x.addHijo((Node)t);
        RESULT = x;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP ::= E 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = e;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMETROS ::= PARAMETROS P_coma Int Identificadoroletra 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node raiz = new Node("RAIZ",false);
        
        for(int i = 0;i<((Node)h1).getHijos().size();i++){
                raiz.addHijo(((Node)h1).getHijos().get(i));
                }
        raiz.addHijo(new Node("INTEGER",false));
           raiz.addHijo((Node)h2);
           RESULT = raiz;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMETROS ::= Int Identificadoroletra 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
           Node raiz = new Node("RAIZ",false);
           raiz.addHijo(new Node("INTEGER",false));
           raiz.addHijo((Node)h1);
           RESULT = raiz;
           
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMETROS2 ::= 
            {
              Object RESULT =null;
		
    Node raiz = new Node("PARAMETROS",false);
    RESULT = raiz;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMETROS2 ::= PARAMETROS2 P_coma Numero 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node raiz = new Node("PARAMETROS",false);
        
        for(int i = 0;i<((Node)h1).getHijos().size();i++){
                raiz.addHijo(((Node)h1).getHijos().get(i));
                }
           Node x = new Node(h2.toString(),false);
           raiz.addHijo(x);
           RESULT = raiz;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMETROS2 ::= PARAMETROS2 P_coma Identificadoroletra 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node raiz = new Node("PARAMETROS",false);
        
        for(int i = 0;i<((Node)h1).getHijos().size();i++){
                raiz.addHijo(((Node)h1).getHijos().get(i));
                }
        
           raiz.addHijo((Node)h2);
           RESULT = raiz;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMETROS2 ::= Numero 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
           Node raiz = new Node("PARAMETROS",false);
           Node x = new Node(h1.toString(),false);
           raiz.addHijo(x);
           RESULT = raiz;
           
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMETROS2 ::= Identificadoroletra 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
           Node raiz = new Node("PARAMETROS",false);
           raiz.addHijo((Node)h1);
           RESULT = raiz;
           
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= CALLMETHOD 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node x = new Node("SENTENCIA",false);
            x.addHijo((Node)h2);
            RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTENCIA CALLMETHOD 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node x = new Node("SENTENCIA",false);
                 for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
                }
                
                x.addHijo((Node)h2);
                RESULT = x; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= MATCH 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node x = new Node("SENTENCIA",false);
            x.addHijo((Node)h2);
            RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTENCIA MATCH 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("SENTENCIA",false);
                 for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
                }
                
                x.addHijo((Node)h2);
                RESULT = x; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= ESCRITURA 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node x = new Node("SENTENCIA",false);
            
            x.addHijo((Node)h2);
            RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTENCIA ESCRITURA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("SENTENCIA",false);
                 for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
            }
                
                x.addHijo((Node)h2);
                RESULT = x; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= LECTURA 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node x = new Node("SENTENCIA",false);
            x.addHijo((Node)h2);
            RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SENTENCIA LECTURA 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("SENTENCIA",false);
                 for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
                }
                
                x.addHijo((Node)h2);
                RESULT = x; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node x = new Node("SENTENCIA",false);
            x.addHijo((Node)h2);
            RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("SENTENCIA",false);
                for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
                }
               
                x.addHijo((Node)h2);
                RESULT = x; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= UNTIL 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node x = new Node("SENTENCIA",false);
            x.addHijo((Node)h2);
            RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SENTENCIA UNTIL 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("SENTENCIA",false);
                 for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
                }
               
                x.addHijo((Node)h2);
                RESULT = x; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            Node x = new Node("SENTENCIA",false);
            x.addHijo((Node)h2);
            RESULT = x;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                Node x = new Node("SENTENCIA",false);
                for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
                }
                x.addHijo((Node)h2);
                RESULT = x; 
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= IF 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  Node x = new Node("SENTENCIA",false);
            x.addHijo((Node)h2);
            RESULT = x;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
           Node x = new Node("SENTENCIA",false);
            for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
            }
           x.addHijo((Node)h2);
           RESULT = x; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Node x = new Node("SENTENCIA",false);
            x.addHijo((Node)h2);
            RESULT = x;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
           
           Node x = new Node("SENTENCIA",false);
           for(int i = 0;i<((Node)h1).getHijos().size();i++){
                x.addHijo(((Node)h1).getHijos().get(i));
            }
           x.addHijo((Node)h2);
           RESULT = x; 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INICIO ::= 
            {
              Object RESULT =null;
		 
        parser.syntax_error(new Symbol(sym.error,0,0,"[9] No hay codigo para analizar. No hay un main."));
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= Main error 
            {
              Object RESULT =null;
		 //System.out.println("Main Error");  
         parser.syntax_error(new Symbol(sym.error,0,0,"[8] el cuerpo del main presenta errores."));
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= error 
            {
              Object RESULT =null;
		// System.out.println("");  
        parser.syntax_error(new Symbol(sym.error,0,0,"[7] No se reconoce el valor ingresado. No se encontro un main."));
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= error CloseMain METHOD 
            {
              Object RESULT =null;
		 //System.out.println("Error CloseMain");  
         parser.syntax_error(new Symbol(sym.error,0,0,"[6] Error en la declaracion del main."));
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= error SENTENCIA CloseMain METHOD 
            {
              Object RESULT =null;
		 //System.out.println("Error SENTENCIA CloseMain");  
        parser.syntax_error(new Symbol(sym.error,0,0,"[5] Problema en la declaracion del main."));
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= Main Parentesis_a Parentesis_c error CloseMain METHOD 
            {
              Object RESULT =null;
		 //System.out.println("Main() Error CloseMain. Hay presencia de errores en el cuerpo de sentencia del main.");
            parser.syntax_error(new Symbol(sym.error,0,0,"[4] Hay presencia de valores lexicos no reconocidos en el cuerpo de sentencia del main.")); 
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= error CloseMain 
            {
              Object RESULT =null;
		 //System.out.println("Error CloseMain");  
         parser.syntax_error(new Symbol(sym.error,0,0,"[3] Error en la declaracion del main."));
      
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= error SENTENCIA CloseMain 
            {
              Object RESULT =null;
		 //System.out.println("Error SENTENCIA CloseMain");  
        parser.syntax_error(new Symbol(sym.error,0,0,"[2] Problema en la declaracion del main."));
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Main Parentesis_a Parentesis_c error CloseMain 
            {
              Object RESULT =null;
		 //System.out.println("Main() Error CloseMain. Hay presencia de errores en el cuerpo de sentencia del main.");
            parser.syntax_error(new Symbol(sym.error,0,0,"[1] Hay presencia de errores en el cuerpo de sentencia del main.")); 
         
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Main Parentesis_a Parentesis_c SENTENCIA CloseMain METHOD 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object h3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
           Node raiz = new Node("ROOT",false);
           
           Node x = new Node("MAIN",false);
           for(int i = 0;i<((Node)h2).getHijos().size();i++){
                x.addHijo(((Node)h2).getHijos().get(i));
            }
           //x.addHijo((Node)h2);
           raiz.addHijo(x);
           for(int i = 0;i<((Node)h3).getHijos().size();i++){
                raiz.addHijo(((Node)h3).getHijos().get(i));
            }
           
           System.out.println(raiz.Imprimir(0));
           
          
          
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parentesis_a Parentesis_c CloseMain 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Main Parentesis_a Parentesis_c SENTENCIA CloseMain 
            {
              Object RESULT =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object h2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
           Node raiz = new Node("ROOT",false);
           Node x = new Node("MAIN",false);
           for(int i = 0;i<((Node)h2).getHijos().size();i++){
                x.addHijo(((Node)h2).getHijos().get(i));
            }
           //x.addHijo((Node)h2);
           raiz.addHijo(x);
           System.out.println(raiz.Imprimir(0)); 
          
          
          
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

