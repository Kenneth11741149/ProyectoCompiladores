
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 15 03:01:25 CST 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 15 03:01:25 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\007" +
    "\000\002\004\011\000\002\004\007\000\002\004\011\000" +
    "\002\004\007\000\002\004\013\000\002\004\007\000\002" +
    "\004\013\000\002\004\007\000\002\004\011\000\002\004" +
    "\007\000\002\004\011\000\002\004\005\000\002\006\011" +
    "\000\002\006\005\000\002\012\003\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\006\000\002" +
    "\012\007\000\002\007\013\000\002\010\011\000\002\010" +
    "\005\000\002\011\010\000\002\011\005\000\002\013\012" +
    "\000\002\013\011\000\002\014\005\000\002\014\005\000" +
    "\002\014\004\000\002\015\007\000\002\015\007\000\002" +
    "\015\004\000\002\015\004\000\002\005\005\000\002\005" +
    "\004\000\002\005\004\000\002\016\010\000\002\016\010" +
    "\000\002\017\013\000\002\017\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\004\042\004\001\002\000\004\034\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\035\010\001\002\000\022\011\030\015\020\020" +
    "\017\051\021\054\013\055\014\056\031\057\027\001\002" +
    "\000\036\011\ufff0\012\ufff0\013\ufff0\015\ufff0\016\ufff0\020" +
    "\ufff0\021\ufff0\047\ufff0\051\ufff0\054\ufff0\055\ufff0\056\ufff0" +
    "\057\ufff0\062\ufff0\001\002\000\036\011\ufff6\012\ufff6\013" +
    "\ufff6\015\ufff6\016\ufff6\020\ufff6\021\ufff6\047\ufff6\051\ufff6" +
    "\054\ufff6\055\ufff6\056\ufff6\057\ufff6\062\ufff6\001\002\000" +
    "\010\003\246\044\247\052\245\001\002\000\006\003\241" +
    "\034\240\001\002\000\036\011\ufffe\012\ufffe\013\ufffe\015" +
    "\ufffe\016\ufffe\020\ufffe\021\ufffe\047\ufffe\051\ufffe\054\ufffe" +
    "\055\ufffe\056\ufffe\057\ufffe\062\ufffe\001\002\000\036\011" +
    "\ufff2\012\ufff2\013\ufff2\015\ufff2\016\ufff2\020\ufff2\021\ufff2" +
    "\047\ufff2\051\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\062" +
    "\ufff2\001\002\000\006\003\205\034\204\001\002\000\006" +
    "\003\175\034\174\001\002\000\010\003\125\044\126\052" +
    "\124\001\002\000\036\011\ufffa\012\ufffa\013\ufffa\015\ufffa" +
    "\016\ufffa\020\ufffa\021\ufffa\047\ufffa\051\ufffa\054\ufffa\055" +
    "\ufffa\056\ufffa\057\ufffa\062\ufffa\001\002\000\036\011\ufffc" +
    "\012\ufffc\013\ufffc\015\ufffc\016\ufffc\020\ufffc\021\ufffc\047" +
    "\ufffc\051\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\062\ufffc" +
    "\001\002\000\024\011\030\015\020\020\017\047\123\051" +
    "\021\054\013\055\014\056\031\057\027\001\002\000\036" +
    "\011\ufff4\012\ufff4\013\ufff4\015\ufff4\016\ufff4\020\ufff4\021" +
    "\ufff4\047\ufff4\051\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4" +
    "\062\ufff4\001\002\000\036\011\ufff8\012\ufff8\013\ufff8\015" +
    "\ufff8\016\ufff8\020\ufff8\021\ufff8\047\ufff8\051\ufff8\054\ufff8" +
    "\055\ufff8\056\ufff8\057\ufff8\062\ufff8\001\002\000\004\034" +
    "\074\001\002\000\006\003\040\034\037\001\002\000\006" +
    "\003\033\034\032\001\002\000\004\044\034\001\002\000" +
    "\036\011\uffce\012\uffce\013\uffce\015\uffce\016\uffce\020\uffce" +
    "\021\uffce\047\uffce\051\uffce\054\uffce\055\uffce\056\uffce\057" +
    "\uffce\062\uffce\001\002\000\004\035\035\001\002\000\004" +
    "\043\036\001\002\000\036\011\uffd0\012\uffd0\013\uffd0\015" +
    "\uffd0\016\uffd0\020\uffd0\021\uffd0\047\uffd0\051\uffd0\054\uffd0" +
    "\055\uffd0\056\uffd0\057\uffd0\062\uffd0\001\002\000\006\033" +
    "\043\044\044\001\002\000\004\012\041\001\002\000\036" +
    "\011\uffe1\012\uffe1\013\uffe1\015\uffe1\016\uffe1\020\uffe1\021" +
    "\uffe1\047\uffe1\051\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1" +
    "\062\uffe1\001\002\000\004\035\055\001\002\000\006\035" +
    "\uffe0\043\uffe0\001\002\000\004\030\045\001\002\000\012" +
    "\005\047\033\050\044\051\045\046\001\002\000\006\035" +
    "\uffde\043\uffde\001\002\000\006\005\052\044\053\001\002" +
    "\000\006\035\uffdf\043\uffdf\001\002\000\006\035\uffdd\043" +
    "\uffdd\001\002\000\006\035\uffdc\043\uffdc\001\002\000\004" +
    "\005\054\001\002\000\006\035\uffdb\043\uffdb\001\002\000" +
    "\004\014\056\001\002\000\022\011\030\015\020\020\017" +
    "\051\021\054\013\055\014\056\031\057\027\001\002\000" +
    "\026\011\030\012\065\013\064\015\020\020\017\051\021" +
    "\054\013\055\014\056\031\057\027\001\002\000\036\011" +
    "\uffff\012\uffff\013\uffff\015\uffff\016\uffff\020\uffff\021\uffff" +
    "\047\uffff\051\uffff\054\uffff\055\uffff\056\uffff\057\uffff\062" +
    "\uffff\001\002\000\036\011\ufff5\012\ufff5\013\ufff5\015\ufff5" +
    "\016\ufff5\020\ufff5\021\ufff5\047\ufff5\051\ufff5\054\ufff5\055" +
    "\ufff5\056\ufff5\057\ufff5\062\ufff5\001\002\000\036\011\ufffd" +
    "\012\ufffd\013\ufffd\015\ufffd\016\ufffd\020\ufffd\021\ufffd\047" +
    "\ufffd\051\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\062\ufffd" +
    "\001\002\000\036\011\ufffb\012\ufffb\013\ufffb\015\ufffb\016" +
    "\ufffb\020\ufffb\021\ufffb\047\ufffb\051\ufffb\054\ufffb\055\ufffb" +
    "\056\ufffb\057\ufffb\062\ufffb\001\002\000\022\011\030\015" +
    "\020\020\017\051\021\054\013\055\014\056\031\057\027" +
    "\001\002\000\036\011\uffe2\012\uffe2\013\uffe2\015\uffe2\016" +
    "\uffe2\020\uffe2\021\uffe2\047\uffe2\051\uffe2\054\uffe2\055\uffe2" +
    "\056\uffe2\057\uffe2\062\uffe2\001\002\000\036\011\ufff9\012" +
    "\ufff9\013\ufff9\015\ufff9\016\ufff9\020\ufff9\021\ufff9\047\ufff9" +
    "\051\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\062\ufff9\001" +
    "\002\000\036\011\ufff3\012\ufff3\013\ufff3\015\ufff3\016\ufff3" +
    "\020\ufff3\021\ufff3\047\ufff3\051\ufff3\054\ufff3\055\ufff3\056" +
    "\ufff3\057\ufff3\062\ufff3\001\002\000\036\011\ufff7\012\ufff7" +
    "\013\ufff7\015\ufff7\016\ufff7\020\ufff7\021\ufff7\047\ufff7\051" +
    "\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\062\ufff7\001\002" +
    "\000\036\011\ufff1\012\ufff1\013\ufff1\015\ufff1\016\ufff1\020" +
    "\ufff1\021\ufff1\047\ufff1\051\ufff1\054\ufff1\055\ufff1\056\ufff1" +
    "\057\ufff1\062\ufff1\001\002\000\024\011\030\012\073\015" +
    "\020\020\017\051\021\054\013\055\014\056\031\057\027" +
    "\001\002\000\036\011\uffda\012\uffda\013\uffda\015\uffda\016" +
    "\uffda\020\uffda\021\uffda\047\uffda\051\uffda\054\uffda\055\uffda" +
    "\056\uffda\057\uffda\062\uffda\001\002\000\004\044\075\001" +
    "\002\000\004\035\076\001\002\000\006\003\077\061\100" +
    "\001\002\000\004\060\122\001\002\000\004\005\113\001" +
    "\002\000\006\060\103\061\102\001\002\000\004\005\104" +
    "\001\002\000\036\011\uffc9\012\uffc9\013\uffc9\015\uffc9\016" +
    "\uffc9\020\uffc9\021\uffc9\047\uffc9\051\uffc9\054\uffc9\055\uffc9" +
    "\056\uffc9\057\uffc9\062\uffc9\001\002\000\004\044\105\001" +
    "\002\000\004\005\106\001\002\000\004\022\107\001\002" +
    "\000\022\011\030\015\020\020\017\051\021\054\013\055" +
    "\014\056\031\057\027\001\002\000\024\011\030\015\020" +
    "\020\017\051\021\054\013\055\014\056\031\057\027\062" +
    "\111\001\002\000\004\043\112\001\002\000\006\060\uffc7" +
    "\061\uffc7\001\002\000\004\044\114\001\002\000\004\005" +
    "\115\001\002\000\004\022\116\001\002\000\022\011\030" +
    "\015\020\020\017\051\021\054\013\055\014\056\031\057" +
    "\027\001\002\000\024\011\030\015\020\020\017\051\021" +
    "\054\013\055\014\056\031\057\027\062\120\001\002\000" +
    "\004\043\121\001\002\000\006\060\uffc6\061\uffc6\001\002" +
    "\000\036\011\uffc8\012\uffc8\013\uffc8\015\uffc8\016\uffc8\020" +
    "\uffc8\021\uffc8\047\uffc8\051\uffc8\054\uffc8\055\uffc8\056\uffc8" +
    "\057\uffc8\062\uffc8\001\002\000\004\002\000\001\002\000" +
    "\004\050\152\001\002\000\004\043\151\001\002\000\004" +
    "\050\127\001\002\000\010\007\131\010\130\053\132\001" +
    "\002\000\006\022\144\043\143\001\002\000\006\022\140" +
    "\043\137\001\002\000\006\022\134\043\133\001\002\000" +
    "\036\011\uffe7\012\uffe7\013\uffe7\015\uffe7\016\uffe7\020\uffe7" +
    "\021\uffe7\047\uffe7\051\uffe7\054\uffe7\055\uffe7\056\uffe7\057" +
    "\uffe7\062\uffe7\001\002\000\004\033\135\001\002\000\004" +
    "\043\136\001\002\000\036\011\uffe6\012\uffe6\013\uffe6\015" +
    "\uffe6\016\uffe6\020\uffe6\021\uffe6\047\uffe6\051\uffe6\054\uffe6" +
    "\055\uffe6\056\uffe6\057\uffe6\062\uffe6\001\002\000\036\011" +
    "\uffef\012\uffef\013\uffef\015\uffef\016\uffef\020\uffef\021\uffef" +
    "\047\uffef\051\uffef\054\uffef\055\uffef\056\uffef\057\uffef\062" +
    "\uffef\001\002\000\004\045\141\001\002\000\004\043\142" +
    "\001\002\000\036\011\uffee\012\uffee\013\uffee\015\uffee\016" +
    "\uffee\020\uffee\021\uffee\047\uffee\051\uffee\054\uffee\055\uffee" +
    "\056\uffee\057\uffee\062\uffee\001\002\000\036\011\uffeb\012" +
    "\uffeb\013\uffeb\015\uffeb\016\uffeb\020\uffeb\021\uffeb\047\uffeb" +
    "\051\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\062\uffeb\001" +
    "\002\000\004\005\145\001\002\000\004\044\146\001\002" +
    "\000\004\005\147\001\002\000\004\043\150\001\002\000" +
    "\036\011\uffea\012\uffea\013\uffea\015\uffea\016\uffea\020\uffea" +
    "\021\uffea\047\uffea\051\uffea\054\uffea\055\uffea\056\uffea\057" +
    "\uffea\062\uffea\001\002\000\036\011\uffe3\012\uffe3\013\uffe3" +
    "\015\uffe3\016\uffe3\020\uffe3\021\uffe3\047\uffe3\051\uffe3\054" +
    "\uffe3\055\uffe3\056\uffe3\057\uffe3\062\uffe3\001\002\000\010" +
    "\007\154\010\153\053\155\001\002\000\006\022\167\043" +
    "\166\001\002\000\006\022\163\043\162\001\002\000\006" +
    "\022\157\043\156\001\002\000\036\011\uffe5\012\uffe5\013" +
    "\uffe5\015\uffe5\016\uffe5\020\uffe5\021\uffe5\047\uffe5\051\uffe5" +
    "\054\uffe5\055\uffe5\056\uffe5\057\uffe5\062\uffe5\001\002\000" +
    "\004\033\160\001\002\000\004\043\161\001\002\000\036" +
    "\011\uffe4\012\uffe4\013\uffe4\015\uffe4\016\uffe4\020\uffe4\021" +
    "\uffe4\047\uffe4\051\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4" +
    "\062\uffe4\001\002\000\036\011\uffed\012\uffed\013\uffed\015" +
    "\uffed\016\uffed\020\uffed\021\uffed\047\uffed\051\uffed\054\uffed" +
    "\055\uffed\056\uffed\057\uffed\062\uffed\001\002\000\004\045" +
    "\164\001\002\000\004\043\165\001\002\000\036\011\uffec" +
    "\012\uffec\013\uffec\015\uffec\016\uffec\020\uffec\021\uffec\047" +
    "\uffec\051\uffec\054\uffec\055\uffec\056\uffec\057\uffec\062\uffec" +
    "\001\002\000\036\011\uffe9\012\uffe9\013\uffe9\015\uffe9\016" +
    "\uffe9\020\uffe9\021\uffe9\047\uffe9\051\uffe9\054\uffe9\055\uffe9" +
    "\056\uffe9\057\uffe9\062\uffe9\001\002\000\004\005\170\001" +
    "\002\000\004\044\171\001\002\000\004\005\172\001\002" +
    "\000\004\043\173\001\002\000\036\011\uffe8\012\uffe8\013" +
    "\uffe8\015\uffe8\016\uffe8\020\uffe8\021\uffe8\047\uffe8\051\uffe8" +
    "\054\uffe8\055\uffe8\056\uffe8\057\uffe8\062\uffe8\001\002\000" +
    "\006\033\043\044\044\001\002\000\004\016\176\001\002" +
    "\000\036\011\uffd8\012\uffd8\013\uffd8\015\uffd8\016\uffd8\020" +
    "\uffd8\021\uffd8\047\uffd8\051\uffd8\054\uffd8\055\uffd8\056\uffd8" +
    "\057\uffd8\062\uffd8\001\002\000\004\035\200\001\002\000" +
    "\004\017\201\001\002\000\022\011\030\015\020\020\017" +
    "\051\021\054\013\055\014\056\031\057\027\001\002\000" +
    "\024\011\030\015\020\016\203\020\017\051\021\054\013" +
    "\055\014\056\031\057\027\001\002\000\036\011\uffd9\012" +
    "\uffd9\013\uffd9\015\uffd9\016\uffd9\020\uffd9\021\uffd9\047\uffd9" +
    "\051\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\062\uffd9\001" +
    "\002\000\006\007\211\044\210\001\002\000\004\021\206" +
    "\001\002\000\036\011\uffd6\012\uffd6\013\uffd6\015\uffd6\016" +
    "\uffd6\020\uffd6\021\uffd6\047\uffd6\051\uffd6\054\uffd6\055\uffd6" +
    "\056\uffd6\057\uffd6\062\uffd6\001\002\000\004\035\235\001" +
    "\002\000\004\022\227\001\002\000\004\044\212\001\002" +
    "\000\004\022\213\001\002\000\004\045\214\001\002\000" +
    "\004\043\215\001\002\000\006\033\043\044\044\001\002" +
    "\000\004\043\217\001\002\000\006\032\221\044\222\001" +
    "\002\000\004\035\uffd5\001\002\000\004\044\226\001\002" +
    "\000\006\031\223\032\224\001\002\000\004\045\225\001" +
    "\002\000\004\035\uffcb\001\002\000\004\035\uffcc\001\002" +
    "\000\004\035\uffca\001\002\000\004\045\230\001\002\000" +
    "\004\043\231\001\002\000\006\033\043\044\044\001\002" +
    "\000\004\043\233\001\002\000\006\032\221\044\222\001" +
    "\002\000\004\035\uffd4\001\002\000\022\011\030\015\020" +
    "\020\017\051\021\054\013\055\014\056\031\057\027\001" +
    "\002\000\024\011\030\015\020\020\017\021\237\051\021" +
    "\054\013\055\014\056\031\057\027\001\002\000\036\011" +
    "\uffd7\012\uffd7\013\uffd7\015\uffd7\016\uffd7\020\uffd7\021\uffd7" +
    "\047\uffd7\051\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\062" +
    "\uffd7\001\002\000\004\044\242\001\002\000\036\011\uffcd" +
    "\012\uffcd\013\uffcd\015\uffcd\016\uffcd\020\uffcd\021\uffcd\047" +
    "\uffcd\051\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\062\uffcd" +
    "\001\002\000\004\035\243\001\002\000\004\043\244\001" +
    "\002\000\036\011\uffcf\012\uffcf\013\uffcf\015\uffcf\016\uffcf" +
    "\020\uffcf\021\uffcf\047\uffcf\051\uffcf\054\uffcf\055\uffcf\056" +
    "\uffcf\057\uffcf\062\uffcf\001\002\000\004\043\251\001\002" +
    "\000\036\011\uffd1\012\uffd1\013\uffd1\015\uffd1\016\uffd1\020" +
    "\uffd1\021\uffd1\047\uffd1\051\uffd1\054\uffd1\055\uffd1\056\uffd1" +
    "\057\uffd1\062\uffd1\001\002\000\004\043\250\001\002\000" +
    "\036\011\uffd3\012\uffd3\013\uffd3\015\uffd3\016\uffd3\020\uffd3" +
    "\021\uffd3\047\uffd3\051\uffd3\054\uffd3\055\uffd3\056\uffd3\057" +
    "\uffd3\062\uffd3\001\002\000\036\011\uffd2\012\uffd2\013\uffd2" +
    "\015\uffd2\016\uffd2\020\uffd2\021\uffd2\047\uffd2\051\uffd2\054" +
    "\uffd2\055\uffd2\056\uffd2\057\uffd2\062\uffd2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\023\004\014\006\022\007\021\010\025\011\011\014" +
    "\024\015\015\016\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\057\006\061\007\062\010\065\011\067\014\060" +
    "\015\066\016\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\056\004\014\006\022\007" +
    "\021\010\025\011\011\014\024\015\015\016\010\001\001" +
    "\000\022\004\057\006\061\007\062\010\065\011\067\014" +
    "\060\015\066\016\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\071\004\014\006\022\007\021\010\025\011\011\014\024" +
    "\015\015\016\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\057\006\061\007\062\010\065\011\067\014" +
    "\060\015\066\016\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\107\004\014\006\022" +
    "\007\021\010\025\011\011\014\024\015\015\016\010\001" +
    "\001\000\022\004\057\006\061\007\062\010\065\011\067" +
    "\014\060\015\066\016\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\116\004\014\006\022\007\021\010" +
    "\025\011\011\014\024\015\015\016\010\001\001\000\022" +
    "\004\057\006\061\007\062\010\065\011\067\014\060\015" +
    "\066\016\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\201\004" +
    "\014\006\022\007\021\010\025\011\011\014\024\015\015" +
    "\016\010\001\001\000\022\004\057\006\061\007\062\010" +
    "\065\011\067\014\060\015\066\016\070\001\001\000\002" +
    "\001\001\000\004\013\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\215\001\001\000\002\001\001\000\004" +
    "\005\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\231\001\001\000\002\001\001\000\004" +
    "\005\233\001\001\000\002\001\001\000\024\003\235\004" +
    "\014\006\022\007\021\010\025\011\011\014\024\015\015" +
    "\016\010\001\001\000\022\004\057\006\061\007\062\010" +
    "\065\011\067\014\060\015\066\016\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
        String error = "";
        if(s.value != null){
            error = "Error Sintactico en la linea "+s.right+ " Columna "+(s.left+1)+ ". No se esperaba esto: "+ "\""+ s.value+ "\""+ "\n" ;
           System.out.print(error);
        }
        //errores.add(error)
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CASE ::= When Comillas Identificador Comillas Igual SENTENCIA Stop P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CASE ::= CASE When Comillas Identificador Comillas Igual SENTENCIA Stop P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MATCH ::= OpenMatch Parentesis_a Identificador Parentesis_c error CloseMatch 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MATCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MATCH ::= OpenMatch Parentesis_a Identificador Parentesis_c CASE CloseMatch 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MATCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ESCRITURA ::= Throwln error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ESCRITURA ::= THrow error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ESCRITURA ::= Throwln Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ESCRITURA ::= THrow Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LECTURA ::= Eat error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LECTURA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LECTURA ::= Eat L P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LECTURA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LECTURA ::= Eat Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LECTURA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_FOR ::= Int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FOR ::= OpenFor error CloseFor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FOR ::= OpenFor Parentesis_a SENTENCIA_FOR Parentesis_c SENTENCIA CloseFor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // UNTIL ::= OpenUntil error CloseUntil 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNTIL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // UNTIL ::= OpenUntil Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Do SENTENCIA CloseUntil 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNTIL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IF_ELSE ::= OpenTest Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Then SENTENCIA Or SENTENCIA CloseTest 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IF ::= OpenTest error CloseTest 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IF ::= OpenTest Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Then SENTENCIA CloseTest 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Define error P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Define L As Boolean Igual Op_booleano P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Define L As Boolean P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Define Identificador As Boolean Igual Op_booleano P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Define Identificador As Boolean P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Define L As Character Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Define L As Character P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Define Identificador As Character Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Define Identificador As Character P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Define L As Int Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Define L As Int P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Define Identificador As Int Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Define Identificador As Int P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= MATCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA MATCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= LECTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA LECTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= UNTIL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA UNTIL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Main Parentesis_a Parentesis_c SENTENCIA CloseMain 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

